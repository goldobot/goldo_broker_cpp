// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: goldo/rplidar.proto

#include "goldo/rplidar.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_goldo_2frplidar_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_goldo_2frplidar_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Tresholds;
}  // namespace protobuf_goldo_2frplidar_2eproto
namespace goldo {
namespace rplidar {
class ZonesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Zones>
      _instance;
} _Zones_default_instance_;
class TresholdsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Tresholds>
      _instance;
} _Tresholds_default_instance_;
class RPLidarConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RPLidarConfig>
      _instance;
} _RPLidarConfig_default_instance_;
class RobotDetectionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RobotDetection>
      _instance;
} _RobotDetection_default_instance_;
}  // namespace rplidar
}  // namespace goldo
namespace protobuf_goldo_2frplidar_2eproto {
static void InitDefaultsZones() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::goldo::rplidar::_Zones_default_instance_;
    new (ptr) ::goldo::rplidar::Zones();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::goldo::rplidar::Zones::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Zones =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsZones}, {}};

static void InitDefaultsTresholds() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::goldo::rplidar::_Tresholds_default_instance_;
    new (ptr) ::goldo::rplidar::Tresholds();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::goldo::rplidar::Tresholds::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Tresholds =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTresholds}, {}};

static void InitDefaultsRPLidarConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::goldo::rplidar::_RPLidarConfig_default_instance_;
    new (ptr) ::goldo::rplidar::RPLidarConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::goldo::rplidar::RPLidarConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RPLidarConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRPLidarConfig}, {
      &protobuf_goldo_2frplidar_2eproto::scc_info_Tresholds.base,}};

static void InitDefaultsRobotDetection() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::goldo::rplidar::_RobotDetection_default_instance_;
    new (ptr) ::goldo::rplidar::RobotDetection();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::goldo::rplidar::RobotDetection::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RobotDetection =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRobotDetection}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Zones.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Tresholds.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RPLidarConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RobotDetection.base);
}

::google::protobuf::Metadata file_level_metadata[4];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::rplidar::Zones, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::rplidar::Zones, front_near_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::rplidar::Zones, right_near_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::rplidar::Zones, back_near_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::rplidar::Zones, left_near_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::rplidar::Zones, front_far_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::rplidar::Zones, right_far_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::rplidar::Zones, back_far_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::rplidar::Zones, left_far_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::rplidar::Tresholds, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::rplidar::Tresholds, near_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::rplidar::Tresholds, mid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::rplidar::Tresholds, far_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::rplidar::RPLidarConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::rplidar::RPLidarConfig, theta_offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::rplidar::RPLidarConfig, tresholds_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::rplidar::RobotDetection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::rplidar::RobotDetection, timestamp_ms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::rplidar::RobotDetection, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::rplidar::RobotDetection, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::rplidar::RobotDetection, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::rplidar::RobotDetection, vx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::rplidar::RobotDetection, vy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::rplidar::RobotDetection, ax_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::rplidar::RobotDetection, ay_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::rplidar::RobotDetection, detect_quality_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::goldo::rplidar::Zones)},
  { 13, -1, sizeof(::goldo::rplidar::Tresholds)},
  { 21, -1, sizeof(::goldo::rplidar::RPLidarConfig)},
  { 28, -1, sizeof(::goldo::rplidar::RobotDetection)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::goldo::rplidar::_Zones_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::goldo::rplidar::_Tresholds_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::goldo::rplidar::_RPLidarConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::goldo::rplidar::_RobotDetection_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "goldo/rplidar.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\023goldo/rplidar.proto\022\rgoldo.rplidar\"\237\001\n"
      "\005Zones\022\022\n\nfront_near\030\001 \001(\010\022\022\n\nright_near"
      "\030\002 \001(\010\022\021\n\tback_near\030\003 \001(\010\022\021\n\tleft_near\030\004"
      " \001(\010\022\021\n\tfront_far\030\005 \001(\010\022\021\n\tright_far\030\006 \001"
      "(\010\022\020\n\010back_far\030\007 \001(\010\022\020\n\010left_far\030\010 \001(\010\"3"
      "\n\tTresholds\022\014\n\004near\030\001 \001(\002\022\013\n\003mid\030\002 \001(\002\022\013"
      "\n\003far\030\003 \001(\002\"R\n\rRPLidarConfig\022\024\n\014theta_of"
      "fset\030\001 \001(\002\022+\n\ttresholds\030\002 \001(\0132\030.goldo.rp"
      "lidar.Tresholds\"\220\001\n\016RobotDetection\022\024\n\014ti"
      "mestamp_ms\030\001 \001(\r\022\n\n\002id\030\002 \001(\r\022\t\n\001x\030\003 \001(\002\022"
      "\t\n\001y\030\004 \001(\002\022\n\n\002vx\030\005 \001(\002\022\n\n\002vy\030\006 \001(\002\022\n\n\002ax"
      "\030\007 \001(\002\022\n\n\002ay\030\010 \001(\002\022\026\n\016detect_quality\030\t \001"
      "(\rb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 490);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "goldo/rplidar.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_goldo_2frplidar_2eproto
namespace goldo {
namespace rplidar {

// ===================================================================

void Zones::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Zones::kFrontNearFieldNumber;
const int Zones::kRightNearFieldNumber;
const int Zones::kBackNearFieldNumber;
const int Zones::kLeftNearFieldNumber;
const int Zones::kFrontFarFieldNumber;
const int Zones::kRightFarFieldNumber;
const int Zones::kBackFarFieldNumber;
const int Zones::kLeftFarFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Zones::Zones()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_goldo_2frplidar_2eproto::scc_info_Zones.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:goldo.rplidar.Zones)
}
Zones::Zones(const Zones& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&front_near_, &from.front_near_,
    static_cast<size_t>(reinterpret_cast<char*>(&left_far_) -
    reinterpret_cast<char*>(&front_near_)) + sizeof(left_far_));
  // @@protoc_insertion_point(copy_constructor:goldo.rplidar.Zones)
}

void Zones::SharedCtor() {
  ::memset(&front_near_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&left_far_) -
      reinterpret_cast<char*>(&front_near_)) + sizeof(left_far_));
}

Zones::~Zones() {
  // @@protoc_insertion_point(destructor:goldo.rplidar.Zones)
  SharedDtor();
}

void Zones::SharedDtor() {
}

void Zones::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Zones::descriptor() {
  ::protobuf_goldo_2frplidar_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2frplidar_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Zones& Zones::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_goldo_2frplidar_2eproto::scc_info_Zones.base);
  return *internal_default_instance();
}


void Zones::Clear() {
// @@protoc_insertion_point(message_clear_start:goldo.rplidar.Zones)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&front_near_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&left_far_) -
      reinterpret_cast<char*>(&front_near_)) + sizeof(left_far_));
  _internal_metadata_.Clear();
}

bool Zones::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:goldo.rplidar.Zones)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool front_near = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &front_near_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool right_near = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &right_near_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool back_near = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &back_near_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool left_near = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &left_near_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool front_far = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &front_far_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool right_far = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &right_far_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool back_far = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &back_far_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool left_far = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &left_far_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:goldo.rplidar.Zones)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:goldo.rplidar.Zones)
  return false;
#undef DO_
}

void Zones::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:goldo.rplidar.Zones)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool front_near = 1;
  if (this->front_near() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->front_near(), output);
  }

  // bool right_near = 2;
  if (this->right_near() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->right_near(), output);
  }

  // bool back_near = 3;
  if (this->back_near() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->back_near(), output);
  }

  // bool left_near = 4;
  if (this->left_near() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->left_near(), output);
  }

  // bool front_far = 5;
  if (this->front_far() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->front_far(), output);
  }

  // bool right_far = 6;
  if (this->right_far() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->right_far(), output);
  }

  // bool back_far = 7;
  if (this->back_far() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->back_far(), output);
  }

  // bool left_far = 8;
  if (this->left_far() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->left_far(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:goldo.rplidar.Zones)
}

::google::protobuf::uint8* Zones::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:goldo.rplidar.Zones)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool front_near = 1;
  if (this->front_near() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->front_near(), target);
  }

  // bool right_near = 2;
  if (this->right_near() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->right_near(), target);
  }

  // bool back_near = 3;
  if (this->back_near() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->back_near(), target);
  }

  // bool left_near = 4;
  if (this->left_near() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->left_near(), target);
  }

  // bool front_far = 5;
  if (this->front_far() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->front_far(), target);
  }

  // bool right_far = 6;
  if (this->right_far() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->right_far(), target);
  }

  // bool back_far = 7;
  if (this->back_far() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->back_far(), target);
  }

  // bool left_far = 8;
  if (this->left_far() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->left_far(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:goldo.rplidar.Zones)
  return target;
}

size_t Zones::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:goldo.rplidar.Zones)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool front_near = 1;
  if (this->front_near() != 0) {
    total_size += 1 + 1;
  }

  // bool right_near = 2;
  if (this->right_near() != 0) {
    total_size += 1 + 1;
  }

  // bool back_near = 3;
  if (this->back_near() != 0) {
    total_size += 1 + 1;
  }

  // bool left_near = 4;
  if (this->left_near() != 0) {
    total_size += 1 + 1;
  }

  // bool front_far = 5;
  if (this->front_far() != 0) {
    total_size += 1 + 1;
  }

  // bool right_far = 6;
  if (this->right_far() != 0) {
    total_size += 1 + 1;
  }

  // bool back_far = 7;
  if (this->back_far() != 0) {
    total_size += 1 + 1;
  }

  // bool left_far = 8;
  if (this->left_far() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Zones::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:goldo.rplidar.Zones)
  GOOGLE_DCHECK_NE(&from, this);
  const Zones* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Zones>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:goldo.rplidar.Zones)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:goldo.rplidar.Zones)
    MergeFrom(*source);
  }
}

void Zones::MergeFrom(const Zones& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:goldo.rplidar.Zones)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.front_near() != 0) {
    set_front_near(from.front_near());
  }
  if (from.right_near() != 0) {
    set_right_near(from.right_near());
  }
  if (from.back_near() != 0) {
    set_back_near(from.back_near());
  }
  if (from.left_near() != 0) {
    set_left_near(from.left_near());
  }
  if (from.front_far() != 0) {
    set_front_far(from.front_far());
  }
  if (from.right_far() != 0) {
    set_right_far(from.right_far());
  }
  if (from.back_far() != 0) {
    set_back_far(from.back_far());
  }
  if (from.left_far() != 0) {
    set_left_far(from.left_far());
  }
}

void Zones::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:goldo.rplidar.Zones)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zones::CopyFrom(const Zones& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:goldo.rplidar.Zones)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zones::IsInitialized() const {
  return true;
}

void Zones::Swap(Zones* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Zones::InternalSwap(Zones* other) {
  using std::swap;
  swap(front_near_, other->front_near_);
  swap(right_near_, other->right_near_);
  swap(back_near_, other->back_near_);
  swap(left_near_, other->left_near_);
  swap(front_far_, other->front_far_);
  swap(right_far_, other->right_far_);
  swap(back_far_, other->back_far_);
  swap(left_far_, other->left_far_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Zones::GetMetadata() const {
  protobuf_goldo_2frplidar_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2frplidar_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Tresholds::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Tresholds::kNearFieldNumber;
const int Tresholds::kMidFieldNumber;
const int Tresholds::kFarFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Tresholds::Tresholds()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_goldo_2frplidar_2eproto::scc_info_Tresholds.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:goldo.rplidar.Tresholds)
}
Tresholds::Tresholds(const Tresholds& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&near_, &from.near_,
    static_cast<size_t>(reinterpret_cast<char*>(&far_) -
    reinterpret_cast<char*>(&near_)) + sizeof(far_));
  // @@protoc_insertion_point(copy_constructor:goldo.rplidar.Tresholds)
}

void Tresholds::SharedCtor() {
  ::memset(&near_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&far_) -
      reinterpret_cast<char*>(&near_)) + sizeof(far_));
}

Tresholds::~Tresholds() {
  // @@protoc_insertion_point(destructor:goldo.rplidar.Tresholds)
  SharedDtor();
}

void Tresholds::SharedDtor() {
}

void Tresholds::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Tresholds::descriptor() {
  ::protobuf_goldo_2frplidar_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2frplidar_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Tresholds& Tresholds::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_goldo_2frplidar_2eproto::scc_info_Tresholds.base);
  return *internal_default_instance();
}


void Tresholds::Clear() {
// @@protoc_insertion_point(message_clear_start:goldo.rplidar.Tresholds)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&near_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&far_) -
      reinterpret_cast<char*>(&near_)) + sizeof(far_));
  _internal_metadata_.Clear();
}

bool Tresholds::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:goldo.rplidar.Tresholds)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float near = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &near_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float mid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float far = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &far_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:goldo.rplidar.Tresholds)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:goldo.rplidar.Tresholds)
  return false;
#undef DO_
}

void Tresholds::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:goldo.rplidar.Tresholds)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float near = 1;
  if (this->near() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->near(), output);
  }

  // float mid = 2;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->mid(), output);
  }

  // float far = 3;
  if (this->far() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->far(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:goldo.rplidar.Tresholds)
}

::google::protobuf::uint8* Tresholds::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:goldo.rplidar.Tresholds)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float near = 1;
  if (this->near() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->near(), target);
  }

  // float mid = 2;
  if (this->mid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->mid(), target);
  }

  // float far = 3;
  if (this->far() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->far(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:goldo.rplidar.Tresholds)
  return target;
}

size_t Tresholds::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:goldo.rplidar.Tresholds)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float near = 1;
  if (this->near() != 0) {
    total_size += 1 + 4;
  }

  // float mid = 2;
  if (this->mid() != 0) {
    total_size += 1 + 4;
  }

  // float far = 3;
  if (this->far() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Tresholds::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:goldo.rplidar.Tresholds)
  GOOGLE_DCHECK_NE(&from, this);
  const Tresholds* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Tresholds>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:goldo.rplidar.Tresholds)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:goldo.rplidar.Tresholds)
    MergeFrom(*source);
  }
}

void Tresholds::MergeFrom(const Tresholds& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:goldo.rplidar.Tresholds)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.near() != 0) {
    set_near(from.near());
  }
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
  if (from.far() != 0) {
    set_far(from.far());
  }
}

void Tresholds::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:goldo.rplidar.Tresholds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tresholds::CopyFrom(const Tresholds& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:goldo.rplidar.Tresholds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tresholds::IsInitialized() const {
  return true;
}

void Tresholds::Swap(Tresholds* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Tresholds::InternalSwap(Tresholds* other) {
  using std::swap;
  swap(near_, other->near_);
  swap(mid_, other->mid_);
  swap(far_, other->far_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Tresholds::GetMetadata() const {
  protobuf_goldo_2frplidar_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2frplidar_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RPLidarConfig::InitAsDefaultInstance() {
  ::goldo::rplidar::_RPLidarConfig_default_instance_._instance.get_mutable()->tresholds_ = const_cast< ::goldo::rplidar::Tresholds*>(
      ::goldo::rplidar::Tresholds::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RPLidarConfig::kThetaOffsetFieldNumber;
const int RPLidarConfig::kTresholdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RPLidarConfig::RPLidarConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_goldo_2frplidar_2eproto::scc_info_RPLidarConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:goldo.rplidar.RPLidarConfig)
}
RPLidarConfig::RPLidarConfig(const RPLidarConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_tresholds()) {
    tresholds_ = new ::goldo::rplidar::Tresholds(*from.tresholds_);
  } else {
    tresholds_ = NULL;
  }
  theta_offset_ = from.theta_offset_;
  // @@protoc_insertion_point(copy_constructor:goldo.rplidar.RPLidarConfig)
}

void RPLidarConfig::SharedCtor() {
  ::memset(&tresholds_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&theta_offset_) -
      reinterpret_cast<char*>(&tresholds_)) + sizeof(theta_offset_));
}

RPLidarConfig::~RPLidarConfig() {
  // @@protoc_insertion_point(destructor:goldo.rplidar.RPLidarConfig)
  SharedDtor();
}

void RPLidarConfig::SharedDtor() {
  if (this != internal_default_instance()) delete tresholds_;
}

void RPLidarConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RPLidarConfig::descriptor() {
  ::protobuf_goldo_2frplidar_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2frplidar_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RPLidarConfig& RPLidarConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_goldo_2frplidar_2eproto::scc_info_RPLidarConfig.base);
  return *internal_default_instance();
}


void RPLidarConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:goldo.rplidar.RPLidarConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && tresholds_ != NULL) {
    delete tresholds_;
  }
  tresholds_ = NULL;
  theta_offset_ = 0;
  _internal_metadata_.Clear();
}

bool RPLidarConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:goldo.rplidar.RPLidarConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float theta_offset = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &theta_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .goldo.rplidar.Tresholds tresholds = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tresholds()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:goldo.rplidar.RPLidarConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:goldo.rplidar.RPLidarConfig)
  return false;
#undef DO_
}

void RPLidarConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:goldo.rplidar.RPLidarConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float theta_offset = 1;
  if (this->theta_offset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->theta_offset(), output);
  }

  // .goldo.rplidar.Tresholds tresholds = 2;
  if (this->has_tresholds()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_tresholds(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:goldo.rplidar.RPLidarConfig)
}

::google::protobuf::uint8* RPLidarConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:goldo.rplidar.RPLidarConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float theta_offset = 1;
  if (this->theta_offset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->theta_offset(), target);
  }

  // .goldo.rplidar.Tresholds tresholds = 2;
  if (this->has_tresholds()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_tresholds(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:goldo.rplidar.RPLidarConfig)
  return target;
}

size_t RPLidarConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:goldo.rplidar.RPLidarConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .goldo.rplidar.Tresholds tresholds = 2;
  if (this->has_tresholds()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *tresholds_);
  }

  // float theta_offset = 1;
  if (this->theta_offset() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RPLidarConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:goldo.rplidar.RPLidarConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const RPLidarConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RPLidarConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:goldo.rplidar.RPLidarConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:goldo.rplidar.RPLidarConfig)
    MergeFrom(*source);
  }
}

void RPLidarConfig::MergeFrom(const RPLidarConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:goldo.rplidar.RPLidarConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_tresholds()) {
    mutable_tresholds()->::goldo::rplidar::Tresholds::MergeFrom(from.tresholds());
  }
  if (from.theta_offset() != 0) {
    set_theta_offset(from.theta_offset());
  }
}

void RPLidarConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:goldo.rplidar.RPLidarConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RPLidarConfig::CopyFrom(const RPLidarConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:goldo.rplidar.RPLidarConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RPLidarConfig::IsInitialized() const {
  return true;
}

void RPLidarConfig::Swap(RPLidarConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RPLidarConfig::InternalSwap(RPLidarConfig* other) {
  using std::swap;
  swap(tresholds_, other->tresholds_);
  swap(theta_offset_, other->theta_offset_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RPLidarConfig::GetMetadata() const {
  protobuf_goldo_2frplidar_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2frplidar_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RobotDetection::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RobotDetection::kTimestampMsFieldNumber;
const int RobotDetection::kIdFieldNumber;
const int RobotDetection::kXFieldNumber;
const int RobotDetection::kYFieldNumber;
const int RobotDetection::kVxFieldNumber;
const int RobotDetection::kVyFieldNumber;
const int RobotDetection::kAxFieldNumber;
const int RobotDetection::kAyFieldNumber;
const int RobotDetection::kDetectQualityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RobotDetection::RobotDetection()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_goldo_2frplidar_2eproto::scc_info_RobotDetection.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:goldo.rplidar.RobotDetection)
}
RobotDetection::RobotDetection(const RobotDetection& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&timestamp_ms_, &from.timestamp_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&detect_quality_) -
    reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(detect_quality_));
  // @@protoc_insertion_point(copy_constructor:goldo.rplidar.RobotDetection)
}

void RobotDetection::SharedCtor() {
  ::memset(&timestamp_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&detect_quality_) -
      reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(detect_quality_));
}

RobotDetection::~RobotDetection() {
  // @@protoc_insertion_point(destructor:goldo.rplidar.RobotDetection)
  SharedDtor();
}

void RobotDetection::SharedDtor() {
}

void RobotDetection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RobotDetection::descriptor() {
  ::protobuf_goldo_2frplidar_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2frplidar_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RobotDetection& RobotDetection::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_goldo_2frplidar_2eproto::scc_info_RobotDetection.base);
  return *internal_default_instance();
}


void RobotDetection::Clear() {
// @@protoc_insertion_point(message_clear_start:goldo.rplidar.RobotDetection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&timestamp_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&detect_quality_) -
      reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(detect_quality_));
  _internal_metadata_.Clear();
}

bool RobotDetection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:goldo.rplidar.RobotDetection)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 timestamp_ms = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float x = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float y = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float vx = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float vy = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float ax = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ax_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float ay = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ay_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 detect_quality = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &detect_quality_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:goldo.rplidar.RobotDetection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:goldo.rplidar.RobotDetection)
  return false;
#undef DO_
}

void RobotDetection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:goldo.rplidar.RobotDetection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 timestamp_ms = 1;
  if (this->timestamp_ms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->timestamp_ms(), output);
  }

  // uint32 id = 2;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  // float x = 3;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->x(), output);
  }

  // float y = 4;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->y(), output);
  }

  // float vx = 5;
  if (this->vx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->vx(), output);
  }

  // float vy = 6;
  if (this->vy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->vy(), output);
  }

  // float ax = 7;
  if (this->ax() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->ax(), output);
  }

  // float ay = 8;
  if (this->ay() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->ay(), output);
  }

  // uint32 detect_quality = 9;
  if (this->detect_quality() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->detect_quality(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:goldo.rplidar.RobotDetection)
}

::google::protobuf::uint8* RobotDetection::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:goldo.rplidar.RobotDetection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 timestamp_ms = 1;
  if (this->timestamp_ms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->timestamp_ms(), target);
  }

  // uint32 id = 2;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  // float x = 3;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->x(), target);
  }

  // float y = 4;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->y(), target);
  }

  // float vx = 5;
  if (this->vx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->vx(), target);
  }

  // float vy = 6;
  if (this->vy() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->vy(), target);
  }

  // float ax = 7;
  if (this->ax() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->ax(), target);
  }

  // float ay = 8;
  if (this->ay() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->ay(), target);
  }

  // uint32 detect_quality = 9;
  if (this->detect_quality() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->detect_quality(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:goldo.rplidar.RobotDetection)
  return target;
}

size_t RobotDetection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:goldo.rplidar.RobotDetection)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 timestamp_ms = 1;
  if (this->timestamp_ms() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->timestamp_ms());
  }

  // uint32 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  // float x = 3;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // float y = 4;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  // float vx = 5;
  if (this->vx() != 0) {
    total_size += 1 + 4;
  }

  // float vy = 6;
  if (this->vy() != 0) {
    total_size += 1 + 4;
  }

  // float ax = 7;
  if (this->ax() != 0) {
    total_size += 1 + 4;
  }

  // float ay = 8;
  if (this->ay() != 0) {
    total_size += 1 + 4;
  }

  // uint32 detect_quality = 9;
  if (this->detect_quality() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->detect_quality());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RobotDetection::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:goldo.rplidar.RobotDetection)
  GOOGLE_DCHECK_NE(&from, this);
  const RobotDetection* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RobotDetection>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:goldo.rplidar.RobotDetection)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:goldo.rplidar.RobotDetection)
    MergeFrom(*source);
  }
}

void RobotDetection::MergeFrom(const RobotDetection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:goldo.rplidar.RobotDetection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.timestamp_ms() != 0) {
    set_timestamp_ms(from.timestamp_ms());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.vx() != 0) {
    set_vx(from.vx());
  }
  if (from.vy() != 0) {
    set_vy(from.vy());
  }
  if (from.ax() != 0) {
    set_ax(from.ax());
  }
  if (from.ay() != 0) {
    set_ay(from.ay());
  }
  if (from.detect_quality() != 0) {
    set_detect_quality(from.detect_quality());
  }
}

void RobotDetection::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:goldo.rplidar.RobotDetection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RobotDetection::CopyFrom(const RobotDetection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:goldo.rplidar.RobotDetection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotDetection::IsInitialized() const {
  return true;
}

void RobotDetection::Swap(RobotDetection* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RobotDetection::InternalSwap(RobotDetection* other) {
  using std::swap;
  swap(timestamp_ms_, other->timestamp_ms_);
  swap(id_, other->id_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(vx_, other->vx_);
  swap(vy_, other->vy_);
  swap(ax_, other->ax_);
  swap(ay_, other->ay_);
  swap(detect_quality_, other->detect_quality_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RobotDetection::GetMetadata() const {
  protobuf_goldo_2frplidar_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2frplidar_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace rplidar
}  // namespace goldo
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::goldo::rplidar::Zones* Arena::CreateMaybeMessage< ::goldo::rplidar::Zones >(Arena* arena) {
  return Arena::CreateInternal< ::goldo::rplidar::Zones >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::goldo::rplidar::Tresholds* Arena::CreateMaybeMessage< ::goldo::rplidar::Tresholds >(Arena* arena) {
  return Arena::CreateInternal< ::goldo::rplidar::Tresholds >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::goldo::rplidar::RPLidarConfig* Arena::CreateMaybeMessage< ::goldo::rplidar::RPLidarConfig >(Arena* arena) {
  return Arena::CreateInternal< ::goldo::rplidar::RPLidarConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::goldo::rplidar::RobotDetection* Arena::CreateMaybeMessage< ::goldo::rplidar::RobotDetection >(Arena* arena) {
  return Arena::CreateInternal< ::goldo::rplidar::RobotDetection >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
