// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: goldo/rplidar.proto

#ifndef PROTOBUF_INCLUDED_goldo_2frplidar_2eproto
#define PROTOBUF_INCLUDED_goldo_2frplidar_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_goldo_2frplidar_2eproto 

namespace protobuf_goldo_2frplidar_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_goldo_2frplidar_2eproto
namespace goldo {
namespace rplidar {
class RPLidarConfig;
class RPLidarConfigDefaultTypeInternal;
extern RPLidarConfigDefaultTypeInternal _RPLidarConfig_default_instance_;
class RobotDetection;
class RobotDetectionDefaultTypeInternal;
extern RobotDetectionDefaultTypeInternal _RobotDetection_default_instance_;
class Tresholds;
class TresholdsDefaultTypeInternal;
extern TresholdsDefaultTypeInternal _Tresholds_default_instance_;
class Zones;
class ZonesDefaultTypeInternal;
extern ZonesDefaultTypeInternal _Zones_default_instance_;
}  // namespace rplidar
}  // namespace goldo
namespace google {
namespace protobuf {
template<> ::goldo::rplidar::RPLidarConfig* Arena::CreateMaybeMessage<::goldo::rplidar::RPLidarConfig>(Arena*);
template<> ::goldo::rplidar::RobotDetection* Arena::CreateMaybeMessage<::goldo::rplidar::RobotDetection>(Arena*);
template<> ::goldo::rplidar::Tresholds* Arena::CreateMaybeMessage<::goldo::rplidar::Tresholds>(Arena*);
template<> ::goldo::rplidar::Zones* Arena::CreateMaybeMessage<::goldo::rplidar::Zones>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace goldo {
namespace rplidar {

// ===================================================================

class Zones : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:goldo.rplidar.Zones) */ {
 public:
  Zones();
  virtual ~Zones();

  Zones(const Zones& from);

  inline Zones& operator=(const Zones& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Zones(Zones&& from) noexcept
    : Zones() {
    *this = ::std::move(from);
  }

  inline Zones& operator=(Zones&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Zones& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Zones* internal_default_instance() {
    return reinterpret_cast<const Zones*>(
               &_Zones_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Zones* other);
  friend void swap(Zones& a, Zones& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Zones* New() const final {
    return CreateMaybeMessage<Zones>(NULL);
  }

  Zones* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Zones>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Zones& from);
  void MergeFrom(const Zones& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Zones* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool front_near = 1;
  void clear_front_near();
  static const int kFrontNearFieldNumber = 1;
  bool front_near() const;
  void set_front_near(bool value);

  // bool right_near = 2;
  void clear_right_near();
  static const int kRightNearFieldNumber = 2;
  bool right_near() const;
  void set_right_near(bool value);

  // bool back_near = 3;
  void clear_back_near();
  static const int kBackNearFieldNumber = 3;
  bool back_near() const;
  void set_back_near(bool value);

  // bool left_near = 4;
  void clear_left_near();
  static const int kLeftNearFieldNumber = 4;
  bool left_near() const;
  void set_left_near(bool value);

  // bool front_far = 5;
  void clear_front_far();
  static const int kFrontFarFieldNumber = 5;
  bool front_far() const;
  void set_front_far(bool value);

  // bool right_far = 6;
  void clear_right_far();
  static const int kRightFarFieldNumber = 6;
  bool right_far() const;
  void set_right_far(bool value);

  // bool back_far = 7;
  void clear_back_far();
  static const int kBackFarFieldNumber = 7;
  bool back_far() const;
  void set_back_far(bool value);

  // bool left_far = 8;
  void clear_left_far();
  static const int kLeftFarFieldNumber = 8;
  bool left_far() const;
  void set_left_far(bool value);

  // @@protoc_insertion_point(class_scope:goldo.rplidar.Zones)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool front_near_;
  bool right_near_;
  bool back_near_;
  bool left_near_;
  bool front_far_;
  bool right_far_;
  bool back_far_;
  bool left_far_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_goldo_2frplidar_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Tresholds : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:goldo.rplidar.Tresholds) */ {
 public:
  Tresholds();
  virtual ~Tresholds();

  Tresholds(const Tresholds& from);

  inline Tresholds& operator=(const Tresholds& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Tresholds(Tresholds&& from) noexcept
    : Tresholds() {
    *this = ::std::move(from);
  }

  inline Tresholds& operator=(Tresholds&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Tresholds& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Tresholds* internal_default_instance() {
    return reinterpret_cast<const Tresholds*>(
               &_Tresholds_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Tresholds* other);
  friend void swap(Tresholds& a, Tresholds& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Tresholds* New() const final {
    return CreateMaybeMessage<Tresholds>(NULL);
  }

  Tresholds* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Tresholds>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Tresholds& from);
  void MergeFrom(const Tresholds& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Tresholds* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float near = 1;
  void clear_near();
  static const int kNearFieldNumber = 1;
  float near() const;
  void set_near(float value);

  // float mid = 2;
  void clear_mid();
  static const int kMidFieldNumber = 2;
  float mid() const;
  void set_mid(float value);

  // float far = 3;
  void clear_far();
  static const int kFarFieldNumber = 3;
  float far() const;
  void set_far(float value);

  // @@protoc_insertion_point(class_scope:goldo.rplidar.Tresholds)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float near_;
  float mid_;
  float far_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_goldo_2frplidar_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RPLidarConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:goldo.rplidar.RPLidarConfig) */ {
 public:
  RPLidarConfig();
  virtual ~RPLidarConfig();

  RPLidarConfig(const RPLidarConfig& from);

  inline RPLidarConfig& operator=(const RPLidarConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RPLidarConfig(RPLidarConfig&& from) noexcept
    : RPLidarConfig() {
    *this = ::std::move(from);
  }

  inline RPLidarConfig& operator=(RPLidarConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RPLidarConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RPLidarConfig* internal_default_instance() {
    return reinterpret_cast<const RPLidarConfig*>(
               &_RPLidarConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(RPLidarConfig* other);
  friend void swap(RPLidarConfig& a, RPLidarConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RPLidarConfig* New() const final {
    return CreateMaybeMessage<RPLidarConfig>(NULL);
  }

  RPLidarConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RPLidarConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RPLidarConfig& from);
  void MergeFrom(const RPLidarConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RPLidarConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .goldo.rplidar.Tresholds tresholds = 2;
  bool has_tresholds() const;
  void clear_tresholds();
  static const int kTresholdsFieldNumber = 2;
  private:
  const ::goldo::rplidar::Tresholds& _internal_tresholds() const;
  public:
  const ::goldo::rplidar::Tresholds& tresholds() const;
  ::goldo::rplidar::Tresholds* release_tresholds();
  ::goldo::rplidar::Tresholds* mutable_tresholds();
  void set_allocated_tresholds(::goldo::rplidar::Tresholds* tresholds);

  // float theta_offset = 1;
  void clear_theta_offset();
  static const int kThetaOffsetFieldNumber = 1;
  float theta_offset() const;
  void set_theta_offset(float value);

  // @@protoc_insertion_point(class_scope:goldo.rplidar.RPLidarConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::goldo::rplidar::Tresholds* tresholds_;
  float theta_offset_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_goldo_2frplidar_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RobotDetection : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:goldo.rplidar.RobotDetection) */ {
 public:
  RobotDetection();
  virtual ~RobotDetection();

  RobotDetection(const RobotDetection& from);

  inline RobotDetection& operator=(const RobotDetection& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RobotDetection(RobotDetection&& from) noexcept
    : RobotDetection() {
    *this = ::std::move(from);
  }

  inline RobotDetection& operator=(RobotDetection&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RobotDetection& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RobotDetection* internal_default_instance() {
    return reinterpret_cast<const RobotDetection*>(
               &_RobotDetection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(RobotDetection* other);
  friend void swap(RobotDetection& a, RobotDetection& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RobotDetection* New() const final {
    return CreateMaybeMessage<RobotDetection>(NULL);
  }

  RobotDetection* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RobotDetection>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RobotDetection& from);
  void MergeFrom(const RobotDetection& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RobotDetection* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 timestamp_ms = 1;
  void clear_timestamp_ms();
  static const int kTimestampMsFieldNumber = 1;
  ::google::protobuf::uint32 timestamp_ms() const;
  void set_timestamp_ms(::google::protobuf::uint32 value);

  // uint32 id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // float x = 3;
  void clear_x();
  static const int kXFieldNumber = 3;
  float x() const;
  void set_x(float value);

  // float y = 4;
  void clear_y();
  static const int kYFieldNumber = 4;
  float y() const;
  void set_y(float value);

  // float vx = 5;
  void clear_vx();
  static const int kVxFieldNumber = 5;
  float vx() const;
  void set_vx(float value);

  // float vy = 6;
  void clear_vy();
  static const int kVyFieldNumber = 6;
  float vy() const;
  void set_vy(float value);

  // float ax = 7;
  void clear_ax();
  static const int kAxFieldNumber = 7;
  float ax() const;
  void set_ax(float value);

  // float ay = 8;
  void clear_ay();
  static const int kAyFieldNumber = 8;
  float ay() const;
  void set_ay(float value);

  // uint32 detect_quality = 9;
  void clear_detect_quality();
  static const int kDetectQualityFieldNumber = 9;
  ::google::protobuf::uint32 detect_quality() const;
  void set_detect_quality(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:goldo.rplidar.RobotDetection)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 timestamp_ms_;
  ::google::protobuf::uint32 id_;
  float x_;
  float y_;
  float vx_;
  float vy_;
  float ax_;
  float ay_;
  ::google::protobuf::uint32 detect_quality_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_goldo_2frplidar_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Zones

// bool front_near = 1;
inline void Zones::clear_front_near() {
  front_near_ = false;
}
inline bool Zones::front_near() const {
  // @@protoc_insertion_point(field_get:goldo.rplidar.Zones.front_near)
  return front_near_;
}
inline void Zones::set_front_near(bool value) {
  
  front_near_ = value;
  // @@protoc_insertion_point(field_set:goldo.rplidar.Zones.front_near)
}

// bool right_near = 2;
inline void Zones::clear_right_near() {
  right_near_ = false;
}
inline bool Zones::right_near() const {
  // @@protoc_insertion_point(field_get:goldo.rplidar.Zones.right_near)
  return right_near_;
}
inline void Zones::set_right_near(bool value) {
  
  right_near_ = value;
  // @@protoc_insertion_point(field_set:goldo.rplidar.Zones.right_near)
}

// bool back_near = 3;
inline void Zones::clear_back_near() {
  back_near_ = false;
}
inline bool Zones::back_near() const {
  // @@protoc_insertion_point(field_get:goldo.rplidar.Zones.back_near)
  return back_near_;
}
inline void Zones::set_back_near(bool value) {
  
  back_near_ = value;
  // @@protoc_insertion_point(field_set:goldo.rplidar.Zones.back_near)
}

// bool left_near = 4;
inline void Zones::clear_left_near() {
  left_near_ = false;
}
inline bool Zones::left_near() const {
  // @@protoc_insertion_point(field_get:goldo.rplidar.Zones.left_near)
  return left_near_;
}
inline void Zones::set_left_near(bool value) {
  
  left_near_ = value;
  // @@protoc_insertion_point(field_set:goldo.rplidar.Zones.left_near)
}

// bool front_far = 5;
inline void Zones::clear_front_far() {
  front_far_ = false;
}
inline bool Zones::front_far() const {
  // @@protoc_insertion_point(field_get:goldo.rplidar.Zones.front_far)
  return front_far_;
}
inline void Zones::set_front_far(bool value) {
  
  front_far_ = value;
  // @@protoc_insertion_point(field_set:goldo.rplidar.Zones.front_far)
}

// bool right_far = 6;
inline void Zones::clear_right_far() {
  right_far_ = false;
}
inline bool Zones::right_far() const {
  // @@protoc_insertion_point(field_get:goldo.rplidar.Zones.right_far)
  return right_far_;
}
inline void Zones::set_right_far(bool value) {
  
  right_far_ = value;
  // @@protoc_insertion_point(field_set:goldo.rplidar.Zones.right_far)
}

// bool back_far = 7;
inline void Zones::clear_back_far() {
  back_far_ = false;
}
inline bool Zones::back_far() const {
  // @@protoc_insertion_point(field_get:goldo.rplidar.Zones.back_far)
  return back_far_;
}
inline void Zones::set_back_far(bool value) {
  
  back_far_ = value;
  // @@protoc_insertion_point(field_set:goldo.rplidar.Zones.back_far)
}

// bool left_far = 8;
inline void Zones::clear_left_far() {
  left_far_ = false;
}
inline bool Zones::left_far() const {
  // @@protoc_insertion_point(field_get:goldo.rplidar.Zones.left_far)
  return left_far_;
}
inline void Zones::set_left_far(bool value) {
  
  left_far_ = value;
  // @@protoc_insertion_point(field_set:goldo.rplidar.Zones.left_far)
}

// -------------------------------------------------------------------

// Tresholds

// float near = 1;
inline void Tresholds::clear_near() {
  near_ = 0;
}
inline float Tresholds::near() const {
  // @@protoc_insertion_point(field_get:goldo.rplidar.Tresholds.near)
  return near_;
}
inline void Tresholds::set_near(float value) {
  
  near_ = value;
  // @@protoc_insertion_point(field_set:goldo.rplidar.Tresholds.near)
}

// float mid = 2;
inline void Tresholds::clear_mid() {
  mid_ = 0;
}
inline float Tresholds::mid() const {
  // @@protoc_insertion_point(field_get:goldo.rplidar.Tresholds.mid)
  return mid_;
}
inline void Tresholds::set_mid(float value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:goldo.rplidar.Tresholds.mid)
}

// float far = 3;
inline void Tresholds::clear_far() {
  far_ = 0;
}
inline float Tresholds::far() const {
  // @@protoc_insertion_point(field_get:goldo.rplidar.Tresholds.far)
  return far_;
}
inline void Tresholds::set_far(float value) {
  
  far_ = value;
  // @@protoc_insertion_point(field_set:goldo.rplidar.Tresholds.far)
}

// -------------------------------------------------------------------

// RPLidarConfig

// float theta_offset = 1;
inline void RPLidarConfig::clear_theta_offset() {
  theta_offset_ = 0;
}
inline float RPLidarConfig::theta_offset() const {
  // @@protoc_insertion_point(field_get:goldo.rplidar.RPLidarConfig.theta_offset)
  return theta_offset_;
}
inline void RPLidarConfig::set_theta_offset(float value) {
  
  theta_offset_ = value;
  // @@protoc_insertion_point(field_set:goldo.rplidar.RPLidarConfig.theta_offset)
}

// .goldo.rplidar.Tresholds tresholds = 2;
inline bool RPLidarConfig::has_tresholds() const {
  return this != internal_default_instance() && tresholds_ != NULL;
}
inline void RPLidarConfig::clear_tresholds() {
  if (GetArenaNoVirtual() == NULL && tresholds_ != NULL) {
    delete tresholds_;
  }
  tresholds_ = NULL;
}
inline const ::goldo::rplidar::Tresholds& RPLidarConfig::_internal_tresholds() const {
  return *tresholds_;
}
inline const ::goldo::rplidar::Tresholds& RPLidarConfig::tresholds() const {
  const ::goldo::rplidar::Tresholds* p = tresholds_;
  // @@protoc_insertion_point(field_get:goldo.rplidar.RPLidarConfig.tresholds)
  return p != NULL ? *p : *reinterpret_cast<const ::goldo::rplidar::Tresholds*>(
      &::goldo::rplidar::_Tresholds_default_instance_);
}
inline ::goldo::rplidar::Tresholds* RPLidarConfig::release_tresholds() {
  // @@protoc_insertion_point(field_release:goldo.rplidar.RPLidarConfig.tresholds)
  
  ::goldo::rplidar::Tresholds* temp = tresholds_;
  tresholds_ = NULL;
  return temp;
}
inline ::goldo::rplidar::Tresholds* RPLidarConfig::mutable_tresholds() {
  
  if (tresholds_ == NULL) {
    auto* p = CreateMaybeMessage<::goldo::rplidar::Tresholds>(GetArenaNoVirtual());
    tresholds_ = p;
  }
  // @@protoc_insertion_point(field_mutable:goldo.rplidar.RPLidarConfig.tresholds)
  return tresholds_;
}
inline void RPLidarConfig::set_allocated_tresholds(::goldo::rplidar::Tresholds* tresholds) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete tresholds_;
  }
  if (tresholds) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tresholds = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tresholds, submessage_arena);
    }
    
  } else {
    
  }
  tresholds_ = tresholds;
  // @@protoc_insertion_point(field_set_allocated:goldo.rplidar.RPLidarConfig.tresholds)
}

// -------------------------------------------------------------------

// RobotDetection

// uint32 timestamp_ms = 1;
inline void RobotDetection::clear_timestamp_ms() {
  timestamp_ms_ = 0u;
}
inline ::google::protobuf::uint32 RobotDetection::timestamp_ms() const {
  // @@protoc_insertion_point(field_get:goldo.rplidar.RobotDetection.timestamp_ms)
  return timestamp_ms_;
}
inline void RobotDetection::set_timestamp_ms(::google::protobuf::uint32 value) {
  
  timestamp_ms_ = value;
  // @@protoc_insertion_point(field_set:goldo.rplidar.RobotDetection.timestamp_ms)
}

// uint32 id = 2;
inline void RobotDetection::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 RobotDetection::id() const {
  // @@protoc_insertion_point(field_get:goldo.rplidar.RobotDetection.id)
  return id_;
}
inline void RobotDetection::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:goldo.rplidar.RobotDetection.id)
}

// float x = 3;
inline void RobotDetection::clear_x() {
  x_ = 0;
}
inline float RobotDetection::x() const {
  // @@protoc_insertion_point(field_get:goldo.rplidar.RobotDetection.x)
  return x_;
}
inline void RobotDetection::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:goldo.rplidar.RobotDetection.x)
}

// float y = 4;
inline void RobotDetection::clear_y() {
  y_ = 0;
}
inline float RobotDetection::y() const {
  // @@protoc_insertion_point(field_get:goldo.rplidar.RobotDetection.y)
  return y_;
}
inline void RobotDetection::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:goldo.rplidar.RobotDetection.y)
}

// float vx = 5;
inline void RobotDetection::clear_vx() {
  vx_ = 0;
}
inline float RobotDetection::vx() const {
  // @@protoc_insertion_point(field_get:goldo.rplidar.RobotDetection.vx)
  return vx_;
}
inline void RobotDetection::set_vx(float value) {
  
  vx_ = value;
  // @@protoc_insertion_point(field_set:goldo.rplidar.RobotDetection.vx)
}

// float vy = 6;
inline void RobotDetection::clear_vy() {
  vy_ = 0;
}
inline float RobotDetection::vy() const {
  // @@protoc_insertion_point(field_get:goldo.rplidar.RobotDetection.vy)
  return vy_;
}
inline void RobotDetection::set_vy(float value) {
  
  vy_ = value;
  // @@protoc_insertion_point(field_set:goldo.rplidar.RobotDetection.vy)
}

// float ax = 7;
inline void RobotDetection::clear_ax() {
  ax_ = 0;
}
inline float RobotDetection::ax() const {
  // @@protoc_insertion_point(field_get:goldo.rplidar.RobotDetection.ax)
  return ax_;
}
inline void RobotDetection::set_ax(float value) {
  
  ax_ = value;
  // @@protoc_insertion_point(field_set:goldo.rplidar.RobotDetection.ax)
}

// float ay = 8;
inline void RobotDetection::clear_ay() {
  ay_ = 0;
}
inline float RobotDetection::ay() const {
  // @@protoc_insertion_point(field_get:goldo.rplidar.RobotDetection.ay)
  return ay_;
}
inline void RobotDetection::set_ay(float value) {
  
  ay_ = value;
  // @@protoc_insertion_point(field_set:goldo.rplidar.RobotDetection.ay)
}

// uint32 detect_quality = 9;
inline void RobotDetection::clear_detect_quality() {
  detect_quality_ = 0u;
}
inline ::google::protobuf::uint32 RobotDetection::detect_quality() const {
  // @@protoc_insertion_point(field_get:goldo.rplidar.RobotDetection.detect_quality)
  return detect_quality_;
}
inline void RobotDetection::set_detect_quality(::google::protobuf::uint32 value) {
  
  detect_quality_ = value;
  // @@protoc_insertion_point(field_set:goldo.rplidar.RobotDetection.detect_quality)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace rplidar
}  // namespace goldo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_goldo_2frplidar_2eproto
