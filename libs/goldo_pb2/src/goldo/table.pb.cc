// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: goldo/table.proto

#include "goldo/table.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_goldo_2fcommon_2fgeometry_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_goldo_2fcommon_2fgeometry_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Point;
}  // namespace protobuf_goldo_2fcommon_2fgeometry_2eproto
namespace protobuf_goldo_2ftable_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_goldo_2ftable_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CupState;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_goldo_2ftable_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ReefState;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_goldo_2ftable_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_TableState_ReefsEntry_DoNotUse;
}  // namespace protobuf_goldo_2ftable_2eproto
namespace goldo {
namespace table {
class CupStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CupState>
      _instance;
} _CupState_default_instance_;
class ReefStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReefState>
      _instance;
} _ReefState_default_instance_;
class TableState_ReefsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TableState_ReefsEntry_DoNotUse>
      _instance;
} _TableState_ReefsEntry_DoNotUse_default_instance_;
class TableStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TableState>
      _instance;
} _TableState_default_instance_;
}  // namespace table
}  // namespace goldo
namespace protobuf_goldo_2ftable_2eproto {
static void InitDefaultsCupState() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::goldo::table::_CupState_default_instance_;
    new (ptr) ::goldo::table::CupState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::goldo::table::CupState::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CupState =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCupState}, {
      &protobuf_goldo_2fcommon_2fgeometry_2eproto::scc_info_Point.base,}};

static void InitDefaultsReefState() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::goldo::table::_ReefState_default_instance_;
    new (ptr) ::goldo::table::ReefState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::goldo::table::ReefState::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ReefState =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsReefState}, {
      &protobuf_goldo_2ftable_2eproto::scc_info_CupState.base,}};

static void InitDefaultsTableState_ReefsEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::goldo::table::_TableState_ReefsEntry_DoNotUse_default_instance_;
    new (ptr) ::goldo::table::TableState_ReefsEntry_DoNotUse();
  }
  ::goldo::table::TableState_ReefsEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TableState_ReefsEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTableState_ReefsEntry_DoNotUse}, {
      &protobuf_goldo_2ftable_2eproto::scc_info_ReefState.base,}};

static void InitDefaultsTableState() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::goldo::table::_TableState_default_instance_;
    new (ptr) ::goldo::table::TableState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::goldo::table::TableState::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_TableState =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsTableState}, {
      &protobuf_goldo_2ftable_2eproto::scc_info_TableState_ReefsEntry_DoNotUse.base,
      &protobuf_goldo_2ftable_2eproto::scc_info_CupState.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_CupState.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReefState.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TableState_ReefsEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TableState.base);
}

::google::protobuf::Metadata file_level_metadata[4];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[4];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::table::CupState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::table::CupState, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::table::CupState, orientation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::table::CupState, position_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::table::ReefState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::table::ReefState, cups_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::table::TableState_ReefsEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::table::TableState_ReefsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::table::TableState_ReefsEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::table::TableState_ReefsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::table::TableState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::table::TableState, reefs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::table::TableState, cups_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::table::TableState, compas_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::goldo::table::CupState)},
  { 8, -1, sizeof(::goldo::table::ReefState)},
  { 14, 21, sizeof(::goldo::table::TableState_ReefsEntry_DoNotUse)},
  { 23, -1, sizeof(::goldo::table::TableState)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::goldo::table::_CupState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::goldo::table::_ReefState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::goldo::table::_TableState_ReefsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::goldo::table::_TableState_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "goldo/table.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\021goldo/table.proto\022\013goldo.table\032\033goldo/"
      "common/geometry.proto\"\220\001\n\010CupState\022\"\n\004ty"
      "pe\030\001 \001(\0162\024.goldo.table.CupType\0220\n\013orient"
      "ation\030\002 \001(\0162\033.goldo.table.CupOrientation"
      "\022.\n\010position\030\003 \001(\0132\034.goldo.common.geomet"
      "ry.Point\"0\n\tReefState\022#\n\004cups\030\001 \003(\0132\025.go"
      "ldo.table.CupState\"\325\001\n\nTableState\0221\n\005ree"
      "fs\030\001 \003(\0132\".goldo.table.TableState.ReefsE"
      "ntry\022#\n\004cups\030\002 \001(\0132\025.goldo.table.CupStat"
      "e\022)\n\006compas\030\003 \001(\0162\031.goldo.table.CompassS"
      "tate\032D\n\nReefsEntry\022\013\n\003key\030\001 \001(\t\022%\n\005value"
      "\030\002 \001(\0132\026.goldo.table.ReefState:\0028\001*F\n\007Cu"
      "pType\022\025\n\021CUP_TYPE__UNKNOWN\020\000\022\022\n\016CUP_TYPE"
      "_GREEN\020\001\022\020\n\014CUP_TYPE_RED\020\002*i\n\016CupOrienta"
      "tion\022\033\n\027CUP_ORIENTATION_UNKNOWN\020\000\022\034\n\030CUP"
      "_ORIENTATION_STANDING\020\001\022\034\n\030CUP_ORIENTATI"
      "ON_UPTURNED\020\002*I\n\rWindsockState\022\024\n\020WINDSO"
      "CK_UNKNOWN\020\000\022\017\n\013WINDSOCK_UP\020\001\022\021\n\rWINDSOC"
      "K_DOWN\020\002*I\n\014CompassState\022\023\n\017COMPASS_UNKN"
      "OWN\020\000\022\021\n\rCOMPASS_NORTH\020\001\022\021\n\rCOMPASS_SOUT"
      "H\020\002b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 811);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "goldo/table.proto", &protobuf_RegisterTypes);
  ::protobuf_goldo_2fcommon_2fgeometry_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_goldo_2ftable_2eproto
namespace goldo {
namespace table {
const ::google::protobuf::EnumDescriptor* CupType_descriptor() {
  protobuf_goldo_2ftable_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_goldo_2ftable_2eproto::file_level_enum_descriptors[0];
}
bool CupType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CupOrientation_descriptor() {
  protobuf_goldo_2ftable_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_goldo_2ftable_2eproto::file_level_enum_descriptors[1];
}
bool CupOrientation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* WindsockState_descriptor() {
  protobuf_goldo_2ftable_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_goldo_2ftable_2eproto::file_level_enum_descriptors[2];
}
bool WindsockState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CompassState_descriptor() {
  protobuf_goldo_2ftable_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_goldo_2ftable_2eproto::file_level_enum_descriptors[3];
}
bool CompassState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void CupState::InitAsDefaultInstance() {
  ::goldo::table::_CupState_default_instance_._instance.get_mutable()->position_ = const_cast< ::goldo::common::geometry::Point*>(
      ::goldo::common::geometry::Point::internal_default_instance());
}
void CupState::clear_position() {
  if (GetArenaNoVirtual() == NULL && position_ != NULL) {
    delete position_;
  }
  position_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CupState::kTypeFieldNumber;
const int CupState::kOrientationFieldNumber;
const int CupState::kPositionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CupState::CupState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_goldo_2ftable_2eproto::scc_info_CupState.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:goldo.table.CupState)
}
CupState::CupState(const CupState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_position()) {
    position_ = new ::goldo::common::geometry::Point(*from.position_);
  } else {
    position_ = NULL;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&orientation_) -
    reinterpret_cast<char*>(&type_)) + sizeof(orientation_));
  // @@protoc_insertion_point(copy_constructor:goldo.table.CupState)
}

void CupState::SharedCtor() {
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&orientation_) -
      reinterpret_cast<char*>(&position_)) + sizeof(orientation_));
}

CupState::~CupState() {
  // @@protoc_insertion_point(destructor:goldo.table.CupState)
  SharedDtor();
}

void CupState::SharedDtor() {
  if (this != internal_default_instance()) delete position_;
}

void CupState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CupState::descriptor() {
  ::protobuf_goldo_2ftable_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2ftable_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CupState& CupState::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_goldo_2ftable_2eproto::scc_info_CupState.base);
  return *internal_default_instance();
}


void CupState::Clear() {
// @@protoc_insertion_point(message_clear_start:goldo.table.CupState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && position_ != NULL) {
    delete position_;
  }
  position_ = NULL;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&orientation_) -
      reinterpret_cast<char*>(&type_)) + sizeof(orientation_));
  _internal_metadata_.Clear();
}

bool CupState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:goldo.table.CupState)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .goldo.table.CupType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::goldo::table::CupType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .goldo.table.CupOrientation orientation = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_orientation(static_cast< ::goldo::table::CupOrientation >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .goldo.common.geometry.Point position = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:goldo.table.CupState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:goldo.table.CupState)
  return false;
#undef DO_
}

void CupState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:goldo.table.CupState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .goldo.table.CupType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // .goldo.table.CupOrientation orientation = 2;
  if (this->orientation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->orientation(), output);
  }

  // .goldo.common.geometry.Point position = 3;
  if (this->has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_position(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:goldo.table.CupState)
}

::google::protobuf::uint8* CupState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:goldo.table.CupState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .goldo.table.CupType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // .goldo.table.CupOrientation orientation = 2;
  if (this->orientation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->orientation(), target);
  }

  // .goldo.common.geometry.Point position = 3;
  if (this->has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_position(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:goldo.table.CupState)
  return target;
}

size_t CupState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:goldo.table.CupState)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .goldo.common.geometry.Point position = 3;
  if (this->has_position()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // .goldo.table.CupType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // .goldo.table.CupOrientation orientation = 2;
  if (this->orientation() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->orientation());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CupState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:goldo.table.CupState)
  GOOGLE_DCHECK_NE(&from, this);
  const CupState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CupState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:goldo.table.CupState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:goldo.table.CupState)
    MergeFrom(*source);
  }
}

void CupState::MergeFrom(const CupState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:goldo.table.CupState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_position()) {
    mutable_position()->::goldo::common::geometry::Point::MergeFrom(from.position());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.orientation() != 0) {
    set_orientation(from.orientation());
  }
}

void CupState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:goldo.table.CupState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CupState::CopyFrom(const CupState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:goldo.table.CupState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CupState::IsInitialized() const {
  return true;
}

void CupState::Swap(CupState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CupState::InternalSwap(CupState* other) {
  using std::swap;
  swap(position_, other->position_);
  swap(type_, other->type_);
  swap(orientation_, other->orientation_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CupState::GetMetadata() const {
  protobuf_goldo_2ftable_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2ftable_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReefState::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReefState::kCupsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReefState::ReefState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_goldo_2ftable_2eproto::scc_info_ReefState.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:goldo.table.ReefState)
}
ReefState::ReefState(const ReefState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      cups_(from.cups_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:goldo.table.ReefState)
}

void ReefState::SharedCtor() {
}

ReefState::~ReefState() {
  // @@protoc_insertion_point(destructor:goldo.table.ReefState)
  SharedDtor();
}

void ReefState::SharedDtor() {
}

void ReefState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReefState::descriptor() {
  ::protobuf_goldo_2ftable_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2ftable_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReefState& ReefState::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_goldo_2ftable_2eproto::scc_info_ReefState.base);
  return *internal_default_instance();
}


void ReefState::Clear() {
// @@protoc_insertion_point(message_clear_start:goldo.table.ReefState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cups_.Clear();
  _internal_metadata_.Clear();
}

bool ReefState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:goldo.table.ReefState)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .goldo.table.CupState cups = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_cups()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:goldo.table.ReefState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:goldo.table.ReefState)
  return false;
#undef DO_
}

void ReefState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:goldo.table.ReefState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .goldo.table.CupState cups = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cups_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->cups(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:goldo.table.ReefState)
}

::google::protobuf::uint8* ReefState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:goldo.table.ReefState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .goldo.table.CupState cups = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cups_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->cups(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:goldo.table.ReefState)
  return target;
}

size_t ReefState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:goldo.table.ReefState)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .goldo.table.CupState cups = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->cups_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->cups(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReefState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:goldo.table.ReefState)
  GOOGLE_DCHECK_NE(&from, this);
  const ReefState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReefState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:goldo.table.ReefState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:goldo.table.ReefState)
    MergeFrom(*source);
  }
}

void ReefState::MergeFrom(const ReefState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:goldo.table.ReefState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cups_.MergeFrom(from.cups_);
}

void ReefState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:goldo.table.ReefState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReefState::CopyFrom(const ReefState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:goldo.table.ReefState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReefState::IsInitialized() const {
  return true;
}

void ReefState::Swap(ReefState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReefState::InternalSwap(ReefState* other) {
  using std::swap;
  CastToBase(&cups_)->InternalSwap(CastToBase(&other->cups_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReefState::GetMetadata() const {
  protobuf_goldo_2ftable_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2ftable_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

TableState_ReefsEntry_DoNotUse::TableState_ReefsEntry_DoNotUse() {}
TableState_ReefsEntry_DoNotUse::TableState_ReefsEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void TableState_ReefsEntry_DoNotUse::MergeFrom(const TableState_ReefsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata TableState_ReefsEntry_DoNotUse::GetMetadata() const {
  ::protobuf_goldo_2ftable_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2ftable_2eproto::file_level_metadata[2];
}
void TableState_ReefsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void TableState::InitAsDefaultInstance() {
  ::goldo::table::_TableState_default_instance_._instance.get_mutable()->cups_ = const_cast< ::goldo::table::CupState*>(
      ::goldo::table::CupState::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TableState::kReefsFieldNumber;
const int TableState::kCupsFieldNumber;
const int TableState::kCompasFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TableState::TableState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_goldo_2ftable_2eproto::scc_info_TableState.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:goldo.table.TableState)
}
TableState::TableState(const TableState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reefs_.MergeFrom(from.reefs_);
  if (from.has_cups()) {
    cups_ = new ::goldo::table::CupState(*from.cups_);
  } else {
    cups_ = NULL;
  }
  compas_ = from.compas_;
  // @@protoc_insertion_point(copy_constructor:goldo.table.TableState)
}

void TableState::SharedCtor() {
  ::memset(&cups_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&compas_) -
      reinterpret_cast<char*>(&cups_)) + sizeof(compas_));
}

TableState::~TableState() {
  // @@protoc_insertion_point(destructor:goldo.table.TableState)
  SharedDtor();
}

void TableState::SharedDtor() {
  if (this != internal_default_instance()) delete cups_;
}

void TableState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TableState::descriptor() {
  ::protobuf_goldo_2ftable_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2ftable_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TableState& TableState::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_goldo_2ftable_2eproto::scc_info_TableState.base);
  return *internal_default_instance();
}


void TableState::Clear() {
// @@protoc_insertion_point(message_clear_start:goldo.table.TableState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reefs_.Clear();
  if (GetArenaNoVirtual() == NULL && cups_ != NULL) {
    delete cups_;
  }
  cups_ = NULL;
  compas_ = 0;
  _internal_metadata_.Clear();
}

bool TableState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:goldo.table.TableState)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, .goldo.table.ReefState> reefs = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          TableState_ReefsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              TableState_ReefsEntry_DoNotUse,
              ::std::string, ::goldo::table::ReefState,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::goldo::table::ReefState > > parser(&reefs_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "goldo.table.TableState.ReefsEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .goldo.table.CupState cups = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cups()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .goldo.table.CompassState compas = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_compas(static_cast< ::goldo::table::CompassState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:goldo.table.TableState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:goldo.table.TableState)
  return false;
#undef DO_
}

void TableState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:goldo.table.TableState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .goldo.table.ReefState> reefs = 1;
  if (!this->reefs().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::goldo::table::ReefState >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "goldo.table.TableState.ReefsEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->reefs().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->reefs().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::goldo::table::ReefState >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::goldo::table::ReefState >::const_iterator
          it = this->reefs().begin();
          it != this->reefs().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<TableState_ReefsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(reefs_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<TableState_ReefsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::goldo::table::ReefState >::const_iterator
          it = this->reefs().begin();
          it != this->reefs().end(); ++it) {
        entry.reset(reefs_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // .goldo.table.CupState cups = 2;
  if (this->has_cups()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_cups(), output);
  }

  // .goldo.table.CompassState compas = 3;
  if (this->compas() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->compas(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:goldo.table.TableState)
}

::google::protobuf::uint8* TableState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:goldo.table.TableState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .goldo.table.ReefState> reefs = 1;
  if (!this->reefs().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::goldo::table::ReefState >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "goldo.table.TableState.ReefsEntry.key");
      }
    };

    if (deterministic &&
        this->reefs().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->reefs().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::goldo::table::ReefState >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::goldo::table::ReefState >::const_iterator
          it = this->reefs().begin();
          it != this->reefs().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<TableState_ReefsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(reefs_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<TableState_ReefsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::goldo::table::ReefState >::const_iterator
          it = this->reefs().begin();
          it != this->reefs().end(); ++it) {
        entry.reset(reefs_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // .goldo.table.CupState cups = 2;
  if (this->has_cups()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_cups(), deterministic, target);
  }

  // .goldo.table.CompassState compas = 3;
  if (this->compas() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->compas(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:goldo.table.TableState)
  return target;
}

size_t TableState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:goldo.table.TableState)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<string, .goldo.table.ReefState> reefs = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->reefs_size());
  {
    ::std::unique_ptr<TableState_ReefsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::goldo::table::ReefState >::const_iterator
        it = this->reefs().begin();
        it != this->reefs().end(); ++it) {
      entry.reset(reefs_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // .goldo.table.CupState cups = 2;
  if (this->has_cups()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *cups_);
  }

  // .goldo.table.CompassState compas = 3;
  if (this->compas() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->compas());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TableState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:goldo.table.TableState)
  GOOGLE_DCHECK_NE(&from, this);
  const TableState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TableState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:goldo.table.TableState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:goldo.table.TableState)
    MergeFrom(*source);
  }
}

void TableState::MergeFrom(const TableState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:goldo.table.TableState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  reefs_.MergeFrom(from.reefs_);
  if (from.has_cups()) {
    mutable_cups()->::goldo::table::CupState::MergeFrom(from.cups());
  }
  if (from.compas() != 0) {
    set_compas(from.compas());
  }
}

void TableState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:goldo.table.TableState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableState::CopyFrom(const TableState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:goldo.table.TableState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableState::IsInitialized() const {
  return true;
}

void TableState::Swap(TableState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TableState::InternalSwap(TableState* other) {
  using std::swap;
  reefs_.Swap(&other->reefs_);
  swap(cups_, other->cups_);
  swap(compas_, other->compas_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TableState::GetMetadata() const {
  protobuf_goldo_2ftable_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2ftable_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace table
}  // namespace goldo
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::goldo::table::CupState* Arena::CreateMaybeMessage< ::goldo::table::CupState >(Arena* arena) {
  return Arena::CreateInternal< ::goldo::table::CupState >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::goldo::table::ReefState* Arena::CreateMaybeMessage< ::goldo::table::ReefState >(Arena* arena) {
  return Arena::CreateInternal< ::goldo::table::ReefState >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::goldo::table::TableState_ReefsEntry_DoNotUse* Arena::CreateMaybeMessage< ::goldo::table::TableState_ReefsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::goldo::table::TableState_ReefsEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::goldo::table::TableState* Arena::CreateMaybeMessage< ::goldo::table::TableState >(Arena* arena) {
  return Arena::CreateInternal< ::goldo::table::TableState >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
