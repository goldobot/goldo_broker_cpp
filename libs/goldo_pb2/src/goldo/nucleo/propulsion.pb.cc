// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: goldo/nucleo/propulsion.proto

#include "goldo/nucleo/propulsion.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_goldo_2fcommon_2fgeometry_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_goldo_2fcommon_2fgeometry_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Point;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_goldo_2fcommon_2fgeometry_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Pose;
}  // namespace protobuf_goldo_2fcommon_2fgeometry_2eproto
namespace protobuf_goldo_2fnucleo_2fpropulsion_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_goldo_2fnucleo_2fpropulsion_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PIDConfig;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_goldo_2fnucleo_2fpropulsion_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PropulsionLowLevelControllerConfig;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_goldo_2fnucleo_2fpropulsion_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_PropulsionLowLevelPIDConfig;
}  // namespace protobuf_goldo_2fnucleo_2fpropulsion_2eproto
namespace goldo {
namespace nucleo {
namespace propulsion {
class StateChangeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StateChange>
      _instance;
} _StateChange_default_instance_;
class PropulsionEventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PropulsionEvent>
      _instance;
} _PropulsionEvent_default_instance_;
class TelemetryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Telemetry>
      _instance;
} _Telemetry_default_instance_;
class TelemetryExDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TelemetryEx>
      _instance;
} _TelemetryEx_default_instance_;
class MotorsVelocitySetpointsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MotorsVelocitySetpoints>
      _instance;
} _MotorsVelocitySetpoints_default_instance_;
class OdometryConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OdometryConfig>
      _instance;
} _OdometryConfig_default_instance_;
class PIDConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PIDConfig>
      _instance;
} _PIDConfig_default_instance_;
class PropulsionLowLevelPIDConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PropulsionLowLevelPIDConfig>
      _instance;
} _PropulsionLowLevelPIDConfig_default_instance_;
class PropulsionLowLevelControllerConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PropulsionLowLevelControllerConfig>
      _instance;
} _PropulsionLowLevelControllerConfig_default_instance_;
class PropulsionControllerConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PropulsionControllerConfig>
      _instance;
} _PropulsionControllerConfig_default_instance_;
class PropulsionTaskConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PropulsionTaskConfig>
      _instance;
} _PropulsionTaskConfig_default_instance_;
class CommandStatusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CommandStatus>
      _instance;
} _CommandStatus_default_instance_;
class SetMotorsTorqueLimitsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SetMotorsTorqueLimits>
      _instance;
} _SetMotorsTorqueLimits_default_instance_;
class CmdEmptyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CmdEmpty>
      _instance;
} _CmdEmpty_default_instance_;
class CmdSetEnableDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CmdSetEnable>
      _instance;
} _CmdSetEnable_default_instance_;
class CmdSetAccelerationLimitsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CmdSetAccelerationLimits>
      _instance;
} _CmdSetAccelerationLimits_default_instance_;
class CmdSetPoseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CmdSetPose>
      _instance;
} _CmdSetPose_default_instance_;
class CmdTransformPoseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CmdTransformPose>
      _instance;
} _CmdTransformPose_default_instance_;
class CmdSetTargetSpeedDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CmdSetTargetSpeed>
      _instance;
} _CmdSetTargetSpeed_default_instance_;
class CmdMeasureNormalDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CmdMeasureNormal>
      _instance;
} _CmdMeasureNormal_default_instance_;
class CmdSetEventSensorsMaskDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CmdSetEventSensorsMask>
      _instance;
} _CmdSetEventSensorsMask_default_instance_;
class ExecuteTrajectoryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ExecuteTrajectory>
      _instance;
} _ExecuteTrajectory_default_instance_;
class ExecuteTranslationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ExecuteTranslation>
      _instance;
} _ExecuteTranslation_default_instance_;
class ExecuteRepositionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ExecuteReposition>
      _instance;
} _ExecuteReposition_default_instance_;
class ExecuteRotationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ExecuteRotation>
      _instance;
} _ExecuteRotation_default_instance_;
class ExecuteMoveToDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ExecuteMoveTo>
      _instance;
} _ExecuteMoveTo_default_instance_;
class ExecutePointToDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ExecutePointTo>
      _instance;
} _ExecutePointTo_default_instance_;
class ExecuteFaceDirectionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ExecuteFaceDirection>
      _instance;
} _ExecuteFaceDirection_default_instance_;
}  // namespace propulsion
}  // namespace nucleo
}  // namespace goldo
namespace protobuf_goldo_2fnucleo_2fpropulsion_2eproto {
static void InitDefaultsStateChange() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::goldo::nucleo::propulsion::_StateChange_default_instance_;
    new (ptr) ::goldo::nucleo::propulsion::StateChange();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::goldo::nucleo::propulsion::StateChange::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_StateChange =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsStateChange}, {}};

static void InitDefaultsPropulsionEvent() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::goldo::nucleo::propulsion::_PropulsionEvent_default_instance_;
    new (ptr) ::goldo::nucleo::propulsion::PropulsionEvent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::goldo::nucleo::propulsion::PropulsionEvent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PropulsionEvent =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPropulsionEvent}, {
      &protobuf_goldo_2fcommon_2fgeometry_2eproto::scc_info_Pose.base,}};

static void InitDefaultsTelemetry() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::goldo::nucleo::propulsion::_Telemetry_default_instance_;
    new (ptr) ::goldo::nucleo::propulsion::Telemetry();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::goldo::nucleo::propulsion::Telemetry::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Telemetry =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTelemetry}, {
      &protobuf_goldo_2fcommon_2fgeometry_2eproto::scc_info_Pose.base,}};

static void InitDefaultsTelemetryEx() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::goldo::nucleo::propulsion::_TelemetryEx_default_instance_;
    new (ptr) ::goldo::nucleo::propulsion::TelemetryEx();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::goldo::nucleo::propulsion::TelemetryEx::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_TelemetryEx =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsTelemetryEx}, {
      &protobuf_goldo_2fcommon_2fgeometry_2eproto::scc_info_Pose.base,
      &protobuf_goldo_2fcommon_2fgeometry_2eproto::scc_info_Point.base,}};

static void InitDefaultsMotorsVelocitySetpoints() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::goldo::nucleo::propulsion::_MotorsVelocitySetpoints_default_instance_;
    new (ptr) ::goldo::nucleo::propulsion::MotorsVelocitySetpoints();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::goldo::nucleo::propulsion::MotorsVelocitySetpoints::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MotorsVelocitySetpoints =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMotorsVelocitySetpoints}, {}};

static void InitDefaultsOdometryConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::goldo::nucleo::propulsion::_OdometryConfig_default_instance_;
    new (ptr) ::goldo::nucleo::propulsion::OdometryConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::goldo::nucleo::propulsion::OdometryConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_OdometryConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOdometryConfig}, {}};

static void InitDefaultsPIDConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::goldo::nucleo::propulsion::_PIDConfig_default_instance_;
    new (ptr) ::goldo::nucleo::propulsion::PIDConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::goldo::nucleo::propulsion::PIDConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PIDConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPIDConfig}, {}};

static void InitDefaultsPropulsionLowLevelPIDConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::goldo::nucleo::propulsion::_PropulsionLowLevelPIDConfig_default_instance_;
    new (ptr) ::goldo::nucleo::propulsion::PropulsionLowLevelPIDConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::goldo::nucleo::propulsion::PropulsionLowLevelPIDConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PropulsionLowLevelPIDConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPropulsionLowLevelPIDConfig}, {
      &protobuf_goldo_2fnucleo_2fpropulsion_2eproto::scc_info_PIDConfig.base,}};

static void InitDefaultsPropulsionLowLevelControllerConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::goldo::nucleo::propulsion::_PropulsionLowLevelControllerConfig_default_instance_;
    new (ptr) ::goldo::nucleo::propulsion::PropulsionLowLevelControllerConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::goldo::nucleo::propulsion::PropulsionLowLevelControllerConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PropulsionLowLevelControllerConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPropulsionLowLevelControllerConfig}, {}};

static void InitDefaultsPropulsionControllerConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::goldo::nucleo::propulsion::_PropulsionControllerConfig_default_instance_;
    new (ptr) ::goldo::nucleo::propulsion::PropulsionControllerConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::goldo::nucleo::propulsion::PropulsionControllerConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_PropulsionControllerConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsPropulsionControllerConfig}, {
      &protobuf_goldo_2fnucleo_2fpropulsion_2eproto::scc_info_PropulsionLowLevelControllerConfig.base,
      &protobuf_goldo_2fnucleo_2fpropulsion_2eproto::scc_info_PropulsionLowLevelPIDConfig.base,}};

static void InitDefaultsPropulsionTaskConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::goldo::nucleo::propulsion::_PropulsionTaskConfig_default_instance_;
    new (ptr) ::goldo::nucleo::propulsion::PropulsionTaskConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::goldo::nucleo::propulsion::PropulsionTaskConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PropulsionTaskConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPropulsionTaskConfig}, {}};

static void InitDefaultsCommandStatus() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::goldo::nucleo::propulsion::_CommandStatus_default_instance_;
    new (ptr) ::goldo::nucleo::propulsion::CommandStatus();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::goldo::nucleo::propulsion::CommandStatus::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CommandStatus =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCommandStatus}, {}};

static void InitDefaultsSetMotorsTorqueLimits() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::goldo::nucleo::propulsion::_SetMotorsTorqueLimits_default_instance_;
    new (ptr) ::goldo::nucleo::propulsion::SetMotorsTorqueLimits();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::goldo::nucleo::propulsion::SetMotorsTorqueLimits::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SetMotorsTorqueLimits =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSetMotorsTorqueLimits}, {}};

static void InitDefaultsCmdEmpty() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::goldo::nucleo::propulsion::_CmdEmpty_default_instance_;
    new (ptr) ::goldo::nucleo::propulsion::CmdEmpty();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::goldo::nucleo::propulsion::CmdEmpty::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CmdEmpty =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCmdEmpty}, {}};

static void InitDefaultsCmdSetEnable() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::goldo::nucleo::propulsion::_CmdSetEnable_default_instance_;
    new (ptr) ::goldo::nucleo::propulsion::CmdSetEnable();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::goldo::nucleo::propulsion::CmdSetEnable::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CmdSetEnable =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCmdSetEnable}, {}};

static void InitDefaultsCmdSetAccelerationLimits() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::goldo::nucleo::propulsion::_CmdSetAccelerationLimits_default_instance_;
    new (ptr) ::goldo::nucleo::propulsion::CmdSetAccelerationLimits();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::goldo::nucleo::propulsion::CmdSetAccelerationLimits::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CmdSetAccelerationLimits =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCmdSetAccelerationLimits}, {}};

static void InitDefaultsCmdSetPose() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::goldo::nucleo::propulsion::_CmdSetPose_default_instance_;
    new (ptr) ::goldo::nucleo::propulsion::CmdSetPose();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::goldo::nucleo::propulsion::CmdSetPose::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CmdSetPose =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCmdSetPose}, {
      &protobuf_goldo_2fcommon_2fgeometry_2eproto::scc_info_Point.base,}};

static void InitDefaultsCmdTransformPose() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::goldo::nucleo::propulsion::_CmdTransformPose_default_instance_;
    new (ptr) ::goldo::nucleo::propulsion::CmdTransformPose();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::goldo::nucleo::propulsion::CmdTransformPose::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CmdTransformPose =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCmdTransformPose}, {
      &protobuf_goldo_2fcommon_2fgeometry_2eproto::scc_info_Point.base,}};

static void InitDefaultsCmdSetTargetSpeed() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::goldo::nucleo::propulsion::_CmdSetTargetSpeed_default_instance_;
    new (ptr) ::goldo::nucleo::propulsion::CmdSetTargetSpeed();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::goldo::nucleo::propulsion::CmdSetTargetSpeed::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CmdSetTargetSpeed =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCmdSetTargetSpeed}, {}};

static void InitDefaultsCmdMeasureNormal() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::goldo::nucleo::propulsion::_CmdMeasureNormal_default_instance_;
    new (ptr) ::goldo::nucleo::propulsion::CmdMeasureNormal();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::goldo::nucleo::propulsion::CmdMeasureNormal::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CmdMeasureNormal =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCmdMeasureNormal}, {}};

static void InitDefaultsCmdSetEventSensorsMask() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::goldo::nucleo::propulsion::_CmdSetEventSensorsMask_default_instance_;
    new (ptr) ::goldo::nucleo::propulsion::CmdSetEventSensorsMask();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::goldo::nucleo::propulsion::CmdSetEventSensorsMask::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CmdSetEventSensorsMask =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCmdSetEventSensorsMask}, {}};

static void InitDefaultsExecuteTrajectory() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::goldo::nucleo::propulsion::_ExecuteTrajectory_default_instance_;
    new (ptr) ::goldo::nucleo::propulsion::ExecuteTrajectory();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::goldo::nucleo::propulsion::ExecuteTrajectory::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ExecuteTrajectory =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsExecuteTrajectory}, {
      &protobuf_goldo_2fcommon_2fgeometry_2eproto::scc_info_Point.base,}};

static void InitDefaultsExecuteTranslation() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::goldo::nucleo::propulsion::_ExecuteTranslation_default_instance_;
    new (ptr) ::goldo::nucleo::propulsion::ExecuteTranslation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::goldo::nucleo::propulsion::ExecuteTranslation::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ExecuteTranslation =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsExecuteTranslation}, {}};

static void InitDefaultsExecuteReposition() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::goldo::nucleo::propulsion::_ExecuteReposition_default_instance_;
    new (ptr) ::goldo::nucleo::propulsion::ExecuteReposition();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::goldo::nucleo::propulsion::ExecuteReposition::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ExecuteReposition =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsExecuteReposition}, {}};

static void InitDefaultsExecuteRotation() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::goldo::nucleo::propulsion::_ExecuteRotation_default_instance_;
    new (ptr) ::goldo::nucleo::propulsion::ExecuteRotation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::goldo::nucleo::propulsion::ExecuteRotation::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ExecuteRotation =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsExecuteRotation}, {}};

static void InitDefaultsExecuteMoveTo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::goldo::nucleo::propulsion::_ExecuteMoveTo_default_instance_;
    new (ptr) ::goldo::nucleo::propulsion::ExecuteMoveTo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::goldo::nucleo::propulsion::ExecuteMoveTo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ExecuteMoveTo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsExecuteMoveTo}, {
      &protobuf_goldo_2fcommon_2fgeometry_2eproto::scc_info_Point.base,}};

static void InitDefaultsExecutePointTo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::goldo::nucleo::propulsion::_ExecutePointTo_default_instance_;
    new (ptr) ::goldo::nucleo::propulsion::ExecutePointTo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::goldo::nucleo::propulsion::ExecutePointTo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ExecutePointTo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsExecutePointTo}, {
      &protobuf_goldo_2fcommon_2fgeometry_2eproto::scc_info_Point.base,}};

static void InitDefaultsExecuteFaceDirection() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::goldo::nucleo::propulsion::_ExecuteFaceDirection_default_instance_;
    new (ptr) ::goldo::nucleo::propulsion::ExecuteFaceDirection();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::goldo::nucleo::propulsion::ExecuteFaceDirection::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ExecuteFaceDirection =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsExecuteFaceDirection}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_StateChange.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PropulsionEvent.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Telemetry.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TelemetryEx.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MotorsVelocitySetpoints.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OdometryConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PIDConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PropulsionLowLevelPIDConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PropulsionLowLevelControllerConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PropulsionControllerConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PropulsionTaskConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CommandStatus.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SetMotorsTorqueLimits.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CmdEmpty.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CmdSetEnable.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CmdSetAccelerationLimits.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CmdSetPose.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CmdTransformPose.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CmdSetTargetSpeed.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CmdMeasureNormal.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CmdSetEventSensorsMask.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ExecuteTrajectory.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ExecuteTranslation.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ExecuteReposition.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ExecuteRotation.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ExecuteMoveTo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ExecutePointTo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ExecuteFaceDirection.base);
}

::google::protobuf::Metadata file_level_metadata[28];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::StateChange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::StateChange, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::StateChange, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::StateChange, error_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::PropulsionEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::PropulsionEvent, pose_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::PropulsionEvent, parameter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::PropulsionEvent, data1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::PropulsionEvent, data2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::PropulsionEvent, type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::Telemetry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::Telemetry, pose_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::Telemetry, left_encoder_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::Telemetry, right_encoder_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::Telemetry, left_pwm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::Telemetry, right_pwm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::Telemetry, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::Telemetry, error_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::TelemetryEx, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::TelemetryEx, target_pose_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::TelemetryEx, error_longi_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::TelemetryEx, error_lateral_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::TelemetryEx, error_yaw_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::TelemetryEx, error_speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::TelemetryEx, error_yaw_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::TelemetryEx, lookahead_position_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::MotorsVelocitySetpoints, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::MotorsVelocitySetpoints, left_vel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::MotorsVelocitySetpoints, right_vel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::MotorsVelocitySetpoints, left_current_feedforward_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::MotorsVelocitySetpoints, right_current_feedforward_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::OdometryConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::OdometryConfig, dist_per_count_left_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::OdometryConfig, dist_per_count_right_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::OdometryConfig, wheel_distance_left_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::OdometryConfig, wheel_distance_right_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::OdometryConfig, speed_filter_frequency_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::OdometryConfig, accel_filter_frequency_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::PIDConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::PIDConfig, kp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::PIDConfig, ki_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::PIDConfig, kd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::PIDConfig, lim_i_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::PIDConfig, lim_d_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::PIDConfig, d_filter_frequency_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::PIDConfig, out_min_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::PIDConfig, out_max_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::PropulsionLowLevelPIDConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::PropulsionLowLevelPIDConfig, speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::PropulsionLowLevelPIDConfig, longi_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::PropulsionLowLevelPIDConfig, yaw_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::PropulsionLowLevelPIDConfig, yaw_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::PropulsionLowLevelControllerConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::PropulsionLowLevelControllerConfig, wheels_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::PropulsionLowLevelControllerConfig, motors_speed_factor_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::PropulsionControllerConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::PropulsionControllerConfig, low_level_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::PropulsionControllerConfig, pid_configs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::PropulsionControllerConfig, lookahead_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::PropulsionControllerConfig, lookahead_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::PropulsionControllerConfig, static_motor_speed_limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::PropulsionControllerConfig, cruise_motor_speed_limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::PropulsionControllerConfig, reposition_motor_speed_limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::PropulsionControllerConfig, static_torque_limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::PropulsionControllerConfig, cruise_torque_limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::PropulsionControllerConfig, reposition_torque_limit_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::PropulsionTaskConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::PropulsionTaskConfig, motor_controller_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::PropulsionTaskConfig, update_period_ms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::PropulsionTaskConfig, telemetry_period_ms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::PropulsionTaskConfig, telemetry_ex_period_ms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::PropulsionTaskConfig, pose_period_ms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::PropulsionTaskConfig, odrive_telemetry_period_ms_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::CommandStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::CommandStatus, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::CommandStatus, sequence_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::CommandStatus, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::CommandStatus, error_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::SetMotorsTorqueLimits, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::SetMotorsTorqueLimits, sequence_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::SetMotorsTorqueLimits, left_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::SetMotorsTorqueLimits, right_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::CmdEmpty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::CmdEmpty, sequence_number_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::CmdSetEnable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::CmdSetEnable, sequence_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::CmdSetEnable, enable_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::CmdSetAccelerationLimits, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::CmdSetAccelerationLimits, sequence_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::CmdSetAccelerationLimits, accel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::CmdSetAccelerationLimits, deccel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::CmdSetAccelerationLimits, angular_accel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::CmdSetAccelerationLimits, angular_deccel_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::CmdSetPose, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::CmdSetPose, sequence_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::CmdSetPose, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::CmdSetPose, yaw_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::CmdTransformPose, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::CmdTransformPose, sequence_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::CmdTransformPose, translation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::CmdTransformPose, rotation_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::CmdSetTargetSpeed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::CmdSetTargetSpeed, sequence_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::CmdSetTargetSpeed, target_speed_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::CmdMeasureNormal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::CmdMeasureNormal, sequence_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::CmdMeasureNormal, angle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::CmdMeasureNormal, distance_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::CmdSetEventSensorsMask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::CmdSetEventSensorsMask, sequence_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::CmdSetEventSensorsMask, mask_rising_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::CmdSetEventSensorsMask, mask_falling_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::ExecuteTrajectory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::ExecuteTrajectory, sequence_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::ExecuteTrajectory, speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::ExecuteTrajectory, reposition_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::ExecuteTrajectory, reposition_speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::ExecuteTrajectory, points_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::ExecuteTranslation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::ExecuteTranslation, sequence_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::ExecuteTranslation, distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::ExecuteTranslation, speed_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::ExecuteReposition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::ExecuteReposition, sequence_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::ExecuteReposition, distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::ExecuteReposition, speed_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::ExecuteRotation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::ExecuteRotation, sequence_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::ExecuteRotation, angle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::ExecuteRotation, yaw_rate_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::ExecuteMoveTo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::ExecuteMoveTo, sequence_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::ExecuteMoveTo, point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::ExecuteMoveTo, speed_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::ExecutePointTo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::ExecutePointTo, sequence_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::ExecutePointTo, point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::ExecutePointTo, yaw_rate_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::ExecuteFaceDirection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::ExecuteFaceDirection, sequence_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::ExecuteFaceDirection, yaw_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::propulsion::ExecuteFaceDirection, yaw_rate_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::goldo::nucleo::propulsion::StateChange)},
  { 8, -1, sizeof(::goldo::nucleo::propulsion::PropulsionEvent)},
  { 18, -1, sizeof(::goldo::nucleo::propulsion::Telemetry)},
  { 30, -1, sizeof(::goldo::nucleo::propulsion::TelemetryEx)},
  { 42, -1, sizeof(::goldo::nucleo::propulsion::MotorsVelocitySetpoints)},
  { 51, -1, sizeof(::goldo::nucleo::propulsion::OdometryConfig)},
  { 62, -1, sizeof(::goldo::nucleo::propulsion::PIDConfig)},
  { 75, -1, sizeof(::goldo::nucleo::propulsion::PropulsionLowLevelPIDConfig)},
  { 84, -1, sizeof(::goldo::nucleo::propulsion::PropulsionLowLevelControllerConfig)},
  { 91, -1, sizeof(::goldo::nucleo::propulsion::PropulsionControllerConfig)},
  { 106, -1, sizeof(::goldo::nucleo::propulsion::PropulsionTaskConfig)},
  { 117, -1, sizeof(::goldo::nucleo::propulsion::CommandStatus)},
  { 126, -1, sizeof(::goldo::nucleo::propulsion::SetMotorsTorqueLimits)},
  { 134, -1, sizeof(::goldo::nucleo::propulsion::CmdEmpty)},
  { 140, -1, sizeof(::goldo::nucleo::propulsion::CmdSetEnable)},
  { 147, -1, sizeof(::goldo::nucleo::propulsion::CmdSetAccelerationLimits)},
  { 157, -1, sizeof(::goldo::nucleo::propulsion::CmdSetPose)},
  { 165, -1, sizeof(::goldo::nucleo::propulsion::CmdTransformPose)},
  { 173, -1, sizeof(::goldo::nucleo::propulsion::CmdSetTargetSpeed)},
  { 180, -1, sizeof(::goldo::nucleo::propulsion::CmdMeasureNormal)},
  { 188, -1, sizeof(::goldo::nucleo::propulsion::CmdSetEventSensorsMask)},
  { 196, -1, sizeof(::goldo::nucleo::propulsion::ExecuteTrajectory)},
  { 206, -1, sizeof(::goldo::nucleo::propulsion::ExecuteTranslation)},
  { 214, -1, sizeof(::goldo::nucleo::propulsion::ExecuteReposition)},
  { 222, -1, sizeof(::goldo::nucleo::propulsion::ExecuteRotation)},
  { 230, -1, sizeof(::goldo::nucleo::propulsion::ExecuteMoveTo)},
  { 238, -1, sizeof(::goldo::nucleo::propulsion::ExecutePointTo)},
  { 246, -1, sizeof(::goldo::nucleo::propulsion::ExecuteFaceDirection)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::goldo::nucleo::propulsion::_StateChange_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::goldo::nucleo::propulsion::_PropulsionEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::goldo::nucleo::propulsion::_Telemetry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::goldo::nucleo::propulsion::_TelemetryEx_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::goldo::nucleo::propulsion::_MotorsVelocitySetpoints_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::goldo::nucleo::propulsion::_OdometryConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::goldo::nucleo::propulsion::_PIDConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::goldo::nucleo::propulsion::_PropulsionLowLevelPIDConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::goldo::nucleo::propulsion::_PropulsionLowLevelControllerConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::goldo::nucleo::propulsion::_PropulsionControllerConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::goldo::nucleo::propulsion::_PropulsionTaskConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::goldo::nucleo::propulsion::_CommandStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::goldo::nucleo::propulsion::_SetMotorsTorqueLimits_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::goldo::nucleo::propulsion::_CmdEmpty_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::goldo::nucleo::propulsion::_CmdSetEnable_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::goldo::nucleo::propulsion::_CmdSetAccelerationLimits_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::goldo::nucleo::propulsion::_CmdSetPose_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::goldo::nucleo::propulsion::_CmdTransformPose_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::goldo::nucleo::propulsion::_CmdSetTargetSpeed_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::goldo::nucleo::propulsion::_CmdMeasureNormal_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::goldo::nucleo::propulsion::_CmdSetEventSensorsMask_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::goldo::nucleo::propulsion::_ExecuteTrajectory_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::goldo::nucleo::propulsion::_ExecuteTranslation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::goldo::nucleo::propulsion::_ExecuteReposition_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::goldo::nucleo::propulsion::_ExecuteRotation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::goldo::nucleo::propulsion::_ExecuteMoveTo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::goldo::nucleo::propulsion::_ExecutePointTo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::goldo::nucleo::propulsion::_ExecuteFaceDirection_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "goldo/nucleo/propulsion.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 28);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\035goldo/nucleo/propulsion.proto\022\027goldo.n"
      "ucleo.propulsion\032\033goldo/common/geometry."
      "proto\032\027goldo/pb2_options.proto\"\270\001\n\013State"
      "Change\022\027\n\ttimestamp\030\001 \001(\rB\004\200\265\030\007\022G\n\005state"
      "\030\002 \001(\01622.goldo.nucleo.propulsion.Propuls"
      "ionControllerStateB\004\200\265\030\003\022G\n\005error\030\003 \001(\0162"
      "2.goldo.nucleo.propulsion.PropulsionCont"
      "rollerErrorB\004\200\265\030\003\"\215\001\n\017PropulsionEvent\022)\n"
      "\004pose\030\001 \001(\0132\033.goldo.common.geometry.Pose"
      "\022\021\n\tparameter\030\002 \001(\002\022\023\n\005data1\030\003 \001(\rB\004\200\265\030\007"
      "\022\023\n\005data2\030\004 \001(\rB\004\200\265\030\007\022\022\n\004type\030\005 \001(\rB\004\200\265\030"
      "\003\"\332\001\n\tTelemetry\022)\n\004pose\030\001 \001(\0132\033.goldo.co"
      "mmon.geometry.Pose\022\024\n\014left_encoder\030\002 \001(\r"
      "\022\025\n\rright_encoder\030\003 \001(\r\022\020\n\010left_pwm\030\004 \001("
      "\002\022\021\n\tright_pwm\030\005 \001(\002\022A\n\005state\030\006 \001(\01622.go"
      "ldo.nucleo.propulsion.PropulsionControll"
      "erState\022\r\n\005error\030\007 \001(\r\"\345\001\n\013TelemetryEx\0220"
      "\n\013target_pose\030\001 \001(\0132\033.goldo.common.geome"
      "try.Pose\022\023\n\013error_longi\030\002 \001(\002\022\025\n\rerror_l"
      "ateral\030\003 \001(\002\022\021\n\terror_yaw\030\004 \001(\002\022\023\n\013error"
      "_speed\030\005 \001(\002\022\026\n\016error_yaw_rate\030\006 \001(\002\0228\n\022"
      "lookahead_position\030\007 \001(\0132\034.goldo.common."
      "geometry.Point\"\203\001\n\027MotorsVelocitySetpoin"
      "ts\022\020\n\010left_vel\030\001 \001(\002\022\021\n\tright_vel\030\002 \001(\002\022"
      " \n\030left_current_feedforward\030\003 \001(\002\022!\n\031rig"
      "ht_current_feedforward\030\004 \001(\002\"\306\001\n\016Odometr"
      "yConfig\022\033\n\023dist_per_count_left\030\001 \001(\002\022\034\n\024"
      "dist_per_count_right\030\002 \001(\002\022\033\n\023wheel_dist"
      "ance_left\030\003 \001(\002\022\034\n\024wheel_distance_right\030"
      "\004 \001(\002\022\036\n\026speed_filter_frequency\030\005 \001(\002\022\036\n"
      "\026accel_filter_frequency\030\006 \001(\002\"\213\001\n\tPIDCon"
      "fig\022\n\n\002kp\030\001 \001(\002\022\n\n\002ki\030\002 \001(\002\022\n\n\002kd\030\003 \001(\002\022"
      "\r\n\005lim_i\030\004 \001(\002\022\r\n\005lim_d\030\005 \001(\002\022\032\n\022d_filte"
      "r_frequency\030\006 \001(\002\022\017\n\007out_min\030\007 \001(\002\022\017\n\007ou"
      "t_max\030\010 \001(\002\"\352\001\n\033PropulsionLowLevelPIDCon"
      "fig\0221\n\005speed\030\001 \001(\0132\".goldo.nucleo.propul"
      "sion.PIDConfig\0221\n\005longi\030\002 \001(\0132\".goldo.nu"
      "cleo.propulsion.PIDConfig\0224\n\010yaw_rate\030\003 "
      "\001(\0132\".goldo.nucleo.propulsion.PIDConfig\022"
      "/\n\003yaw\030\004 \001(\0132\".goldo.nucleo.propulsion.P"
      "IDConfig\"Z\n\"PropulsionLowLevelController"
      "Config\022\027\n\017wheels_distance\030\001 \001(\002\022\033\n\023motor"
      "s_speed_factor\030\002 \001(\002\"\301\003\n\032PropulsionContr"
      "ollerConfig\022U\n\020low_level_config\030\001 \001(\0132;."
      "goldo.nucleo.propulsion.PropulsionLowLev"
      "elControllerConfig\022S\n\013pid_configs\030\002 \003(\0132"
      "4.goldo.nucleo.propulsion.PropulsionLowL"
      "evelPIDConfigB\010\210\265\030\004\220\265\030\001\022\032\n\022lookahead_dis"
      "tance\030\003 \001(\002\022\026\n\016lookahead_time\030\004 \001(\002\022 \n\030s"
      "tatic_motor_speed_limit\030\005 \001(\002\022 \n\030cruise_"
      "motor_speed_limit\030\006 \001(\002\022$\n\034reposition_mo"
      "tor_speed_limit\030\007 \001(\002\022\033\n\023static_torque_l"
      "imit\030\010 \001(\002\022\033\n\023cruise_torque_limit\030\t \001(\002\022"
      "\037\n\027reposition_torque_limit\030\n \001(\002\"\344\002\n\024Pro"
      "pulsionTaskConfig\022a\n\020motor_controller\030\001 "
      "\001(\0162A.goldo.nucleo.propulsion.Propulsion"
      "TaskConfig.MotorControllerTypeB\004\200\265\030\003\022\036\n\020"
      "update_period_ms\030\002 \001(\rB\004\200\265\030\003\022!\n\023telemetr"
      "y_period_ms\030\003 \001(\rB\004\200\265\030\003\022$\n\026telemetry_ex_"
      "period_ms\030\004 \001(\rB\004\200\265\030\003\022\034\n\016pose_period_ms\030"
      "\005 \001(\rB\004\200\265\030\005\022(\n\032odrive_telemetry_period_m"
      "s\030\006 \001(\rB\004\200\265\030\005\"8\n\023MotorControllerType\022\010\n\004"
      "None\020\000\022\007\n\003Pwm\020\001\022\016\n\nODriveUART\020\002\"r\n\rComma"
      "ndStatus\022\027\n\ttimestamp\030\001 \001(\rB\004\200\265\030\007\022\035\n\017seq"
      "uence_number\030\002 \001(\rB\004\200\265\030\005\022\024\n\006status\030\003 \001(\005"
      "B\004\200\265\030\003\022\023\n\005error\030\004 \001(\005B\004\200\265\030\003\"S\n\025SetMotors"
      "TorqueLimits\022\035\n\017sequence_number\030\001 \001(\005B\004\200"
      "\265\030\005\022\014\n\004left\030\002 \001(\002\022\r\n\005right\030\003 \001(\002\")\n\010CmdE"
      "mpty\022\035\n\017sequence_number\030\001 \001(\005B\004\200\265\030\005\"C\n\014C"
      "mdSetEnable\022\035\n\017sequence_number\030\001 \001(\005B\004\200\265"
      "\030\005\022\024\n\006enable\030\002 \001(\010B\004\200\265\030\003\"\207\001\n\030CmdSetAccel"
      "erationLimits\022\035\n\017sequence_number\030\001 \001(\005B\004"
      "\200\265\030\005\022\r\n\005accel\030\002 \001(\002\022\016\n\006deccel\030\003 \001(\002\022\025\n\ra"
      "ngular_accel\030\004 \001(\002\022\026\n\016angular_deccel\030\005 \001"
      "(\002\"h\n\nCmdSetPose\022\035\n\017sequence_number\030\001 \001("
      "\005B\004\200\265\030\005\022.\n\010position\030\002 \001(\0132\034.goldo.common"
      ".geometry.Point\022\013\n\003yaw\030\003 \001(\002\"v\n\020CmdTrans"
      "formPose\022\035\n\017sequence_number\030\001 \001(\005B\004\200\265\030\005\022"
      "1\n\013translation\030\002 \001(\0132\034.goldo.common.geom"
      "etry.Point\022\020\n\010rotation\030\003 \001(\002\"H\n\021CmdSetTa"
      "rgetSpeed\022\035\n\017sequence_number\030\001 \001(\005B\004\200\265\030\005"
      "\022\024\n\014target_speed\030\003 \001(\002\"R\n\020CmdMeasureNorm"
      "al\022\035\n\017sequence_number\030\001 \001(\005B\004\200\265\030\005\022\r\n\005ang"
      "le\030\002 \001(\002\022\020\n\010distance\030\003 \001(\002\"n\n\026CmdSetEven"
      "tSensorsMask\022\035\n\017sequence_number\030\001 \001(\005B\004\200"
      "\265\030\005\022\031\n\013mask_rising\030\002 \001(\rB\004\200\265\030\007\022\032\n\014mask_f"
      "alling\030\003 \001(\rB\004\200\265\030\007\"\246\001\n\021ExecuteTrajectory"
      "\022\035\n\017sequence_number\030\001 \001(\005B\004\200\265\030\005\022\r\n\005speed"
      "\030\002 \001(\002\022\033\n\023reposition_distance\030\004 \001(\002\022\030\n\020r"
      "eposition_speed\030\005 \001(\002\022,\n\006points\030\003 \003(\0132\034."
      "goldo.common.geometry.Point\"T\n\022ExecuteTr"
      "anslation\022\035\n\017sequence_number\030\001 \001(\005B\004\200\265\030\005"
      "\022\020\n\010distance\030\002 \001(\002\022\r\n\005speed\030\003 \001(\002\"S\n\021Exe"
      "cuteReposition\022\035\n\017sequence_number\030\001 \001(\005B"
      "\004\200\265\030\005\022\020\n\010distance\030\002 \001(\002\022\r\n\005speed\030\003 \001(\002\"Q"
      "\n\017ExecuteRotation\022\035\n\017sequence_number\030\001 \001"
      "(\005B\004\200\265\030\005\022\r\n\005angle\030\002 \001(\002\022\020\n\010yaw_rate\030\003 \001("
      "\002\"j\n\rExecuteMoveTo\022\035\n\017sequence_number\030\001 "
      "\001(\005B\004\200\265\030\005\022+\n\005point\030\002 \001(\0132\034.goldo.common."
      "geometry.Point\022\r\n\005speed\030\003 \001(\002\"n\n\016Execute"
      "PointTo\022\035\n\017sequence_number\030\001 \001(\005B\004\200\265\030\005\022+"
      "\n\005point\030\002 \001(\0132\034.goldo.common.geometry.Po"
      "int\022\020\n\010yaw_rate\030\003 \001(\002\"T\n\024ExecuteFaceDire"
      "ction\022\035\n\017sequence_number\030\001 \001(\005B\004\200\265\030\005\022\013\n\003"
      "yaw\030\002 \001(\002\022\020\n\010yaw_rate\030\003 \001(\002*\234\001\n\031Propulsi"
      "onControllerState\022\014\n\010INACTIVE\020\000\022\013\n\007STOPP"
      "ED\020\001\022\025\n\021FOLLOW_TRAJECTORY\020\002\022\n\n\006ROTATE\020\003\022"
      "\016\n\nREPOSITION\020\004\022\022\n\016MANUAL_CONTROL\020\005\022\022\n\016E"
      "MERGENCY_STOP\020\006\022\t\n\005ERROR\020\007*x\n\031Propulsion"
      "ControllerError\022\016\n\nERROR_NONE\020\000\022\030\n\024ERROR"
      "_EMERGENCY_STOP\020\001\022\027\n\023ERROR_ROBOT_BLOCKED"
      "\020\002\022\030\n\024ERROR_TRACKING_ERROR\020\003b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 4476);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "goldo/nucleo/propulsion.proto", &protobuf_RegisterTypes);
  ::protobuf_goldo_2fcommon_2fgeometry_2eproto::AddDescriptors();
  ::protobuf_goldo_2fpb2_5foptions_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_goldo_2fnucleo_2fpropulsion_2eproto
namespace goldo {
namespace nucleo {
namespace propulsion {
const ::google::protobuf::EnumDescriptor* PropulsionTaskConfig_MotorControllerType_descriptor() {
  protobuf_goldo_2fnucleo_2fpropulsion_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_goldo_2fnucleo_2fpropulsion_2eproto::file_level_enum_descriptors[0];
}
bool PropulsionTaskConfig_MotorControllerType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PropulsionTaskConfig_MotorControllerType PropulsionTaskConfig::None;
const PropulsionTaskConfig_MotorControllerType PropulsionTaskConfig::Pwm;
const PropulsionTaskConfig_MotorControllerType PropulsionTaskConfig::ODriveUART;
const PropulsionTaskConfig_MotorControllerType PropulsionTaskConfig::MotorControllerType_MIN;
const PropulsionTaskConfig_MotorControllerType PropulsionTaskConfig::MotorControllerType_MAX;
const int PropulsionTaskConfig::MotorControllerType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* PropulsionControllerState_descriptor() {
  protobuf_goldo_2fnucleo_2fpropulsion_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_goldo_2fnucleo_2fpropulsion_2eproto::file_level_enum_descriptors[1];
}
bool PropulsionControllerState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PropulsionControllerError_descriptor() {
  protobuf_goldo_2fnucleo_2fpropulsion_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_goldo_2fnucleo_2fpropulsion_2eproto::file_level_enum_descriptors[2];
}
bool PropulsionControllerError_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void StateChange::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StateChange::kTimestampFieldNumber;
const int StateChange::kStateFieldNumber;
const int StateChange::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StateChange::StateChange()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_goldo_2fnucleo_2fpropulsion_2eproto::scc_info_StateChange.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:goldo.nucleo.propulsion.StateChange)
}
StateChange::StateChange(const StateChange& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&error_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(error_));
  // @@protoc_insertion_point(copy_constructor:goldo.nucleo.propulsion.StateChange)
}

void StateChange::SharedCtor() {
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(error_));
}

StateChange::~StateChange() {
  // @@protoc_insertion_point(destructor:goldo.nucleo.propulsion.StateChange)
  SharedDtor();
}

void StateChange::SharedDtor() {
}

void StateChange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* StateChange::descriptor() {
  ::protobuf_goldo_2fnucleo_2fpropulsion_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2fnucleo_2fpropulsion_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StateChange& StateChange::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_goldo_2fnucleo_2fpropulsion_2eproto::scc_info_StateChange.base);
  return *internal_default_instance();
}


void StateChange::Clear() {
// @@protoc_insertion_point(message_clear_start:goldo.nucleo.propulsion.StateChange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(error_));
  _internal_metadata_.Clear();
}

bool StateChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:goldo.nucleo.propulsion.StateChange)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 timestamp = 1 [(.goldo.pb2_options.cpp_type) = UINT32];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .goldo.nucleo.propulsion.PropulsionControllerState state = 2 [(.goldo.pb2_options.cpp_type) = UINT8];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::goldo::nucleo::propulsion::PropulsionControllerState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .goldo.nucleo.propulsion.PropulsionControllerError error = 3 [(.goldo.pb2_options.cpp_type) = UINT8];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_error(static_cast< ::goldo::nucleo::propulsion::PropulsionControllerError >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:goldo.nucleo.propulsion.StateChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:goldo.nucleo.propulsion.StateChange)
  return false;
#undef DO_
}

void StateChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:goldo.nucleo.propulsion.StateChange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 timestamp = 1 [(.goldo.pb2_options.cpp_type) = UINT32];
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->timestamp(), output);
  }

  // .goldo.nucleo.propulsion.PropulsionControllerState state = 2 [(.goldo.pb2_options.cpp_type) = UINT8];
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->state(), output);
  }

  // .goldo.nucleo.propulsion.PropulsionControllerError error = 3 [(.goldo.pb2_options.cpp_type) = UINT8];
  if (this->error() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->error(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:goldo.nucleo.propulsion.StateChange)
}

::google::protobuf::uint8* StateChange::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:goldo.nucleo.propulsion.StateChange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 timestamp = 1 [(.goldo.pb2_options.cpp_type) = UINT32];
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->timestamp(), target);
  }

  // .goldo.nucleo.propulsion.PropulsionControllerState state = 2 [(.goldo.pb2_options.cpp_type) = UINT8];
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->state(), target);
  }

  // .goldo.nucleo.propulsion.PropulsionControllerError error = 3 [(.goldo.pb2_options.cpp_type) = UINT8];
  if (this->error() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->error(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:goldo.nucleo.propulsion.StateChange)
  return target;
}

size_t StateChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:goldo.nucleo.propulsion.StateChange)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 timestamp = 1 [(.goldo.pb2_options.cpp_type) = UINT32];
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->timestamp());
  }

  // .goldo.nucleo.propulsion.PropulsionControllerState state = 2 [(.goldo.pb2_options.cpp_type) = UINT8];
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  // .goldo.nucleo.propulsion.PropulsionControllerError error = 3 [(.goldo.pb2_options.cpp_type) = UINT8];
  if (this->error() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->error());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StateChange::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:goldo.nucleo.propulsion.StateChange)
  GOOGLE_DCHECK_NE(&from, this);
  const StateChange* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StateChange>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:goldo.nucleo.propulsion.StateChange)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:goldo.nucleo.propulsion.StateChange)
    MergeFrom(*source);
  }
}

void StateChange::MergeFrom(const StateChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:goldo.nucleo.propulsion.StateChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
  if (from.error() != 0) {
    set_error(from.error());
  }
}

void StateChange::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:goldo.nucleo.propulsion.StateChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StateChange::CopyFrom(const StateChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:goldo.nucleo.propulsion.StateChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StateChange::IsInitialized() const {
  return true;
}

void StateChange::Swap(StateChange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StateChange::InternalSwap(StateChange* other) {
  using std::swap;
  swap(timestamp_, other->timestamp_);
  swap(state_, other->state_);
  swap(error_, other->error_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata StateChange::GetMetadata() const {
  protobuf_goldo_2fnucleo_2fpropulsion_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2fnucleo_2fpropulsion_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PropulsionEvent::InitAsDefaultInstance() {
  ::goldo::nucleo::propulsion::_PropulsionEvent_default_instance_._instance.get_mutable()->pose_ = const_cast< ::goldo::common::geometry::Pose*>(
      ::goldo::common::geometry::Pose::internal_default_instance());
}
void PropulsionEvent::clear_pose() {
  if (GetArenaNoVirtual() == NULL && pose_ != NULL) {
    delete pose_;
  }
  pose_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PropulsionEvent::kPoseFieldNumber;
const int PropulsionEvent::kParameterFieldNumber;
const int PropulsionEvent::kData1FieldNumber;
const int PropulsionEvent::kData2FieldNumber;
const int PropulsionEvent::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PropulsionEvent::PropulsionEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_goldo_2fnucleo_2fpropulsion_2eproto::scc_info_PropulsionEvent.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:goldo.nucleo.propulsion.PropulsionEvent)
}
PropulsionEvent::PropulsionEvent(const PropulsionEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pose()) {
    pose_ = new ::goldo::common::geometry::Pose(*from.pose_);
  } else {
    pose_ = NULL;
  }
  ::memcpy(&parameter_, &from.parameter_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&parameter_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:goldo.nucleo.propulsion.PropulsionEvent)
}

void PropulsionEvent::SharedCtor() {
  ::memset(&pose_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&pose_)) + sizeof(type_));
}

PropulsionEvent::~PropulsionEvent() {
  // @@protoc_insertion_point(destructor:goldo.nucleo.propulsion.PropulsionEvent)
  SharedDtor();
}

void PropulsionEvent::SharedDtor() {
  if (this != internal_default_instance()) delete pose_;
}

void PropulsionEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PropulsionEvent::descriptor() {
  ::protobuf_goldo_2fnucleo_2fpropulsion_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2fnucleo_2fpropulsion_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PropulsionEvent& PropulsionEvent::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_goldo_2fnucleo_2fpropulsion_2eproto::scc_info_PropulsionEvent.base);
  return *internal_default_instance();
}


void PropulsionEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:goldo.nucleo.propulsion.PropulsionEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && pose_ != NULL) {
    delete pose_;
  }
  pose_ = NULL;
  ::memset(&parameter_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&parameter_)) + sizeof(type_));
  _internal_metadata_.Clear();
}

bool PropulsionEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:goldo.nucleo.propulsion.PropulsionEvent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .goldo.common.geometry.Pose pose = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float parameter = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &parameter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 data1 = 3 [(.goldo.pb2_options.cpp_type) = UINT32];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 data2 = 4 [(.goldo.pb2_options.cpp_type) = UINT32];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 type = 5 [(.goldo.pb2_options.cpp_type) = UINT8];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:goldo.nucleo.propulsion.PropulsionEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:goldo.nucleo.propulsion.PropulsionEvent)
  return false;
#undef DO_
}

void PropulsionEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:goldo.nucleo.propulsion.PropulsionEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .goldo.common.geometry.Pose pose = 1;
  if (this->has_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_pose(), output);
  }

  // float parameter = 2;
  if (this->parameter() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->parameter(), output);
  }

  // uint32 data1 = 3 [(.goldo.pb2_options.cpp_type) = UINT32];
  if (this->data1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->data1(), output);
  }

  // uint32 data2 = 4 [(.goldo.pb2_options.cpp_type) = UINT32];
  if (this->data2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->data2(), output);
  }

  // uint32 type = 5 [(.goldo.pb2_options.cpp_type) = UINT8];
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:goldo.nucleo.propulsion.PropulsionEvent)
}

::google::protobuf::uint8* PropulsionEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:goldo.nucleo.propulsion.PropulsionEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .goldo.common.geometry.Pose pose = 1;
  if (this->has_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_pose(), deterministic, target);
  }

  // float parameter = 2;
  if (this->parameter() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->parameter(), target);
  }

  // uint32 data1 = 3 [(.goldo.pb2_options.cpp_type) = UINT32];
  if (this->data1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->data1(), target);
  }

  // uint32 data2 = 4 [(.goldo.pb2_options.cpp_type) = UINT32];
  if (this->data2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->data2(), target);
  }

  // uint32 type = 5 [(.goldo.pb2_options.cpp_type) = UINT8];
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:goldo.nucleo.propulsion.PropulsionEvent)
  return target;
}

size_t PropulsionEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:goldo.nucleo.propulsion.PropulsionEvent)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .goldo.common.geometry.Pose pose = 1;
  if (this->has_pose()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pose_);
  }

  // float parameter = 2;
  if (this->parameter() != 0) {
    total_size += 1 + 4;
  }

  // uint32 data1 = 3 [(.goldo.pb2_options.cpp_type) = UINT32];
  if (this->data1() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->data1());
  }

  // uint32 data2 = 4 [(.goldo.pb2_options.cpp_type) = UINT32];
  if (this->data2() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->data2());
  }

  // uint32 type = 5 [(.goldo.pb2_options.cpp_type) = UINT8];
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PropulsionEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:goldo.nucleo.propulsion.PropulsionEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const PropulsionEvent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PropulsionEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:goldo.nucleo.propulsion.PropulsionEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:goldo.nucleo.propulsion.PropulsionEvent)
    MergeFrom(*source);
  }
}

void PropulsionEvent::MergeFrom(const PropulsionEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:goldo.nucleo.propulsion.PropulsionEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pose()) {
    mutable_pose()->::goldo::common::geometry::Pose::MergeFrom(from.pose());
  }
  if (from.parameter() != 0) {
    set_parameter(from.parameter());
  }
  if (from.data1() != 0) {
    set_data1(from.data1());
  }
  if (from.data2() != 0) {
    set_data2(from.data2());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void PropulsionEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:goldo.nucleo.propulsion.PropulsionEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PropulsionEvent::CopyFrom(const PropulsionEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:goldo.nucleo.propulsion.PropulsionEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropulsionEvent::IsInitialized() const {
  return true;
}

void PropulsionEvent::Swap(PropulsionEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PropulsionEvent::InternalSwap(PropulsionEvent* other) {
  using std::swap;
  swap(pose_, other->pose_);
  swap(parameter_, other->parameter_);
  swap(data1_, other->data1_);
  swap(data2_, other->data2_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PropulsionEvent::GetMetadata() const {
  protobuf_goldo_2fnucleo_2fpropulsion_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2fnucleo_2fpropulsion_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Telemetry::InitAsDefaultInstance() {
  ::goldo::nucleo::propulsion::_Telemetry_default_instance_._instance.get_mutable()->pose_ = const_cast< ::goldo::common::geometry::Pose*>(
      ::goldo::common::geometry::Pose::internal_default_instance());
}
void Telemetry::clear_pose() {
  if (GetArenaNoVirtual() == NULL && pose_ != NULL) {
    delete pose_;
  }
  pose_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Telemetry::kPoseFieldNumber;
const int Telemetry::kLeftEncoderFieldNumber;
const int Telemetry::kRightEncoderFieldNumber;
const int Telemetry::kLeftPwmFieldNumber;
const int Telemetry::kRightPwmFieldNumber;
const int Telemetry::kStateFieldNumber;
const int Telemetry::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Telemetry::Telemetry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_goldo_2fnucleo_2fpropulsion_2eproto::scc_info_Telemetry.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:goldo.nucleo.propulsion.Telemetry)
}
Telemetry::Telemetry(const Telemetry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pose()) {
    pose_ = new ::goldo::common::geometry::Pose(*from.pose_);
  } else {
    pose_ = NULL;
  }
  ::memcpy(&left_encoder_, &from.left_encoder_,
    static_cast<size_t>(reinterpret_cast<char*>(&error_) -
    reinterpret_cast<char*>(&left_encoder_)) + sizeof(error_));
  // @@protoc_insertion_point(copy_constructor:goldo.nucleo.propulsion.Telemetry)
}

void Telemetry::SharedCtor() {
  ::memset(&pose_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_) -
      reinterpret_cast<char*>(&pose_)) + sizeof(error_));
}

Telemetry::~Telemetry() {
  // @@protoc_insertion_point(destructor:goldo.nucleo.propulsion.Telemetry)
  SharedDtor();
}

void Telemetry::SharedDtor() {
  if (this != internal_default_instance()) delete pose_;
}

void Telemetry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Telemetry::descriptor() {
  ::protobuf_goldo_2fnucleo_2fpropulsion_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2fnucleo_2fpropulsion_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Telemetry& Telemetry::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_goldo_2fnucleo_2fpropulsion_2eproto::scc_info_Telemetry.base);
  return *internal_default_instance();
}


void Telemetry::Clear() {
// @@protoc_insertion_point(message_clear_start:goldo.nucleo.propulsion.Telemetry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && pose_ != NULL) {
    delete pose_;
  }
  pose_ = NULL;
  ::memset(&left_encoder_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_) -
      reinterpret_cast<char*>(&left_encoder_)) + sizeof(error_));
  _internal_metadata_.Clear();
}

bool Telemetry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:goldo.nucleo.propulsion.Telemetry)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .goldo.common.geometry.Pose pose = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 left_encoder = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &left_encoder_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 right_encoder = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &right_encoder_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float left_pwm = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &left_pwm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float right_pwm = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &right_pwm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .goldo.nucleo.propulsion.PropulsionControllerState state = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::goldo::nucleo::propulsion::PropulsionControllerState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 error = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:goldo.nucleo.propulsion.Telemetry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:goldo.nucleo.propulsion.Telemetry)
  return false;
#undef DO_
}

void Telemetry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:goldo.nucleo.propulsion.Telemetry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .goldo.common.geometry.Pose pose = 1;
  if (this->has_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_pose(), output);
  }

  // uint32 left_encoder = 2;
  if (this->left_encoder() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->left_encoder(), output);
  }

  // uint32 right_encoder = 3;
  if (this->right_encoder() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->right_encoder(), output);
  }

  // float left_pwm = 4;
  if (this->left_pwm() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->left_pwm(), output);
  }

  // float right_pwm = 5;
  if (this->right_pwm() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->right_pwm(), output);
  }

  // .goldo.nucleo.propulsion.PropulsionControllerState state = 6;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->state(), output);
  }

  // uint32 error = 7;
  if (this->error() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->error(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:goldo.nucleo.propulsion.Telemetry)
}

::google::protobuf::uint8* Telemetry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:goldo.nucleo.propulsion.Telemetry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .goldo.common.geometry.Pose pose = 1;
  if (this->has_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_pose(), deterministic, target);
  }

  // uint32 left_encoder = 2;
  if (this->left_encoder() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->left_encoder(), target);
  }

  // uint32 right_encoder = 3;
  if (this->right_encoder() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->right_encoder(), target);
  }

  // float left_pwm = 4;
  if (this->left_pwm() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->left_pwm(), target);
  }

  // float right_pwm = 5;
  if (this->right_pwm() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->right_pwm(), target);
  }

  // .goldo.nucleo.propulsion.PropulsionControllerState state = 6;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->state(), target);
  }

  // uint32 error = 7;
  if (this->error() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->error(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:goldo.nucleo.propulsion.Telemetry)
  return target;
}

size_t Telemetry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:goldo.nucleo.propulsion.Telemetry)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .goldo.common.geometry.Pose pose = 1;
  if (this->has_pose()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pose_);
  }

  // uint32 left_encoder = 2;
  if (this->left_encoder() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->left_encoder());
  }

  // uint32 right_encoder = 3;
  if (this->right_encoder() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->right_encoder());
  }

  // float left_pwm = 4;
  if (this->left_pwm() != 0) {
    total_size += 1 + 4;
  }

  // float right_pwm = 5;
  if (this->right_pwm() != 0) {
    total_size += 1 + 4;
  }

  // .goldo.nucleo.propulsion.PropulsionControllerState state = 6;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  // uint32 error = 7;
  if (this->error() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->error());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Telemetry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:goldo.nucleo.propulsion.Telemetry)
  GOOGLE_DCHECK_NE(&from, this);
  const Telemetry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Telemetry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:goldo.nucleo.propulsion.Telemetry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:goldo.nucleo.propulsion.Telemetry)
    MergeFrom(*source);
  }
}

void Telemetry::MergeFrom(const Telemetry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:goldo.nucleo.propulsion.Telemetry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pose()) {
    mutable_pose()->::goldo::common::geometry::Pose::MergeFrom(from.pose());
  }
  if (from.left_encoder() != 0) {
    set_left_encoder(from.left_encoder());
  }
  if (from.right_encoder() != 0) {
    set_right_encoder(from.right_encoder());
  }
  if (from.left_pwm() != 0) {
    set_left_pwm(from.left_pwm());
  }
  if (from.right_pwm() != 0) {
    set_right_pwm(from.right_pwm());
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
  if (from.error() != 0) {
    set_error(from.error());
  }
}

void Telemetry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:goldo.nucleo.propulsion.Telemetry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Telemetry::CopyFrom(const Telemetry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:goldo.nucleo.propulsion.Telemetry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Telemetry::IsInitialized() const {
  return true;
}

void Telemetry::Swap(Telemetry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Telemetry::InternalSwap(Telemetry* other) {
  using std::swap;
  swap(pose_, other->pose_);
  swap(left_encoder_, other->left_encoder_);
  swap(right_encoder_, other->right_encoder_);
  swap(left_pwm_, other->left_pwm_);
  swap(right_pwm_, other->right_pwm_);
  swap(state_, other->state_);
  swap(error_, other->error_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Telemetry::GetMetadata() const {
  protobuf_goldo_2fnucleo_2fpropulsion_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2fnucleo_2fpropulsion_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TelemetryEx::InitAsDefaultInstance() {
  ::goldo::nucleo::propulsion::_TelemetryEx_default_instance_._instance.get_mutable()->target_pose_ = const_cast< ::goldo::common::geometry::Pose*>(
      ::goldo::common::geometry::Pose::internal_default_instance());
  ::goldo::nucleo::propulsion::_TelemetryEx_default_instance_._instance.get_mutable()->lookahead_position_ = const_cast< ::goldo::common::geometry::Point*>(
      ::goldo::common::geometry::Point::internal_default_instance());
}
void TelemetryEx::clear_target_pose() {
  if (GetArenaNoVirtual() == NULL && target_pose_ != NULL) {
    delete target_pose_;
  }
  target_pose_ = NULL;
}
void TelemetryEx::clear_lookahead_position() {
  if (GetArenaNoVirtual() == NULL && lookahead_position_ != NULL) {
    delete lookahead_position_;
  }
  lookahead_position_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TelemetryEx::kTargetPoseFieldNumber;
const int TelemetryEx::kErrorLongiFieldNumber;
const int TelemetryEx::kErrorLateralFieldNumber;
const int TelemetryEx::kErrorYawFieldNumber;
const int TelemetryEx::kErrorSpeedFieldNumber;
const int TelemetryEx::kErrorYawRateFieldNumber;
const int TelemetryEx::kLookaheadPositionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TelemetryEx::TelemetryEx()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_goldo_2fnucleo_2fpropulsion_2eproto::scc_info_TelemetryEx.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:goldo.nucleo.propulsion.TelemetryEx)
}
TelemetryEx::TelemetryEx(const TelemetryEx& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_target_pose()) {
    target_pose_ = new ::goldo::common::geometry::Pose(*from.target_pose_);
  } else {
    target_pose_ = NULL;
  }
  if (from.has_lookahead_position()) {
    lookahead_position_ = new ::goldo::common::geometry::Point(*from.lookahead_position_);
  } else {
    lookahead_position_ = NULL;
  }
  ::memcpy(&error_longi_, &from.error_longi_,
    static_cast<size_t>(reinterpret_cast<char*>(&error_yaw_rate_) -
    reinterpret_cast<char*>(&error_longi_)) + sizeof(error_yaw_rate_));
  // @@protoc_insertion_point(copy_constructor:goldo.nucleo.propulsion.TelemetryEx)
}

void TelemetryEx::SharedCtor() {
  ::memset(&target_pose_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_yaw_rate_) -
      reinterpret_cast<char*>(&target_pose_)) + sizeof(error_yaw_rate_));
}

TelemetryEx::~TelemetryEx() {
  // @@protoc_insertion_point(destructor:goldo.nucleo.propulsion.TelemetryEx)
  SharedDtor();
}

void TelemetryEx::SharedDtor() {
  if (this != internal_default_instance()) delete target_pose_;
  if (this != internal_default_instance()) delete lookahead_position_;
}

void TelemetryEx::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TelemetryEx::descriptor() {
  ::protobuf_goldo_2fnucleo_2fpropulsion_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2fnucleo_2fpropulsion_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TelemetryEx& TelemetryEx::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_goldo_2fnucleo_2fpropulsion_2eproto::scc_info_TelemetryEx.base);
  return *internal_default_instance();
}


void TelemetryEx::Clear() {
// @@protoc_insertion_point(message_clear_start:goldo.nucleo.propulsion.TelemetryEx)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && target_pose_ != NULL) {
    delete target_pose_;
  }
  target_pose_ = NULL;
  if (GetArenaNoVirtual() == NULL && lookahead_position_ != NULL) {
    delete lookahead_position_;
  }
  lookahead_position_ = NULL;
  ::memset(&error_longi_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_yaw_rate_) -
      reinterpret_cast<char*>(&error_longi_)) + sizeof(error_yaw_rate_));
  _internal_metadata_.Clear();
}

bool TelemetryEx::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:goldo.nucleo.propulsion.TelemetryEx)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .goldo.common.geometry.Pose target_pose = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_target_pose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float error_longi = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &error_longi_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float error_lateral = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &error_lateral_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float error_yaw = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &error_yaw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float error_speed = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &error_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float error_yaw_rate = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &error_yaw_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .goldo.common.geometry.Point lookahead_position = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_lookahead_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:goldo.nucleo.propulsion.TelemetryEx)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:goldo.nucleo.propulsion.TelemetryEx)
  return false;
#undef DO_
}

void TelemetryEx::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:goldo.nucleo.propulsion.TelemetryEx)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .goldo.common.geometry.Pose target_pose = 1;
  if (this->has_target_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_target_pose(), output);
  }

  // float error_longi = 2;
  if (this->error_longi() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->error_longi(), output);
  }

  // float error_lateral = 3;
  if (this->error_lateral() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->error_lateral(), output);
  }

  // float error_yaw = 4;
  if (this->error_yaw() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->error_yaw(), output);
  }

  // float error_speed = 5;
  if (this->error_speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->error_speed(), output);
  }

  // float error_yaw_rate = 6;
  if (this->error_yaw_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->error_yaw_rate(), output);
  }

  // .goldo.common.geometry.Point lookahead_position = 7;
  if (this->has_lookahead_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_lookahead_position(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:goldo.nucleo.propulsion.TelemetryEx)
}

::google::protobuf::uint8* TelemetryEx::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:goldo.nucleo.propulsion.TelemetryEx)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .goldo.common.geometry.Pose target_pose = 1;
  if (this->has_target_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_target_pose(), deterministic, target);
  }

  // float error_longi = 2;
  if (this->error_longi() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->error_longi(), target);
  }

  // float error_lateral = 3;
  if (this->error_lateral() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->error_lateral(), target);
  }

  // float error_yaw = 4;
  if (this->error_yaw() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->error_yaw(), target);
  }

  // float error_speed = 5;
  if (this->error_speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->error_speed(), target);
  }

  // float error_yaw_rate = 6;
  if (this->error_yaw_rate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->error_yaw_rate(), target);
  }

  // .goldo.common.geometry.Point lookahead_position = 7;
  if (this->has_lookahead_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_lookahead_position(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:goldo.nucleo.propulsion.TelemetryEx)
  return target;
}

size_t TelemetryEx::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:goldo.nucleo.propulsion.TelemetryEx)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .goldo.common.geometry.Pose target_pose = 1;
  if (this->has_target_pose()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *target_pose_);
  }

  // .goldo.common.geometry.Point lookahead_position = 7;
  if (this->has_lookahead_position()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *lookahead_position_);
  }

  // float error_longi = 2;
  if (this->error_longi() != 0) {
    total_size += 1 + 4;
  }

  // float error_lateral = 3;
  if (this->error_lateral() != 0) {
    total_size += 1 + 4;
  }

  // float error_yaw = 4;
  if (this->error_yaw() != 0) {
    total_size += 1 + 4;
  }

  // float error_speed = 5;
  if (this->error_speed() != 0) {
    total_size += 1 + 4;
  }

  // float error_yaw_rate = 6;
  if (this->error_yaw_rate() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TelemetryEx::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:goldo.nucleo.propulsion.TelemetryEx)
  GOOGLE_DCHECK_NE(&from, this);
  const TelemetryEx* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TelemetryEx>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:goldo.nucleo.propulsion.TelemetryEx)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:goldo.nucleo.propulsion.TelemetryEx)
    MergeFrom(*source);
  }
}

void TelemetryEx::MergeFrom(const TelemetryEx& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:goldo.nucleo.propulsion.TelemetryEx)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_target_pose()) {
    mutable_target_pose()->::goldo::common::geometry::Pose::MergeFrom(from.target_pose());
  }
  if (from.has_lookahead_position()) {
    mutable_lookahead_position()->::goldo::common::geometry::Point::MergeFrom(from.lookahead_position());
  }
  if (from.error_longi() != 0) {
    set_error_longi(from.error_longi());
  }
  if (from.error_lateral() != 0) {
    set_error_lateral(from.error_lateral());
  }
  if (from.error_yaw() != 0) {
    set_error_yaw(from.error_yaw());
  }
  if (from.error_speed() != 0) {
    set_error_speed(from.error_speed());
  }
  if (from.error_yaw_rate() != 0) {
    set_error_yaw_rate(from.error_yaw_rate());
  }
}

void TelemetryEx::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:goldo.nucleo.propulsion.TelemetryEx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TelemetryEx::CopyFrom(const TelemetryEx& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:goldo.nucleo.propulsion.TelemetryEx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TelemetryEx::IsInitialized() const {
  return true;
}

void TelemetryEx::Swap(TelemetryEx* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TelemetryEx::InternalSwap(TelemetryEx* other) {
  using std::swap;
  swap(target_pose_, other->target_pose_);
  swap(lookahead_position_, other->lookahead_position_);
  swap(error_longi_, other->error_longi_);
  swap(error_lateral_, other->error_lateral_);
  swap(error_yaw_, other->error_yaw_);
  swap(error_speed_, other->error_speed_);
  swap(error_yaw_rate_, other->error_yaw_rate_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TelemetryEx::GetMetadata() const {
  protobuf_goldo_2fnucleo_2fpropulsion_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2fnucleo_2fpropulsion_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MotorsVelocitySetpoints::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MotorsVelocitySetpoints::kLeftVelFieldNumber;
const int MotorsVelocitySetpoints::kRightVelFieldNumber;
const int MotorsVelocitySetpoints::kLeftCurrentFeedforwardFieldNumber;
const int MotorsVelocitySetpoints::kRightCurrentFeedforwardFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MotorsVelocitySetpoints::MotorsVelocitySetpoints()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_goldo_2fnucleo_2fpropulsion_2eproto::scc_info_MotorsVelocitySetpoints.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:goldo.nucleo.propulsion.MotorsVelocitySetpoints)
}
MotorsVelocitySetpoints::MotorsVelocitySetpoints(const MotorsVelocitySetpoints& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&left_vel_, &from.left_vel_,
    static_cast<size_t>(reinterpret_cast<char*>(&right_current_feedforward_) -
    reinterpret_cast<char*>(&left_vel_)) + sizeof(right_current_feedforward_));
  // @@protoc_insertion_point(copy_constructor:goldo.nucleo.propulsion.MotorsVelocitySetpoints)
}

void MotorsVelocitySetpoints::SharedCtor() {
  ::memset(&left_vel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&right_current_feedforward_) -
      reinterpret_cast<char*>(&left_vel_)) + sizeof(right_current_feedforward_));
}

MotorsVelocitySetpoints::~MotorsVelocitySetpoints() {
  // @@protoc_insertion_point(destructor:goldo.nucleo.propulsion.MotorsVelocitySetpoints)
  SharedDtor();
}

void MotorsVelocitySetpoints::SharedDtor() {
}

void MotorsVelocitySetpoints::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MotorsVelocitySetpoints::descriptor() {
  ::protobuf_goldo_2fnucleo_2fpropulsion_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2fnucleo_2fpropulsion_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MotorsVelocitySetpoints& MotorsVelocitySetpoints::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_goldo_2fnucleo_2fpropulsion_2eproto::scc_info_MotorsVelocitySetpoints.base);
  return *internal_default_instance();
}


void MotorsVelocitySetpoints::Clear() {
// @@protoc_insertion_point(message_clear_start:goldo.nucleo.propulsion.MotorsVelocitySetpoints)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&left_vel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&right_current_feedforward_) -
      reinterpret_cast<char*>(&left_vel_)) + sizeof(right_current_feedforward_));
  _internal_metadata_.Clear();
}

bool MotorsVelocitySetpoints::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:goldo.nucleo.propulsion.MotorsVelocitySetpoints)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float left_vel = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &left_vel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float right_vel = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &right_vel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float left_current_feedforward = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &left_current_feedforward_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float right_current_feedforward = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &right_current_feedforward_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:goldo.nucleo.propulsion.MotorsVelocitySetpoints)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:goldo.nucleo.propulsion.MotorsVelocitySetpoints)
  return false;
#undef DO_
}

void MotorsVelocitySetpoints::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:goldo.nucleo.propulsion.MotorsVelocitySetpoints)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float left_vel = 1;
  if (this->left_vel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->left_vel(), output);
  }

  // float right_vel = 2;
  if (this->right_vel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->right_vel(), output);
  }

  // float left_current_feedforward = 3;
  if (this->left_current_feedforward() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->left_current_feedforward(), output);
  }

  // float right_current_feedforward = 4;
  if (this->right_current_feedforward() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->right_current_feedforward(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:goldo.nucleo.propulsion.MotorsVelocitySetpoints)
}

::google::protobuf::uint8* MotorsVelocitySetpoints::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:goldo.nucleo.propulsion.MotorsVelocitySetpoints)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float left_vel = 1;
  if (this->left_vel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->left_vel(), target);
  }

  // float right_vel = 2;
  if (this->right_vel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->right_vel(), target);
  }

  // float left_current_feedforward = 3;
  if (this->left_current_feedforward() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->left_current_feedforward(), target);
  }

  // float right_current_feedforward = 4;
  if (this->right_current_feedforward() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->right_current_feedforward(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:goldo.nucleo.propulsion.MotorsVelocitySetpoints)
  return target;
}

size_t MotorsVelocitySetpoints::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:goldo.nucleo.propulsion.MotorsVelocitySetpoints)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float left_vel = 1;
  if (this->left_vel() != 0) {
    total_size += 1 + 4;
  }

  // float right_vel = 2;
  if (this->right_vel() != 0) {
    total_size += 1 + 4;
  }

  // float left_current_feedforward = 3;
  if (this->left_current_feedforward() != 0) {
    total_size += 1 + 4;
  }

  // float right_current_feedforward = 4;
  if (this->right_current_feedforward() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MotorsVelocitySetpoints::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:goldo.nucleo.propulsion.MotorsVelocitySetpoints)
  GOOGLE_DCHECK_NE(&from, this);
  const MotorsVelocitySetpoints* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MotorsVelocitySetpoints>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:goldo.nucleo.propulsion.MotorsVelocitySetpoints)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:goldo.nucleo.propulsion.MotorsVelocitySetpoints)
    MergeFrom(*source);
  }
}

void MotorsVelocitySetpoints::MergeFrom(const MotorsVelocitySetpoints& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:goldo.nucleo.propulsion.MotorsVelocitySetpoints)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.left_vel() != 0) {
    set_left_vel(from.left_vel());
  }
  if (from.right_vel() != 0) {
    set_right_vel(from.right_vel());
  }
  if (from.left_current_feedforward() != 0) {
    set_left_current_feedforward(from.left_current_feedforward());
  }
  if (from.right_current_feedforward() != 0) {
    set_right_current_feedforward(from.right_current_feedforward());
  }
}

void MotorsVelocitySetpoints::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:goldo.nucleo.propulsion.MotorsVelocitySetpoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MotorsVelocitySetpoints::CopyFrom(const MotorsVelocitySetpoints& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:goldo.nucleo.propulsion.MotorsVelocitySetpoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MotorsVelocitySetpoints::IsInitialized() const {
  return true;
}

void MotorsVelocitySetpoints::Swap(MotorsVelocitySetpoints* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MotorsVelocitySetpoints::InternalSwap(MotorsVelocitySetpoints* other) {
  using std::swap;
  swap(left_vel_, other->left_vel_);
  swap(right_vel_, other->right_vel_);
  swap(left_current_feedforward_, other->left_current_feedforward_);
  swap(right_current_feedforward_, other->right_current_feedforward_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MotorsVelocitySetpoints::GetMetadata() const {
  protobuf_goldo_2fnucleo_2fpropulsion_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2fnucleo_2fpropulsion_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OdometryConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OdometryConfig::kDistPerCountLeftFieldNumber;
const int OdometryConfig::kDistPerCountRightFieldNumber;
const int OdometryConfig::kWheelDistanceLeftFieldNumber;
const int OdometryConfig::kWheelDistanceRightFieldNumber;
const int OdometryConfig::kSpeedFilterFrequencyFieldNumber;
const int OdometryConfig::kAccelFilterFrequencyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OdometryConfig::OdometryConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_goldo_2fnucleo_2fpropulsion_2eproto::scc_info_OdometryConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:goldo.nucleo.propulsion.OdometryConfig)
}
OdometryConfig::OdometryConfig(const OdometryConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&dist_per_count_left_, &from.dist_per_count_left_,
    static_cast<size_t>(reinterpret_cast<char*>(&accel_filter_frequency_) -
    reinterpret_cast<char*>(&dist_per_count_left_)) + sizeof(accel_filter_frequency_));
  // @@protoc_insertion_point(copy_constructor:goldo.nucleo.propulsion.OdometryConfig)
}

void OdometryConfig::SharedCtor() {
  ::memset(&dist_per_count_left_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&accel_filter_frequency_) -
      reinterpret_cast<char*>(&dist_per_count_left_)) + sizeof(accel_filter_frequency_));
}

OdometryConfig::~OdometryConfig() {
  // @@protoc_insertion_point(destructor:goldo.nucleo.propulsion.OdometryConfig)
  SharedDtor();
}

void OdometryConfig::SharedDtor() {
}

void OdometryConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OdometryConfig::descriptor() {
  ::protobuf_goldo_2fnucleo_2fpropulsion_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2fnucleo_2fpropulsion_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OdometryConfig& OdometryConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_goldo_2fnucleo_2fpropulsion_2eproto::scc_info_OdometryConfig.base);
  return *internal_default_instance();
}


void OdometryConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:goldo.nucleo.propulsion.OdometryConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&dist_per_count_left_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&accel_filter_frequency_) -
      reinterpret_cast<char*>(&dist_per_count_left_)) + sizeof(accel_filter_frequency_));
  _internal_metadata_.Clear();
}

bool OdometryConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:goldo.nucleo.propulsion.OdometryConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float dist_per_count_left = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dist_per_count_left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float dist_per_count_right = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dist_per_count_right_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float wheel_distance_left = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &wheel_distance_left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float wheel_distance_right = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &wheel_distance_right_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float speed_filter_frequency = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_filter_frequency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float accel_filter_frequency = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &accel_filter_frequency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:goldo.nucleo.propulsion.OdometryConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:goldo.nucleo.propulsion.OdometryConfig)
  return false;
#undef DO_
}

void OdometryConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:goldo.nucleo.propulsion.OdometryConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float dist_per_count_left = 1;
  if (this->dist_per_count_left() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->dist_per_count_left(), output);
  }

  // float dist_per_count_right = 2;
  if (this->dist_per_count_right() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->dist_per_count_right(), output);
  }

  // float wheel_distance_left = 3;
  if (this->wheel_distance_left() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->wheel_distance_left(), output);
  }

  // float wheel_distance_right = 4;
  if (this->wheel_distance_right() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->wheel_distance_right(), output);
  }

  // float speed_filter_frequency = 5;
  if (this->speed_filter_frequency() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->speed_filter_frequency(), output);
  }

  // float accel_filter_frequency = 6;
  if (this->accel_filter_frequency() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->accel_filter_frequency(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:goldo.nucleo.propulsion.OdometryConfig)
}

::google::protobuf::uint8* OdometryConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:goldo.nucleo.propulsion.OdometryConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float dist_per_count_left = 1;
  if (this->dist_per_count_left() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->dist_per_count_left(), target);
  }

  // float dist_per_count_right = 2;
  if (this->dist_per_count_right() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->dist_per_count_right(), target);
  }

  // float wheel_distance_left = 3;
  if (this->wheel_distance_left() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->wheel_distance_left(), target);
  }

  // float wheel_distance_right = 4;
  if (this->wheel_distance_right() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->wheel_distance_right(), target);
  }

  // float speed_filter_frequency = 5;
  if (this->speed_filter_frequency() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->speed_filter_frequency(), target);
  }

  // float accel_filter_frequency = 6;
  if (this->accel_filter_frequency() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->accel_filter_frequency(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:goldo.nucleo.propulsion.OdometryConfig)
  return target;
}

size_t OdometryConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:goldo.nucleo.propulsion.OdometryConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float dist_per_count_left = 1;
  if (this->dist_per_count_left() != 0) {
    total_size += 1 + 4;
  }

  // float dist_per_count_right = 2;
  if (this->dist_per_count_right() != 0) {
    total_size += 1 + 4;
  }

  // float wheel_distance_left = 3;
  if (this->wheel_distance_left() != 0) {
    total_size += 1 + 4;
  }

  // float wheel_distance_right = 4;
  if (this->wheel_distance_right() != 0) {
    total_size += 1 + 4;
  }

  // float speed_filter_frequency = 5;
  if (this->speed_filter_frequency() != 0) {
    total_size += 1 + 4;
  }

  // float accel_filter_frequency = 6;
  if (this->accel_filter_frequency() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OdometryConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:goldo.nucleo.propulsion.OdometryConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const OdometryConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OdometryConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:goldo.nucleo.propulsion.OdometryConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:goldo.nucleo.propulsion.OdometryConfig)
    MergeFrom(*source);
  }
}

void OdometryConfig::MergeFrom(const OdometryConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:goldo.nucleo.propulsion.OdometryConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dist_per_count_left() != 0) {
    set_dist_per_count_left(from.dist_per_count_left());
  }
  if (from.dist_per_count_right() != 0) {
    set_dist_per_count_right(from.dist_per_count_right());
  }
  if (from.wheel_distance_left() != 0) {
    set_wheel_distance_left(from.wheel_distance_left());
  }
  if (from.wheel_distance_right() != 0) {
    set_wheel_distance_right(from.wheel_distance_right());
  }
  if (from.speed_filter_frequency() != 0) {
    set_speed_filter_frequency(from.speed_filter_frequency());
  }
  if (from.accel_filter_frequency() != 0) {
    set_accel_filter_frequency(from.accel_filter_frequency());
  }
}

void OdometryConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:goldo.nucleo.propulsion.OdometryConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OdometryConfig::CopyFrom(const OdometryConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:goldo.nucleo.propulsion.OdometryConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OdometryConfig::IsInitialized() const {
  return true;
}

void OdometryConfig::Swap(OdometryConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OdometryConfig::InternalSwap(OdometryConfig* other) {
  using std::swap;
  swap(dist_per_count_left_, other->dist_per_count_left_);
  swap(dist_per_count_right_, other->dist_per_count_right_);
  swap(wheel_distance_left_, other->wheel_distance_left_);
  swap(wheel_distance_right_, other->wheel_distance_right_);
  swap(speed_filter_frequency_, other->speed_filter_frequency_);
  swap(accel_filter_frequency_, other->accel_filter_frequency_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OdometryConfig::GetMetadata() const {
  protobuf_goldo_2fnucleo_2fpropulsion_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2fnucleo_2fpropulsion_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PIDConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PIDConfig::kKpFieldNumber;
const int PIDConfig::kKiFieldNumber;
const int PIDConfig::kKdFieldNumber;
const int PIDConfig::kLimIFieldNumber;
const int PIDConfig::kLimDFieldNumber;
const int PIDConfig::kDFilterFrequencyFieldNumber;
const int PIDConfig::kOutMinFieldNumber;
const int PIDConfig::kOutMaxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PIDConfig::PIDConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_goldo_2fnucleo_2fpropulsion_2eproto::scc_info_PIDConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:goldo.nucleo.propulsion.PIDConfig)
}
PIDConfig::PIDConfig(const PIDConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&kp_, &from.kp_,
    static_cast<size_t>(reinterpret_cast<char*>(&out_max_) -
    reinterpret_cast<char*>(&kp_)) + sizeof(out_max_));
  // @@protoc_insertion_point(copy_constructor:goldo.nucleo.propulsion.PIDConfig)
}

void PIDConfig::SharedCtor() {
  ::memset(&kp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&out_max_) -
      reinterpret_cast<char*>(&kp_)) + sizeof(out_max_));
}

PIDConfig::~PIDConfig() {
  // @@protoc_insertion_point(destructor:goldo.nucleo.propulsion.PIDConfig)
  SharedDtor();
}

void PIDConfig::SharedDtor() {
}

void PIDConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PIDConfig::descriptor() {
  ::protobuf_goldo_2fnucleo_2fpropulsion_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2fnucleo_2fpropulsion_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PIDConfig& PIDConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_goldo_2fnucleo_2fpropulsion_2eproto::scc_info_PIDConfig.base);
  return *internal_default_instance();
}


void PIDConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:goldo.nucleo.propulsion.PIDConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&kp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&out_max_) -
      reinterpret_cast<char*>(&kp_)) + sizeof(out_max_));
  _internal_metadata_.Clear();
}

bool PIDConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:goldo.nucleo.propulsion.PIDConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float kp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &kp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float ki = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ki_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float kd = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &kd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float lim_i = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lim_i_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float lim_d = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lim_d_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float d_filter_frequency = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &d_filter_frequency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float out_min = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &out_min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float out_max = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &out_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:goldo.nucleo.propulsion.PIDConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:goldo.nucleo.propulsion.PIDConfig)
  return false;
#undef DO_
}

void PIDConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:goldo.nucleo.propulsion.PIDConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float kp = 1;
  if (this->kp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->kp(), output);
  }

  // float ki = 2;
  if (this->ki() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->ki(), output);
  }

  // float kd = 3;
  if (this->kd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->kd(), output);
  }

  // float lim_i = 4;
  if (this->lim_i() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->lim_i(), output);
  }

  // float lim_d = 5;
  if (this->lim_d() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->lim_d(), output);
  }

  // float d_filter_frequency = 6;
  if (this->d_filter_frequency() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->d_filter_frequency(), output);
  }

  // float out_min = 7;
  if (this->out_min() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->out_min(), output);
  }

  // float out_max = 8;
  if (this->out_max() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->out_max(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:goldo.nucleo.propulsion.PIDConfig)
}

::google::protobuf::uint8* PIDConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:goldo.nucleo.propulsion.PIDConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float kp = 1;
  if (this->kp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->kp(), target);
  }

  // float ki = 2;
  if (this->ki() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->ki(), target);
  }

  // float kd = 3;
  if (this->kd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->kd(), target);
  }

  // float lim_i = 4;
  if (this->lim_i() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->lim_i(), target);
  }

  // float lim_d = 5;
  if (this->lim_d() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->lim_d(), target);
  }

  // float d_filter_frequency = 6;
  if (this->d_filter_frequency() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->d_filter_frequency(), target);
  }

  // float out_min = 7;
  if (this->out_min() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->out_min(), target);
  }

  // float out_max = 8;
  if (this->out_max() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->out_max(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:goldo.nucleo.propulsion.PIDConfig)
  return target;
}

size_t PIDConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:goldo.nucleo.propulsion.PIDConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float kp = 1;
  if (this->kp() != 0) {
    total_size += 1 + 4;
  }

  // float ki = 2;
  if (this->ki() != 0) {
    total_size += 1 + 4;
  }

  // float kd = 3;
  if (this->kd() != 0) {
    total_size += 1 + 4;
  }

  // float lim_i = 4;
  if (this->lim_i() != 0) {
    total_size += 1 + 4;
  }

  // float lim_d = 5;
  if (this->lim_d() != 0) {
    total_size += 1 + 4;
  }

  // float d_filter_frequency = 6;
  if (this->d_filter_frequency() != 0) {
    total_size += 1 + 4;
  }

  // float out_min = 7;
  if (this->out_min() != 0) {
    total_size += 1 + 4;
  }

  // float out_max = 8;
  if (this->out_max() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PIDConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:goldo.nucleo.propulsion.PIDConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const PIDConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PIDConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:goldo.nucleo.propulsion.PIDConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:goldo.nucleo.propulsion.PIDConfig)
    MergeFrom(*source);
  }
}

void PIDConfig::MergeFrom(const PIDConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:goldo.nucleo.propulsion.PIDConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.kp() != 0) {
    set_kp(from.kp());
  }
  if (from.ki() != 0) {
    set_ki(from.ki());
  }
  if (from.kd() != 0) {
    set_kd(from.kd());
  }
  if (from.lim_i() != 0) {
    set_lim_i(from.lim_i());
  }
  if (from.lim_d() != 0) {
    set_lim_d(from.lim_d());
  }
  if (from.d_filter_frequency() != 0) {
    set_d_filter_frequency(from.d_filter_frequency());
  }
  if (from.out_min() != 0) {
    set_out_min(from.out_min());
  }
  if (from.out_max() != 0) {
    set_out_max(from.out_max());
  }
}

void PIDConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:goldo.nucleo.propulsion.PIDConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PIDConfig::CopyFrom(const PIDConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:goldo.nucleo.propulsion.PIDConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PIDConfig::IsInitialized() const {
  return true;
}

void PIDConfig::Swap(PIDConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PIDConfig::InternalSwap(PIDConfig* other) {
  using std::swap;
  swap(kp_, other->kp_);
  swap(ki_, other->ki_);
  swap(kd_, other->kd_);
  swap(lim_i_, other->lim_i_);
  swap(lim_d_, other->lim_d_);
  swap(d_filter_frequency_, other->d_filter_frequency_);
  swap(out_min_, other->out_min_);
  swap(out_max_, other->out_max_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PIDConfig::GetMetadata() const {
  protobuf_goldo_2fnucleo_2fpropulsion_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2fnucleo_2fpropulsion_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PropulsionLowLevelPIDConfig::InitAsDefaultInstance() {
  ::goldo::nucleo::propulsion::_PropulsionLowLevelPIDConfig_default_instance_._instance.get_mutable()->speed_ = const_cast< ::goldo::nucleo::propulsion::PIDConfig*>(
      ::goldo::nucleo::propulsion::PIDConfig::internal_default_instance());
  ::goldo::nucleo::propulsion::_PropulsionLowLevelPIDConfig_default_instance_._instance.get_mutable()->longi_ = const_cast< ::goldo::nucleo::propulsion::PIDConfig*>(
      ::goldo::nucleo::propulsion::PIDConfig::internal_default_instance());
  ::goldo::nucleo::propulsion::_PropulsionLowLevelPIDConfig_default_instance_._instance.get_mutable()->yaw_rate_ = const_cast< ::goldo::nucleo::propulsion::PIDConfig*>(
      ::goldo::nucleo::propulsion::PIDConfig::internal_default_instance());
  ::goldo::nucleo::propulsion::_PropulsionLowLevelPIDConfig_default_instance_._instance.get_mutable()->yaw_ = const_cast< ::goldo::nucleo::propulsion::PIDConfig*>(
      ::goldo::nucleo::propulsion::PIDConfig::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PropulsionLowLevelPIDConfig::kSpeedFieldNumber;
const int PropulsionLowLevelPIDConfig::kLongiFieldNumber;
const int PropulsionLowLevelPIDConfig::kYawRateFieldNumber;
const int PropulsionLowLevelPIDConfig::kYawFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PropulsionLowLevelPIDConfig::PropulsionLowLevelPIDConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_goldo_2fnucleo_2fpropulsion_2eproto::scc_info_PropulsionLowLevelPIDConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:goldo.nucleo.propulsion.PropulsionLowLevelPIDConfig)
}
PropulsionLowLevelPIDConfig::PropulsionLowLevelPIDConfig(const PropulsionLowLevelPIDConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_speed()) {
    speed_ = new ::goldo::nucleo::propulsion::PIDConfig(*from.speed_);
  } else {
    speed_ = NULL;
  }
  if (from.has_longi()) {
    longi_ = new ::goldo::nucleo::propulsion::PIDConfig(*from.longi_);
  } else {
    longi_ = NULL;
  }
  if (from.has_yaw_rate()) {
    yaw_rate_ = new ::goldo::nucleo::propulsion::PIDConfig(*from.yaw_rate_);
  } else {
    yaw_rate_ = NULL;
  }
  if (from.has_yaw()) {
    yaw_ = new ::goldo::nucleo::propulsion::PIDConfig(*from.yaw_);
  } else {
    yaw_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:goldo.nucleo.propulsion.PropulsionLowLevelPIDConfig)
}

void PropulsionLowLevelPIDConfig::SharedCtor() {
  ::memset(&speed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yaw_) -
      reinterpret_cast<char*>(&speed_)) + sizeof(yaw_));
}

PropulsionLowLevelPIDConfig::~PropulsionLowLevelPIDConfig() {
  // @@protoc_insertion_point(destructor:goldo.nucleo.propulsion.PropulsionLowLevelPIDConfig)
  SharedDtor();
}

void PropulsionLowLevelPIDConfig::SharedDtor() {
  if (this != internal_default_instance()) delete speed_;
  if (this != internal_default_instance()) delete longi_;
  if (this != internal_default_instance()) delete yaw_rate_;
  if (this != internal_default_instance()) delete yaw_;
}

void PropulsionLowLevelPIDConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PropulsionLowLevelPIDConfig::descriptor() {
  ::protobuf_goldo_2fnucleo_2fpropulsion_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2fnucleo_2fpropulsion_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PropulsionLowLevelPIDConfig& PropulsionLowLevelPIDConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_goldo_2fnucleo_2fpropulsion_2eproto::scc_info_PropulsionLowLevelPIDConfig.base);
  return *internal_default_instance();
}


void PropulsionLowLevelPIDConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:goldo.nucleo.propulsion.PropulsionLowLevelPIDConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && speed_ != NULL) {
    delete speed_;
  }
  speed_ = NULL;
  if (GetArenaNoVirtual() == NULL && longi_ != NULL) {
    delete longi_;
  }
  longi_ = NULL;
  if (GetArenaNoVirtual() == NULL && yaw_rate_ != NULL) {
    delete yaw_rate_;
  }
  yaw_rate_ = NULL;
  if (GetArenaNoVirtual() == NULL && yaw_ != NULL) {
    delete yaw_;
  }
  yaw_ = NULL;
  _internal_metadata_.Clear();
}

bool PropulsionLowLevelPIDConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:goldo.nucleo.propulsion.PropulsionLowLevelPIDConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .goldo.nucleo.propulsion.PIDConfig speed = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_speed()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .goldo.nucleo.propulsion.PIDConfig longi = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_longi()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .goldo.nucleo.propulsion.PIDConfig yaw_rate = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_yaw_rate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .goldo.nucleo.propulsion.PIDConfig yaw = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_yaw()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:goldo.nucleo.propulsion.PropulsionLowLevelPIDConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:goldo.nucleo.propulsion.PropulsionLowLevelPIDConfig)
  return false;
#undef DO_
}

void PropulsionLowLevelPIDConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:goldo.nucleo.propulsion.PropulsionLowLevelPIDConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .goldo.nucleo.propulsion.PIDConfig speed = 1;
  if (this->has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_speed(), output);
  }

  // .goldo.nucleo.propulsion.PIDConfig longi = 2;
  if (this->has_longi()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_longi(), output);
  }

  // .goldo.nucleo.propulsion.PIDConfig yaw_rate = 3;
  if (this->has_yaw_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_yaw_rate(), output);
  }

  // .goldo.nucleo.propulsion.PIDConfig yaw = 4;
  if (this->has_yaw()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_yaw(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:goldo.nucleo.propulsion.PropulsionLowLevelPIDConfig)
}

::google::protobuf::uint8* PropulsionLowLevelPIDConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:goldo.nucleo.propulsion.PropulsionLowLevelPIDConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .goldo.nucleo.propulsion.PIDConfig speed = 1;
  if (this->has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_speed(), deterministic, target);
  }

  // .goldo.nucleo.propulsion.PIDConfig longi = 2;
  if (this->has_longi()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_longi(), deterministic, target);
  }

  // .goldo.nucleo.propulsion.PIDConfig yaw_rate = 3;
  if (this->has_yaw_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_yaw_rate(), deterministic, target);
  }

  // .goldo.nucleo.propulsion.PIDConfig yaw = 4;
  if (this->has_yaw()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_yaw(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:goldo.nucleo.propulsion.PropulsionLowLevelPIDConfig)
  return target;
}

size_t PropulsionLowLevelPIDConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:goldo.nucleo.propulsion.PropulsionLowLevelPIDConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .goldo.nucleo.propulsion.PIDConfig speed = 1;
  if (this->has_speed()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *speed_);
  }

  // .goldo.nucleo.propulsion.PIDConfig longi = 2;
  if (this->has_longi()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *longi_);
  }

  // .goldo.nucleo.propulsion.PIDConfig yaw_rate = 3;
  if (this->has_yaw_rate()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *yaw_rate_);
  }

  // .goldo.nucleo.propulsion.PIDConfig yaw = 4;
  if (this->has_yaw()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *yaw_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PropulsionLowLevelPIDConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:goldo.nucleo.propulsion.PropulsionLowLevelPIDConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const PropulsionLowLevelPIDConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PropulsionLowLevelPIDConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:goldo.nucleo.propulsion.PropulsionLowLevelPIDConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:goldo.nucleo.propulsion.PropulsionLowLevelPIDConfig)
    MergeFrom(*source);
  }
}

void PropulsionLowLevelPIDConfig::MergeFrom(const PropulsionLowLevelPIDConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:goldo.nucleo.propulsion.PropulsionLowLevelPIDConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_speed()) {
    mutable_speed()->::goldo::nucleo::propulsion::PIDConfig::MergeFrom(from.speed());
  }
  if (from.has_longi()) {
    mutable_longi()->::goldo::nucleo::propulsion::PIDConfig::MergeFrom(from.longi());
  }
  if (from.has_yaw_rate()) {
    mutable_yaw_rate()->::goldo::nucleo::propulsion::PIDConfig::MergeFrom(from.yaw_rate());
  }
  if (from.has_yaw()) {
    mutable_yaw()->::goldo::nucleo::propulsion::PIDConfig::MergeFrom(from.yaw());
  }
}

void PropulsionLowLevelPIDConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:goldo.nucleo.propulsion.PropulsionLowLevelPIDConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PropulsionLowLevelPIDConfig::CopyFrom(const PropulsionLowLevelPIDConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:goldo.nucleo.propulsion.PropulsionLowLevelPIDConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropulsionLowLevelPIDConfig::IsInitialized() const {
  return true;
}

void PropulsionLowLevelPIDConfig::Swap(PropulsionLowLevelPIDConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PropulsionLowLevelPIDConfig::InternalSwap(PropulsionLowLevelPIDConfig* other) {
  using std::swap;
  swap(speed_, other->speed_);
  swap(longi_, other->longi_);
  swap(yaw_rate_, other->yaw_rate_);
  swap(yaw_, other->yaw_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PropulsionLowLevelPIDConfig::GetMetadata() const {
  protobuf_goldo_2fnucleo_2fpropulsion_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2fnucleo_2fpropulsion_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PropulsionLowLevelControllerConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PropulsionLowLevelControllerConfig::kWheelsDistanceFieldNumber;
const int PropulsionLowLevelControllerConfig::kMotorsSpeedFactorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PropulsionLowLevelControllerConfig::PropulsionLowLevelControllerConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_goldo_2fnucleo_2fpropulsion_2eproto::scc_info_PropulsionLowLevelControllerConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:goldo.nucleo.propulsion.PropulsionLowLevelControllerConfig)
}
PropulsionLowLevelControllerConfig::PropulsionLowLevelControllerConfig(const PropulsionLowLevelControllerConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&wheels_distance_, &from.wheels_distance_,
    static_cast<size_t>(reinterpret_cast<char*>(&motors_speed_factor_) -
    reinterpret_cast<char*>(&wheels_distance_)) + sizeof(motors_speed_factor_));
  // @@protoc_insertion_point(copy_constructor:goldo.nucleo.propulsion.PropulsionLowLevelControllerConfig)
}

void PropulsionLowLevelControllerConfig::SharedCtor() {
  ::memset(&wheels_distance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&motors_speed_factor_) -
      reinterpret_cast<char*>(&wheels_distance_)) + sizeof(motors_speed_factor_));
}

PropulsionLowLevelControllerConfig::~PropulsionLowLevelControllerConfig() {
  // @@protoc_insertion_point(destructor:goldo.nucleo.propulsion.PropulsionLowLevelControllerConfig)
  SharedDtor();
}

void PropulsionLowLevelControllerConfig::SharedDtor() {
}

void PropulsionLowLevelControllerConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PropulsionLowLevelControllerConfig::descriptor() {
  ::protobuf_goldo_2fnucleo_2fpropulsion_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2fnucleo_2fpropulsion_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PropulsionLowLevelControllerConfig& PropulsionLowLevelControllerConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_goldo_2fnucleo_2fpropulsion_2eproto::scc_info_PropulsionLowLevelControllerConfig.base);
  return *internal_default_instance();
}


void PropulsionLowLevelControllerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:goldo.nucleo.propulsion.PropulsionLowLevelControllerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&wheels_distance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&motors_speed_factor_) -
      reinterpret_cast<char*>(&wheels_distance_)) + sizeof(motors_speed_factor_));
  _internal_metadata_.Clear();
}

bool PropulsionLowLevelControllerConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:goldo.nucleo.propulsion.PropulsionLowLevelControllerConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float wheels_distance = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &wheels_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float motors_speed_factor = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &motors_speed_factor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:goldo.nucleo.propulsion.PropulsionLowLevelControllerConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:goldo.nucleo.propulsion.PropulsionLowLevelControllerConfig)
  return false;
#undef DO_
}

void PropulsionLowLevelControllerConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:goldo.nucleo.propulsion.PropulsionLowLevelControllerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float wheels_distance = 1;
  if (this->wheels_distance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->wheels_distance(), output);
  }

  // float motors_speed_factor = 2;
  if (this->motors_speed_factor() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->motors_speed_factor(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:goldo.nucleo.propulsion.PropulsionLowLevelControllerConfig)
}

::google::protobuf::uint8* PropulsionLowLevelControllerConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:goldo.nucleo.propulsion.PropulsionLowLevelControllerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float wheels_distance = 1;
  if (this->wheels_distance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->wheels_distance(), target);
  }

  // float motors_speed_factor = 2;
  if (this->motors_speed_factor() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->motors_speed_factor(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:goldo.nucleo.propulsion.PropulsionLowLevelControllerConfig)
  return target;
}

size_t PropulsionLowLevelControllerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:goldo.nucleo.propulsion.PropulsionLowLevelControllerConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float wheels_distance = 1;
  if (this->wheels_distance() != 0) {
    total_size += 1 + 4;
  }

  // float motors_speed_factor = 2;
  if (this->motors_speed_factor() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PropulsionLowLevelControllerConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:goldo.nucleo.propulsion.PropulsionLowLevelControllerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const PropulsionLowLevelControllerConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PropulsionLowLevelControllerConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:goldo.nucleo.propulsion.PropulsionLowLevelControllerConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:goldo.nucleo.propulsion.PropulsionLowLevelControllerConfig)
    MergeFrom(*source);
  }
}

void PropulsionLowLevelControllerConfig::MergeFrom(const PropulsionLowLevelControllerConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:goldo.nucleo.propulsion.PropulsionLowLevelControllerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.wheels_distance() != 0) {
    set_wheels_distance(from.wheels_distance());
  }
  if (from.motors_speed_factor() != 0) {
    set_motors_speed_factor(from.motors_speed_factor());
  }
}

void PropulsionLowLevelControllerConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:goldo.nucleo.propulsion.PropulsionLowLevelControllerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PropulsionLowLevelControllerConfig::CopyFrom(const PropulsionLowLevelControllerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:goldo.nucleo.propulsion.PropulsionLowLevelControllerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropulsionLowLevelControllerConfig::IsInitialized() const {
  return true;
}

void PropulsionLowLevelControllerConfig::Swap(PropulsionLowLevelControllerConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PropulsionLowLevelControllerConfig::InternalSwap(PropulsionLowLevelControllerConfig* other) {
  using std::swap;
  swap(wheels_distance_, other->wheels_distance_);
  swap(motors_speed_factor_, other->motors_speed_factor_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PropulsionLowLevelControllerConfig::GetMetadata() const {
  protobuf_goldo_2fnucleo_2fpropulsion_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2fnucleo_2fpropulsion_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PropulsionControllerConfig::InitAsDefaultInstance() {
  ::goldo::nucleo::propulsion::_PropulsionControllerConfig_default_instance_._instance.get_mutable()->low_level_config_ = const_cast< ::goldo::nucleo::propulsion::PropulsionLowLevelControllerConfig*>(
      ::goldo::nucleo::propulsion::PropulsionLowLevelControllerConfig::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PropulsionControllerConfig::kLowLevelConfigFieldNumber;
const int PropulsionControllerConfig::kPidConfigsFieldNumber;
const int PropulsionControllerConfig::kLookaheadDistanceFieldNumber;
const int PropulsionControllerConfig::kLookaheadTimeFieldNumber;
const int PropulsionControllerConfig::kStaticMotorSpeedLimitFieldNumber;
const int PropulsionControllerConfig::kCruiseMotorSpeedLimitFieldNumber;
const int PropulsionControllerConfig::kRepositionMotorSpeedLimitFieldNumber;
const int PropulsionControllerConfig::kStaticTorqueLimitFieldNumber;
const int PropulsionControllerConfig::kCruiseTorqueLimitFieldNumber;
const int PropulsionControllerConfig::kRepositionTorqueLimitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PropulsionControllerConfig::PropulsionControllerConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_goldo_2fnucleo_2fpropulsion_2eproto::scc_info_PropulsionControllerConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:goldo.nucleo.propulsion.PropulsionControllerConfig)
}
PropulsionControllerConfig::PropulsionControllerConfig(const PropulsionControllerConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      pid_configs_(from.pid_configs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_low_level_config()) {
    low_level_config_ = new ::goldo::nucleo::propulsion::PropulsionLowLevelControllerConfig(*from.low_level_config_);
  } else {
    low_level_config_ = NULL;
  }
  ::memcpy(&lookahead_distance_, &from.lookahead_distance_,
    static_cast<size_t>(reinterpret_cast<char*>(&reposition_torque_limit_) -
    reinterpret_cast<char*>(&lookahead_distance_)) + sizeof(reposition_torque_limit_));
  // @@protoc_insertion_point(copy_constructor:goldo.nucleo.propulsion.PropulsionControllerConfig)
}

void PropulsionControllerConfig::SharedCtor() {
  ::memset(&low_level_config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reposition_torque_limit_) -
      reinterpret_cast<char*>(&low_level_config_)) + sizeof(reposition_torque_limit_));
}

PropulsionControllerConfig::~PropulsionControllerConfig() {
  // @@protoc_insertion_point(destructor:goldo.nucleo.propulsion.PropulsionControllerConfig)
  SharedDtor();
}

void PropulsionControllerConfig::SharedDtor() {
  if (this != internal_default_instance()) delete low_level_config_;
}

void PropulsionControllerConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PropulsionControllerConfig::descriptor() {
  ::protobuf_goldo_2fnucleo_2fpropulsion_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2fnucleo_2fpropulsion_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PropulsionControllerConfig& PropulsionControllerConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_goldo_2fnucleo_2fpropulsion_2eproto::scc_info_PropulsionControllerConfig.base);
  return *internal_default_instance();
}


void PropulsionControllerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:goldo.nucleo.propulsion.PropulsionControllerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pid_configs_.Clear();
  if (GetArenaNoVirtual() == NULL && low_level_config_ != NULL) {
    delete low_level_config_;
  }
  low_level_config_ = NULL;
  ::memset(&lookahead_distance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reposition_torque_limit_) -
      reinterpret_cast<char*>(&lookahead_distance_)) + sizeof(reposition_torque_limit_));
  _internal_metadata_.Clear();
}

bool PropulsionControllerConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:goldo.nucleo.propulsion.PropulsionControllerConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .goldo.nucleo.propulsion.PropulsionLowLevelControllerConfig low_level_config = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_low_level_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .goldo.nucleo.propulsion.PropulsionLowLevelPIDConfig pid_configs = 2 [(.goldo.pb2_options.max_count) = 4, (.goldo.pb2_options.fixed_count) = true];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_pid_configs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float lookahead_distance = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lookahead_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float lookahead_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lookahead_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float static_motor_speed_limit = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &static_motor_speed_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float cruise_motor_speed_limit = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cruise_motor_speed_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float reposition_motor_speed_limit = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &reposition_motor_speed_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float static_torque_limit = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &static_torque_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float cruise_torque_limit = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cruise_torque_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float reposition_torque_limit = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &reposition_torque_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:goldo.nucleo.propulsion.PropulsionControllerConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:goldo.nucleo.propulsion.PropulsionControllerConfig)
  return false;
#undef DO_
}

void PropulsionControllerConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:goldo.nucleo.propulsion.PropulsionControllerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .goldo.nucleo.propulsion.PropulsionLowLevelControllerConfig low_level_config = 1;
  if (this->has_low_level_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_low_level_config(), output);
  }

  // repeated .goldo.nucleo.propulsion.PropulsionLowLevelPIDConfig pid_configs = 2 [(.goldo.pb2_options.max_count) = 4, (.goldo.pb2_options.fixed_count) = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pid_configs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->pid_configs(static_cast<int>(i)),
      output);
  }

  // float lookahead_distance = 3;
  if (this->lookahead_distance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->lookahead_distance(), output);
  }

  // float lookahead_time = 4;
  if (this->lookahead_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->lookahead_time(), output);
  }

  // float static_motor_speed_limit = 5;
  if (this->static_motor_speed_limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->static_motor_speed_limit(), output);
  }

  // float cruise_motor_speed_limit = 6;
  if (this->cruise_motor_speed_limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->cruise_motor_speed_limit(), output);
  }

  // float reposition_motor_speed_limit = 7;
  if (this->reposition_motor_speed_limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->reposition_motor_speed_limit(), output);
  }

  // float static_torque_limit = 8;
  if (this->static_torque_limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->static_torque_limit(), output);
  }

  // float cruise_torque_limit = 9;
  if (this->cruise_torque_limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->cruise_torque_limit(), output);
  }

  // float reposition_torque_limit = 10;
  if (this->reposition_torque_limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->reposition_torque_limit(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:goldo.nucleo.propulsion.PropulsionControllerConfig)
}

::google::protobuf::uint8* PropulsionControllerConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:goldo.nucleo.propulsion.PropulsionControllerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .goldo.nucleo.propulsion.PropulsionLowLevelControllerConfig low_level_config = 1;
  if (this->has_low_level_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_low_level_config(), deterministic, target);
  }

  // repeated .goldo.nucleo.propulsion.PropulsionLowLevelPIDConfig pid_configs = 2 [(.goldo.pb2_options.max_count) = 4, (.goldo.pb2_options.fixed_count) = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pid_configs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->pid_configs(static_cast<int>(i)), deterministic, target);
  }

  // float lookahead_distance = 3;
  if (this->lookahead_distance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->lookahead_distance(), target);
  }

  // float lookahead_time = 4;
  if (this->lookahead_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->lookahead_time(), target);
  }

  // float static_motor_speed_limit = 5;
  if (this->static_motor_speed_limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->static_motor_speed_limit(), target);
  }

  // float cruise_motor_speed_limit = 6;
  if (this->cruise_motor_speed_limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->cruise_motor_speed_limit(), target);
  }

  // float reposition_motor_speed_limit = 7;
  if (this->reposition_motor_speed_limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->reposition_motor_speed_limit(), target);
  }

  // float static_torque_limit = 8;
  if (this->static_torque_limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->static_torque_limit(), target);
  }

  // float cruise_torque_limit = 9;
  if (this->cruise_torque_limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->cruise_torque_limit(), target);
  }

  // float reposition_torque_limit = 10;
  if (this->reposition_torque_limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->reposition_torque_limit(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:goldo.nucleo.propulsion.PropulsionControllerConfig)
  return target;
}

size_t PropulsionControllerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:goldo.nucleo.propulsion.PropulsionControllerConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .goldo.nucleo.propulsion.PropulsionLowLevelPIDConfig pid_configs = 2 [(.goldo.pb2_options.max_count) = 4, (.goldo.pb2_options.fixed_count) = true];
  {
    unsigned int count = static_cast<unsigned int>(this->pid_configs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->pid_configs(static_cast<int>(i)));
    }
  }

  // .goldo.nucleo.propulsion.PropulsionLowLevelControllerConfig low_level_config = 1;
  if (this->has_low_level_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *low_level_config_);
  }

  // float lookahead_distance = 3;
  if (this->lookahead_distance() != 0) {
    total_size += 1 + 4;
  }

  // float lookahead_time = 4;
  if (this->lookahead_time() != 0) {
    total_size += 1 + 4;
  }

  // float static_motor_speed_limit = 5;
  if (this->static_motor_speed_limit() != 0) {
    total_size += 1 + 4;
  }

  // float cruise_motor_speed_limit = 6;
  if (this->cruise_motor_speed_limit() != 0) {
    total_size += 1 + 4;
  }

  // float reposition_motor_speed_limit = 7;
  if (this->reposition_motor_speed_limit() != 0) {
    total_size += 1 + 4;
  }

  // float static_torque_limit = 8;
  if (this->static_torque_limit() != 0) {
    total_size += 1 + 4;
  }

  // float cruise_torque_limit = 9;
  if (this->cruise_torque_limit() != 0) {
    total_size += 1 + 4;
  }

  // float reposition_torque_limit = 10;
  if (this->reposition_torque_limit() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PropulsionControllerConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:goldo.nucleo.propulsion.PropulsionControllerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const PropulsionControllerConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PropulsionControllerConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:goldo.nucleo.propulsion.PropulsionControllerConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:goldo.nucleo.propulsion.PropulsionControllerConfig)
    MergeFrom(*source);
  }
}

void PropulsionControllerConfig::MergeFrom(const PropulsionControllerConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:goldo.nucleo.propulsion.PropulsionControllerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pid_configs_.MergeFrom(from.pid_configs_);
  if (from.has_low_level_config()) {
    mutable_low_level_config()->::goldo::nucleo::propulsion::PropulsionLowLevelControllerConfig::MergeFrom(from.low_level_config());
  }
  if (from.lookahead_distance() != 0) {
    set_lookahead_distance(from.lookahead_distance());
  }
  if (from.lookahead_time() != 0) {
    set_lookahead_time(from.lookahead_time());
  }
  if (from.static_motor_speed_limit() != 0) {
    set_static_motor_speed_limit(from.static_motor_speed_limit());
  }
  if (from.cruise_motor_speed_limit() != 0) {
    set_cruise_motor_speed_limit(from.cruise_motor_speed_limit());
  }
  if (from.reposition_motor_speed_limit() != 0) {
    set_reposition_motor_speed_limit(from.reposition_motor_speed_limit());
  }
  if (from.static_torque_limit() != 0) {
    set_static_torque_limit(from.static_torque_limit());
  }
  if (from.cruise_torque_limit() != 0) {
    set_cruise_torque_limit(from.cruise_torque_limit());
  }
  if (from.reposition_torque_limit() != 0) {
    set_reposition_torque_limit(from.reposition_torque_limit());
  }
}

void PropulsionControllerConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:goldo.nucleo.propulsion.PropulsionControllerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PropulsionControllerConfig::CopyFrom(const PropulsionControllerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:goldo.nucleo.propulsion.PropulsionControllerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropulsionControllerConfig::IsInitialized() const {
  return true;
}

void PropulsionControllerConfig::Swap(PropulsionControllerConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PropulsionControllerConfig::InternalSwap(PropulsionControllerConfig* other) {
  using std::swap;
  CastToBase(&pid_configs_)->InternalSwap(CastToBase(&other->pid_configs_));
  swap(low_level_config_, other->low_level_config_);
  swap(lookahead_distance_, other->lookahead_distance_);
  swap(lookahead_time_, other->lookahead_time_);
  swap(static_motor_speed_limit_, other->static_motor_speed_limit_);
  swap(cruise_motor_speed_limit_, other->cruise_motor_speed_limit_);
  swap(reposition_motor_speed_limit_, other->reposition_motor_speed_limit_);
  swap(static_torque_limit_, other->static_torque_limit_);
  swap(cruise_torque_limit_, other->cruise_torque_limit_);
  swap(reposition_torque_limit_, other->reposition_torque_limit_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PropulsionControllerConfig::GetMetadata() const {
  protobuf_goldo_2fnucleo_2fpropulsion_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2fnucleo_2fpropulsion_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PropulsionTaskConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PropulsionTaskConfig::kMotorControllerFieldNumber;
const int PropulsionTaskConfig::kUpdatePeriodMsFieldNumber;
const int PropulsionTaskConfig::kTelemetryPeriodMsFieldNumber;
const int PropulsionTaskConfig::kTelemetryExPeriodMsFieldNumber;
const int PropulsionTaskConfig::kPosePeriodMsFieldNumber;
const int PropulsionTaskConfig::kOdriveTelemetryPeriodMsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PropulsionTaskConfig::PropulsionTaskConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_goldo_2fnucleo_2fpropulsion_2eproto::scc_info_PropulsionTaskConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:goldo.nucleo.propulsion.PropulsionTaskConfig)
}
PropulsionTaskConfig::PropulsionTaskConfig(const PropulsionTaskConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&motor_controller_, &from.motor_controller_,
    static_cast<size_t>(reinterpret_cast<char*>(&odrive_telemetry_period_ms_) -
    reinterpret_cast<char*>(&motor_controller_)) + sizeof(odrive_telemetry_period_ms_));
  // @@protoc_insertion_point(copy_constructor:goldo.nucleo.propulsion.PropulsionTaskConfig)
}

void PropulsionTaskConfig::SharedCtor() {
  ::memset(&motor_controller_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&odrive_telemetry_period_ms_) -
      reinterpret_cast<char*>(&motor_controller_)) + sizeof(odrive_telemetry_period_ms_));
}

PropulsionTaskConfig::~PropulsionTaskConfig() {
  // @@protoc_insertion_point(destructor:goldo.nucleo.propulsion.PropulsionTaskConfig)
  SharedDtor();
}

void PropulsionTaskConfig::SharedDtor() {
}

void PropulsionTaskConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PropulsionTaskConfig::descriptor() {
  ::protobuf_goldo_2fnucleo_2fpropulsion_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2fnucleo_2fpropulsion_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PropulsionTaskConfig& PropulsionTaskConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_goldo_2fnucleo_2fpropulsion_2eproto::scc_info_PropulsionTaskConfig.base);
  return *internal_default_instance();
}


void PropulsionTaskConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:goldo.nucleo.propulsion.PropulsionTaskConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&motor_controller_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&odrive_telemetry_period_ms_) -
      reinterpret_cast<char*>(&motor_controller_)) + sizeof(odrive_telemetry_period_ms_));
  _internal_metadata_.Clear();
}

bool PropulsionTaskConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:goldo.nucleo.propulsion.PropulsionTaskConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .goldo.nucleo.propulsion.PropulsionTaskConfig.MotorControllerType motor_controller = 1 [(.goldo.pb2_options.cpp_type) = UINT8];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_motor_controller(static_cast< ::goldo::nucleo::propulsion::PropulsionTaskConfig_MotorControllerType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 update_period_ms = 2 [(.goldo.pb2_options.cpp_type) = UINT8];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &update_period_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 telemetry_period_ms = 3 [(.goldo.pb2_options.cpp_type) = UINT8];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &telemetry_period_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 telemetry_ex_period_ms = 4 [(.goldo.pb2_options.cpp_type) = UINT8];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &telemetry_ex_period_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 pose_period_ms = 5 [(.goldo.pb2_options.cpp_type) = UINT16];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pose_period_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 odrive_telemetry_period_ms = 6 [(.goldo.pb2_options.cpp_type) = UINT16];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &odrive_telemetry_period_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:goldo.nucleo.propulsion.PropulsionTaskConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:goldo.nucleo.propulsion.PropulsionTaskConfig)
  return false;
#undef DO_
}

void PropulsionTaskConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:goldo.nucleo.propulsion.PropulsionTaskConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .goldo.nucleo.propulsion.PropulsionTaskConfig.MotorControllerType motor_controller = 1 [(.goldo.pb2_options.cpp_type) = UINT8];
  if (this->motor_controller() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->motor_controller(), output);
  }

  // uint32 update_period_ms = 2 [(.goldo.pb2_options.cpp_type) = UINT8];
  if (this->update_period_ms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->update_period_ms(), output);
  }

  // uint32 telemetry_period_ms = 3 [(.goldo.pb2_options.cpp_type) = UINT8];
  if (this->telemetry_period_ms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->telemetry_period_ms(), output);
  }

  // uint32 telemetry_ex_period_ms = 4 [(.goldo.pb2_options.cpp_type) = UINT8];
  if (this->telemetry_ex_period_ms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->telemetry_ex_period_ms(), output);
  }

  // uint32 pose_period_ms = 5 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->pose_period_ms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->pose_period_ms(), output);
  }

  // uint32 odrive_telemetry_period_ms = 6 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->odrive_telemetry_period_ms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->odrive_telemetry_period_ms(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:goldo.nucleo.propulsion.PropulsionTaskConfig)
}

::google::protobuf::uint8* PropulsionTaskConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:goldo.nucleo.propulsion.PropulsionTaskConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .goldo.nucleo.propulsion.PropulsionTaskConfig.MotorControllerType motor_controller = 1 [(.goldo.pb2_options.cpp_type) = UINT8];
  if (this->motor_controller() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->motor_controller(), target);
  }

  // uint32 update_period_ms = 2 [(.goldo.pb2_options.cpp_type) = UINT8];
  if (this->update_period_ms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->update_period_ms(), target);
  }

  // uint32 telemetry_period_ms = 3 [(.goldo.pb2_options.cpp_type) = UINT8];
  if (this->telemetry_period_ms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->telemetry_period_ms(), target);
  }

  // uint32 telemetry_ex_period_ms = 4 [(.goldo.pb2_options.cpp_type) = UINT8];
  if (this->telemetry_ex_period_ms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->telemetry_ex_period_ms(), target);
  }

  // uint32 pose_period_ms = 5 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->pose_period_ms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->pose_period_ms(), target);
  }

  // uint32 odrive_telemetry_period_ms = 6 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->odrive_telemetry_period_ms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->odrive_telemetry_period_ms(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:goldo.nucleo.propulsion.PropulsionTaskConfig)
  return target;
}

size_t PropulsionTaskConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:goldo.nucleo.propulsion.PropulsionTaskConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .goldo.nucleo.propulsion.PropulsionTaskConfig.MotorControllerType motor_controller = 1 [(.goldo.pb2_options.cpp_type) = UINT8];
  if (this->motor_controller() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->motor_controller());
  }

  // uint32 update_period_ms = 2 [(.goldo.pb2_options.cpp_type) = UINT8];
  if (this->update_period_ms() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->update_period_ms());
  }

  // uint32 telemetry_period_ms = 3 [(.goldo.pb2_options.cpp_type) = UINT8];
  if (this->telemetry_period_ms() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->telemetry_period_ms());
  }

  // uint32 telemetry_ex_period_ms = 4 [(.goldo.pb2_options.cpp_type) = UINT8];
  if (this->telemetry_ex_period_ms() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->telemetry_ex_period_ms());
  }

  // uint32 pose_period_ms = 5 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->pose_period_ms() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pose_period_ms());
  }

  // uint32 odrive_telemetry_period_ms = 6 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->odrive_telemetry_period_ms() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->odrive_telemetry_period_ms());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PropulsionTaskConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:goldo.nucleo.propulsion.PropulsionTaskConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const PropulsionTaskConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PropulsionTaskConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:goldo.nucleo.propulsion.PropulsionTaskConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:goldo.nucleo.propulsion.PropulsionTaskConfig)
    MergeFrom(*source);
  }
}

void PropulsionTaskConfig::MergeFrom(const PropulsionTaskConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:goldo.nucleo.propulsion.PropulsionTaskConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.motor_controller() != 0) {
    set_motor_controller(from.motor_controller());
  }
  if (from.update_period_ms() != 0) {
    set_update_period_ms(from.update_period_ms());
  }
  if (from.telemetry_period_ms() != 0) {
    set_telemetry_period_ms(from.telemetry_period_ms());
  }
  if (from.telemetry_ex_period_ms() != 0) {
    set_telemetry_ex_period_ms(from.telemetry_ex_period_ms());
  }
  if (from.pose_period_ms() != 0) {
    set_pose_period_ms(from.pose_period_ms());
  }
  if (from.odrive_telemetry_period_ms() != 0) {
    set_odrive_telemetry_period_ms(from.odrive_telemetry_period_ms());
  }
}

void PropulsionTaskConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:goldo.nucleo.propulsion.PropulsionTaskConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PropulsionTaskConfig::CopyFrom(const PropulsionTaskConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:goldo.nucleo.propulsion.PropulsionTaskConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropulsionTaskConfig::IsInitialized() const {
  return true;
}

void PropulsionTaskConfig::Swap(PropulsionTaskConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PropulsionTaskConfig::InternalSwap(PropulsionTaskConfig* other) {
  using std::swap;
  swap(motor_controller_, other->motor_controller_);
  swap(update_period_ms_, other->update_period_ms_);
  swap(telemetry_period_ms_, other->telemetry_period_ms_);
  swap(telemetry_ex_period_ms_, other->telemetry_ex_period_ms_);
  swap(pose_period_ms_, other->pose_period_ms_);
  swap(odrive_telemetry_period_ms_, other->odrive_telemetry_period_ms_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PropulsionTaskConfig::GetMetadata() const {
  protobuf_goldo_2fnucleo_2fpropulsion_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2fnucleo_2fpropulsion_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CommandStatus::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CommandStatus::kTimestampFieldNumber;
const int CommandStatus::kSequenceNumberFieldNumber;
const int CommandStatus::kStatusFieldNumber;
const int CommandStatus::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CommandStatus::CommandStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_goldo_2fnucleo_2fpropulsion_2eproto::scc_info_CommandStatus.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:goldo.nucleo.propulsion.CommandStatus)
}
CommandStatus::CommandStatus(const CommandStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&error_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(error_));
  // @@protoc_insertion_point(copy_constructor:goldo.nucleo.propulsion.CommandStatus)
}

void CommandStatus::SharedCtor() {
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(error_));
}

CommandStatus::~CommandStatus() {
  // @@protoc_insertion_point(destructor:goldo.nucleo.propulsion.CommandStatus)
  SharedDtor();
}

void CommandStatus::SharedDtor() {
}

void CommandStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CommandStatus::descriptor() {
  ::protobuf_goldo_2fnucleo_2fpropulsion_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2fnucleo_2fpropulsion_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CommandStatus& CommandStatus::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_goldo_2fnucleo_2fpropulsion_2eproto::scc_info_CommandStatus.base);
  return *internal_default_instance();
}


void CommandStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:goldo.nucleo.propulsion.CommandStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(error_));
  _internal_metadata_.Clear();
}

bool CommandStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:goldo.nucleo.propulsion.CommandStatus)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 timestamp = 1 [(.goldo.pb2_options.cpp_type) = UINT32];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 sequence_number = 2 [(.goldo.pb2_options.cpp_type) = UINT16];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sequence_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 status = 3 [(.goldo.pb2_options.cpp_type) = UINT8];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 error = 4 [(.goldo.pb2_options.cpp_type) = UINT8];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:goldo.nucleo.propulsion.CommandStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:goldo.nucleo.propulsion.CommandStatus)
  return false;
#undef DO_
}

void CommandStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:goldo.nucleo.propulsion.CommandStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 timestamp = 1 [(.goldo.pb2_options.cpp_type) = UINT32];
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->timestamp(), output);
  }

  // uint32 sequence_number = 2 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->sequence_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sequence_number(), output);
  }

  // int32 status = 3 [(.goldo.pb2_options.cpp_type) = UINT8];
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->status(), output);
  }

  // int32 error = 4 [(.goldo.pb2_options.cpp_type) = UINT8];
  if (this->error() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->error(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:goldo.nucleo.propulsion.CommandStatus)
}

::google::protobuf::uint8* CommandStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:goldo.nucleo.propulsion.CommandStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 timestamp = 1 [(.goldo.pb2_options.cpp_type) = UINT32];
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->timestamp(), target);
  }

  // uint32 sequence_number = 2 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->sequence_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sequence_number(), target);
  }

  // int32 status = 3 [(.goldo.pb2_options.cpp_type) = UINT8];
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->status(), target);
  }

  // int32 error = 4 [(.goldo.pb2_options.cpp_type) = UINT8];
  if (this->error() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->error(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:goldo.nucleo.propulsion.CommandStatus)
  return target;
}

size_t CommandStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:goldo.nucleo.propulsion.CommandStatus)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 timestamp = 1 [(.goldo.pb2_options.cpp_type) = UINT32];
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->timestamp());
  }

  // uint32 sequence_number = 2 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->sequence_number() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sequence_number());
  }

  // int32 status = 3 [(.goldo.pb2_options.cpp_type) = UINT8];
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->status());
  }

  // int32 error = 4 [(.goldo.pb2_options.cpp_type) = UINT8];
  if (this->error() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->error());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:goldo.nucleo.propulsion.CommandStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CommandStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:goldo.nucleo.propulsion.CommandStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:goldo.nucleo.propulsion.CommandStatus)
    MergeFrom(*source);
  }
}

void CommandStatus::MergeFrom(const CommandStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:goldo.nucleo.propulsion.CommandStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.sequence_number() != 0) {
    set_sequence_number(from.sequence_number());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.error() != 0) {
    set_error(from.error());
  }
}

void CommandStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:goldo.nucleo.propulsion.CommandStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandStatus::CopyFrom(const CommandStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:goldo.nucleo.propulsion.CommandStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandStatus::IsInitialized() const {
  return true;
}

void CommandStatus::Swap(CommandStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CommandStatus::InternalSwap(CommandStatus* other) {
  using std::swap;
  swap(timestamp_, other->timestamp_);
  swap(sequence_number_, other->sequence_number_);
  swap(status_, other->status_);
  swap(error_, other->error_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CommandStatus::GetMetadata() const {
  protobuf_goldo_2fnucleo_2fpropulsion_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2fnucleo_2fpropulsion_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SetMotorsTorqueLimits::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetMotorsTorqueLimits::kSequenceNumberFieldNumber;
const int SetMotorsTorqueLimits::kLeftFieldNumber;
const int SetMotorsTorqueLimits::kRightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetMotorsTorqueLimits::SetMotorsTorqueLimits()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_goldo_2fnucleo_2fpropulsion_2eproto::scc_info_SetMotorsTorqueLimits.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:goldo.nucleo.propulsion.SetMotorsTorqueLimits)
}
SetMotorsTorqueLimits::SetMotorsTorqueLimits(const SetMotorsTorqueLimits& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&sequence_number_, &from.sequence_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&right_) -
    reinterpret_cast<char*>(&sequence_number_)) + sizeof(right_));
  // @@protoc_insertion_point(copy_constructor:goldo.nucleo.propulsion.SetMotorsTorqueLimits)
}

void SetMotorsTorqueLimits::SharedCtor() {
  ::memset(&sequence_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&right_) -
      reinterpret_cast<char*>(&sequence_number_)) + sizeof(right_));
}

SetMotorsTorqueLimits::~SetMotorsTorqueLimits() {
  // @@protoc_insertion_point(destructor:goldo.nucleo.propulsion.SetMotorsTorqueLimits)
  SharedDtor();
}

void SetMotorsTorqueLimits::SharedDtor() {
}

void SetMotorsTorqueLimits::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SetMotorsTorqueLimits::descriptor() {
  ::protobuf_goldo_2fnucleo_2fpropulsion_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2fnucleo_2fpropulsion_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SetMotorsTorqueLimits& SetMotorsTorqueLimits::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_goldo_2fnucleo_2fpropulsion_2eproto::scc_info_SetMotorsTorqueLimits.base);
  return *internal_default_instance();
}


void SetMotorsTorqueLimits::Clear() {
// @@protoc_insertion_point(message_clear_start:goldo.nucleo.propulsion.SetMotorsTorqueLimits)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&sequence_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&right_) -
      reinterpret_cast<char*>(&sequence_number_)) + sizeof(right_));
  _internal_metadata_.Clear();
}

bool SetMotorsTorqueLimits::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:goldo.nucleo.propulsion.SetMotorsTorqueLimits)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 sequence_number = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sequence_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float left = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float right = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &right_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:goldo.nucleo.propulsion.SetMotorsTorqueLimits)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:goldo.nucleo.propulsion.SetMotorsTorqueLimits)
  return false;
#undef DO_
}

void SetMotorsTorqueLimits::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:goldo.nucleo.propulsion.SetMotorsTorqueLimits)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sequence_number = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->sequence_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sequence_number(), output);
  }

  // float left = 2;
  if (this->left() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->left(), output);
  }

  // float right = 3;
  if (this->right() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->right(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:goldo.nucleo.propulsion.SetMotorsTorqueLimits)
}

::google::protobuf::uint8* SetMotorsTorqueLimits::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:goldo.nucleo.propulsion.SetMotorsTorqueLimits)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sequence_number = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->sequence_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sequence_number(), target);
  }

  // float left = 2;
  if (this->left() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->left(), target);
  }

  // float right = 3;
  if (this->right() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->right(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:goldo.nucleo.propulsion.SetMotorsTorqueLimits)
  return target;
}

size_t SetMotorsTorqueLimits::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:goldo.nucleo.propulsion.SetMotorsTorqueLimits)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 sequence_number = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->sequence_number() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sequence_number());
  }

  // float left = 2;
  if (this->left() != 0) {
    total_size += 1 + 4;
  }

  // float right = 3;
  if (this->right() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetMotorsTorqueLimits::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:goldo.nucleo.propulsion.SetMotorsTorqueLimits)
  GOOGLE_DCHECK_NE(&from, this);
  const SetMotorsTorqueLimits* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SetMotorsTorqueLimits>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:goldo.nucleo.propulsion.SetMotorsTorqueLimits)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:goldo.nucleo.propulsion.SetMotorsTorqueLimits)
    MergeFrom(*source);
  }
}

void SetMotorsTorqueLimits::MergeFrom(const SetMotorsTorqueLimits& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:goldo.nucleo.propulsion.SetMotorsTorqueLimits)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sequence_number() != 0) {
    set_sequence_number(from.sequence_number());
  }
  if (from.left() != 0) {
    set_left(from.left());
  }
  if (from.right() != 0) {
    set_right(from.right());
  }
}

void SetMotorsTorqueLimits::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:goldo.nucleo.propulsion.SetMotorsTorqueLimits)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetMotorsTorqueLimits::CopyFrom(const SetMotorsTorqueLimits& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:goldo.nucleo.propulsion.SetMotorsTorqueLimits)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetMotorsTorqueLimits::IsInitialized() const {
  return true;
}

void SetMotorsTorqueLimits::Swap(SetMotorsTorqueLimits* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetMotorsTorqueLimits::InternalSwap(SetMotorsTorqueLimits* other) {
  using std::swap;
  swap(sequence_number_, other->sequence_number_);
  swap(left_, other->left_);
  swap(right_, other->right_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SetMotorsTorqueLimits::GetMetadata() const {
  protobuf_goldo_2fnucleo_2fpropulsion_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2fnucleo_2fpropulsion_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CmdEmpty::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CmdEmpty::kSequenceNumberFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CmdEmpty::CmdEmpty()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_goldo_2fnucleo_2fpropulsion_2eproto::scc_info_CmdEmpty.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:goldo.nucleo.propulsion.CmdEmpty)
}
CmdEmpty::CmdEmpty(const CmdEmpty& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sequence_number_ = from.sequence_number_;
  // @@protoc_insertion_point(copy_constructor:goldo.nucleo.propulsion.CmdEmpty)
}

void CmdEmpty::SharedCtor() {
  sequence_number_ = 0;
}

CmdEmpty::~CmdEmpty() {
  // @@protoc_insertion_point(destructor:goldo.nucleo.propulsion.CmdEmpty)
  SharedDtor();
}

void CmdEmpty::SharedDtor() {
}

void CmdEmpty::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CmdEmpty::descriptor() {
  ::protobuf_goldo_2fnucleo_2fpropulsion_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2fnucleo_2fpropulsion_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CmdEmpty& CmdEmpty::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_goldo_2fnucleo_2fpropulsion_2eproto::scc_info_CmdEmpty.base);
  return *internal_default_instance();
}


void CmdEmpty::Clear() {
// @@protoc_insertion_point(message_clear_start:goldo.nucleo.propulsion.CmdEmpty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sequence_number_ = 0;
  _internal_metadata_.Clear();
}

bool CmdEmpty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:goldo.nucleo.propulsion.CmdEmpty)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 sequence_number = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sequence_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:goldo.nucleo.propulsion.CmdEmpty)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:goldo.nucleo.propulsion.CmdEmpty)
  return false;
#undef DO_
}

void CmdEmpty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:goldo.nucleo.propulsion.CmdEmpty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sequence_number = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->sequence_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sequence_number(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:goldo.nucleo.propulsion.CmdEmpty)
}

::google::protobuf::uint8* CmdEmpty::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:goldo.nucleo.propulsion.CmdEmpty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sequence_number = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->sequence_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sequence_number(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:goldo.nucleo.propulsion.CmdEmpty)
  return target;
}

size_t CmdEmpty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:goldo.nucleo.propulsion.CmdEmpty)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 sequence_number = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->sequence_number() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sequence_number());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CmdEmpty::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:goldo.nucleo.propulsion.CmdEmpty)
  GOOGLE_DCHECK_NE(&from, this);
  const CmdEmpty* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CmdEmpty>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:goldo.nucleo.propulsion.CmdEmpty)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:goldo.nucleo.propulsion.CmdEmpty)
    MergeFrom(*source);
  }
}

void CmdEmpty::MergeFrom(const CmdEmpty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:goldo.nucleo.propulsion.CmdEmpty)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sequence_number() != 0) {
    set_sequence_number(from.sequence_number());
  }
}

void CmdEmpty::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:goldo.nucleo.propulsion.CmdEmpty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdEmpty::CopyFrom(const CmdEmpty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:goldo.nucleo.propulsion.CmdEmpty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdEmpty::IsInitialized() const {
  return true;
}

void CmdEmpty::Swap(CmdEmpty* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CmdEmpty::InternalSwap(CmdEmpty* other) {
  using std::swap;
  swap(sequence_number_, other->sequence_number_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CmdEmpty::GetMetadata() const {
  protobuf_goldo_2fnucleo_2fpropulsion_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2fnucleo_2fpropulsion_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CmdSetEnable::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CmdSetEnable::kSequenceNumberFieldNumber;
const int CmdSetEnable::kEnableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CmdSetEnable::CmdSetEnable()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_goldo_2fnucleo_2fpropulsion_2eproto::scc_info_CmdSetEnable.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:goldo.nucleo.propulsion.CmdSetEnable)
}
CmdSetEnable::CmdSetEnable(const CmdSetEnable& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&sequence_number_, &from.sequence_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&enable_) -
    reinterpret_cast<char*>(&sequence_number_)) + sizeof(enable_));
  // @@protoc_insertion_point(copy_constructor:goldo.nucleo.propulsion.CmdSetEnable)
}

void CmdSetEnable::SharedCtor() {
  ::memset(&sequence_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enable_) -
      reinterpret_cast<char*>(&sequence_number_)) + sizeof(enable_));
}

CmdSetEnable::~CmdSetEnable() {
  // @@protoc_insertion_point(destructor:goldo.nucleo.propulsion.CmdSetEnable)
  SharedDtor();
}

void CmdSetEnable::SharedDtor() {
}

void CmdSetEnable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CmdSetEnable::descriptor() {
  ::protobuf_goldo_2fnucleo_2fpropulsion_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2fnucleo_2fpropulsion_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CmdSetEnable& CmdSetEnable::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_goldo_2fnucleo_2fpropulsion_2eproto::scc_info_CmdSetEnable.base);
  return *internal_default_instance();
}


void CmdSetEnable::Clear() {
// @@protoc_insertion_point(message_clear_start:goldo.nucleo.propulsion.CmdSetEnable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&sequence_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enable_) -
      reinterpret_cast<char*>(&sequence_number_)) + sizeof(enable_));
  _internal_metadata_.Clear();
}

bool CmdSetEnable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:goldo.nucleo.propulsion.CmdSetEnable)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 sequence_number = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sequence_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool enable = 2 [(.goldo.pb2_options.cpp_type) = UINT8];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:goldo.nucleo.propulsion.CmdSetEnable)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:goldo.nucleo.propulsion.CmdSetEnable)
  return false;
#undef DO_
}

void CmdSetEnable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:goldo.nucleo.propulsion.CmdSetEnable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sequence_number = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->sequence_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sequence_number(), output);
  }

  // bool enable = 2 [(.goldo.pb2_options.cpp_type) = UINT8];
  if (this->enable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->enable(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:goldo.nucleo.propulsion.CmdSetEnable)
}

::google::protobuf::uint8* CmdSetEnable::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:goldo.nucleo.propulsion.CmdSetEnable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sequence_number = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->sequence_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sequence_number(), target);
  }

  // bool enable = 2 [(.goldo.pb2_options.cpp_type) = UINT8];
  if (this->enable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->enable(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:goldo.nucleo.propulsion.CmdSetEnable)
  return target;
}

size_t CmdSetEnable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:goldo.nucleo.propulsion.CmdSetEnable)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 sequence_number = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->sequence_number() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sequence_number());
  }

  // bool enable = 2 [(.goldo.pb2_options.cpp_type) = UINT8];
  if (this->enable() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CmdSetEnable::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:goldo.nucleo.propulsion.CmdSetEnable)
  GOOGLE_DCHECK_NE(&from, this);
  const CmdSetEnable* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CmdSetEnable>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:goldo.nucleo.propulsion.CmdSetEnable)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:goldo.nucleo.propulsion.CmdSetEnable)
    MergeFrom(*source);
  }
}

void CmdSetEnable::MergeFrom(const CmdSetEnable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:goldo.nucleo.propulsion.CmdSetEnable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sequence_number() != 0) {
    set_sequence_number(from.sequence_number());
  }
  if (from.enable() != 0) {
    set_enable(from.enable());
  }
}

void CmdSetEnable::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:goldo.nucleo.propulsion.CmdSetEnable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdSetEnable::CopyFrom(const CmdSetEnable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:goldo.nucleo.propulsion.CmdSetEnable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdSetEnable::IsInitialized() const {
  return true;
}

void CmdSetEnable::Swap(CmdSetEnable* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CmdSetEnable::InternalSwap(CmdSetEnable* other) {
  using std::swap;
  swap(sequence_number_, other->sequence_number_);
  swap(enable_, other->enable_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CmdSetEnable::GetMetadata() const {
  protobuf_goldo_2fnucleo_2fpropulsion_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2fnucleo_2fpropulsion_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CmdSetAccelerationLimits::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CmdSetAccelerationLimits::kSequenceNumberFieldNumber;
const int CmdSetAccelerationLimits::kAccelFieldNumber;
const int CmdSetAccelerationLimits::kDeccelFieldNumber;
const int CmdSetAccelerationLimits::kAngularAccelFieldNumber;
const int CmdSetAccelerationLimits::kAngularDeccelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CmdSetAccelerationLimits::CmdSetAccelerationLimits()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_goldo_2fnucleo_2fpropulsion_2eproto::scc_info_CmdSetAccelerationLimits.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:goldo.nucleo.propulsion.CmdSetAccelerationLimits)
}
CmdSetAccelerationLimits::CmdSetAccelerationLimits(const CmdSetAccelerationLimits& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&sequence_number_, &from.sequence_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&angular_deccel_) -
    reinterpret_cast<char*>(&sequence_number_)) + sizeof(angular_deccel_));
  // @@protoc_insertion_point(copy_constructor:goldo.nucleo.propulsion.CmdSetAccelerationLimits)
}

void CmdSetAccelerationLimits::SharedCtor() {
  ::memset(&sequence_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&angular_deccel_) -
      reinterpret_cast<char*>(&sequence_number_)) + sizeof(angular_deccel_));
}

CmdSetAccelerationLimits::~CmdSetAccelerationLimits() {
  // @@protoc_insertion_point(destructor:goldo.nucleo.propulsion.CmdSetAccelerationLimits)
  SharedDtor();
}

void CmdSetAccelerationLimits::SharedDtor() {
}

void CmdSetAccelerationLimits::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CmdSetAccelerationLimits::descriptor() {
  ::protobuf_goldo_2fnucleo_2fpropulsion_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2fnucleo_2fpropulsion_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CmdSetAccelerationLimits& CmdSetAccelerationLimits::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_goldo_2fnucleo_2fpropulsion_2eproto::scc_info_CmdSetAccelerationLimits.base);
  return *internal_default_instance();
}


void CmdSetAccelerationLimits::Clear() {
// @@protoc_insertion_point(message_clear_start:goldo.nucleo.propulsion.CmdSetAccelerationLimits)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&sequence_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&angular_deccel_) -
      reinterpret_cast<char*>(&sequence_number_)) + sizeof(angular_deccel_));
  _internal_metadata_.Clear();
}

bool CmdSetAccelerationLimits::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:goldo.nucleo.propulsion.CmdSetAccelerationLimits)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 sequence_number = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sequence_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float accel = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &accel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float deccel = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &deccel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float angular_accel = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angular_accel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float angular_deccel = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angular_deccel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:goldo.nucleo.propulsion.CmdSetAccelerationLimits)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:goldo.nucleo.propulsion.CmdSetAccelerationLimits)
  return false;
#undef DO_
}

void CmdSetAccelerationLimits::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:goldo.nucleo.propulsion.CmdSetAccelerationLimits)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sequence_number = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->sequence_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sequence_number(), output);
  }

  // float accel = 2;
  if (this->accel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->accel(), output);
  }

  // float deccel = 3;
  if (this->deccel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->deccel(), output);
  }

  // float angular_accel = 4;
  if (this->angular_accel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->angular_accel(), output);
  }

  // float angular_deccel = 5;
  if (this->angular_deccel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->angular_deccel(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:goldo.nucleo.propulsion.CmdSetAccelerationLimits)
}

::google::protobuf::uint8* CmdSetAccelerationLimits::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:goldo.nucleo.propulsion.CmdSetAccelerationLimits)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sequence_number = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->sequence_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sequence_number(), target);
  }

  // float accel = 2;
  if (this->accel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->accel(), target);
  }

  // float deccel = 3;
  if (this->deccel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->deccel(), target);
  }

  // float angular_accel = 4;
  if (this->angular_accel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->angular_accel(), target);
  }

  // float angular_deccel = 5;
  if (this->angular_deccel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->angular_deccel(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:goldo.nucleo.propulsion.CmdSetAccelerationLimits)
  return target;
}

size_t CmdSetAccelerationLimits::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:goldo.nucleo.propulsion.CmdSetAccelerationLimits)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 sequence_number = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->sequence_number() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sequence_number());
  }

  // float accel = 2;
  if (this->accel() != 0) {
    total_size += 1 + 4;
  }

  // float deccel = 3;
  if (this->deccel() != 0) {
    total_size += 1 + 4;
  }

  // float angular_accel = 4;
  if (this->angular_accel() != 0) {
    total_size += 1 + 4;
  }

  // float angular_deccel = 5;
  if (this->angular_deccel() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CmdSetAccelerationLimits::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:goldo.nucleo.propulsion.CmdSetAccelerationLimits)
  GOOGLE_DCHECK_NE(&from, this);
  const CmdSetAccelerationLimits* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CmdSetAccelerationLimits>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:goldo.nucleo.propulsion.CmdSetAccelerationLimits)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:goldo.nucleo.propulsion.CmdSetAccelerationLimits)
    MergeFrom(*source);
  }
}

void CmdSetAccelerationLimits::MergeFrom(const CmdSetAccelerationLimits& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:goldo.nucleo.propulsion.CmdSetAccelerationLimits)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sequence_number() != 0) {
    set_sequence_number(from.sequence_number());
  }
  if (from.accel() != 0) {
    set_accel(from.accel());
  }
  if (from.deccel() != 0) {
    set_deccel(from.deccel());
  }
  if (from.angular_accel() != 0) {
    set_angular_accel(from.angular_accel());
  }
  if (from.angular_deccel() != 0) {
    set_angular_deccel(from.angular_deccel());
  }
}

void CmdSetAccelerationLimits::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:goldo.nucleo.propulsion.CmdSetAccelerationLimits)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdSetAccelerationLimits::CopyFrom(const CmdSetAccelerationLimits& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:goldo.nucleo.propulsion.CmdSetAccelerationLimits)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdSetAccelerationLimits::IsInitialized() const {
  return true;
}

void CmdSetAccelerationLimits::Swap(CmdSetAccelerationLimits* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CmdSetAccelerationLimits::InternalSwap(CmdSetAccelerationLimits* other) {
  using std::swap;
  swap(sequence_number_, other->sequence_number_);
  swap(accel_, other->accel_);
  swap(deccel_, other->deccel_);
  swap(angular_accel_, other->angular_accel_);
  swap(angular_deccel_, other->angular_deccel_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CmdSetAccelerationLimits::GetMetadata() const {
  protobuf_goldo_2fnucleo_2fpropulsion_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2fnucleo_2fpropulsion_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CmdSetPose::InitAsDefaultInstance() {
  ::goldo::nucleo::propulsion::_CmdSetPose_default_instance_._instance.get_mutable()->position_ = const_cast< ::goldo::common::geometry::Point*>(
      ::goldo::common::geometry::Point::internal_default_instance());
}
void CmdSetPose::clear_position() {
  if (GetArenaNoVirtual() == NULL && position_ != NULL) {
    delete position_;
  }
  position_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CmdSetPose::kSequenceNumberFieldNumber;
const int CmdSetPose::kPositionFieldNumber;
const int CmdSetPose::kYawFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CmdSetPose::CmdSetPose()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_goldo_2fnucleo_2fpropulsion_2eproto::scc_info_CmdSetPose.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:goldo.nucleo.propulsion.CmdSetPose)
}
CmdSetPose::CmdSetPose(const CmdSetPose& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_position()) {
    position_ = new ::goldo::common::geometry::Point(*from.position_);
  } else {
    position_ = NULL;
  }
  ::memcpy(&sequence_number_, &from.sequence_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&yaw_) -
    reinterpret_cast<char*>(&sequence_number_)) + sizeof(yaw_));
  // @@protoc_insertion_point(copy_constructor:goldo.nucleo.propulsion.CmdSetPose)
}

void CmdSetPose::SharedCtor() {
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yaw_) -
      reinterpret_cast<char*>(&position_)) + sizeof(yaw_));
}

CmdSetPose::~CmdSetPose() {
  // @@protoc_insertion_point(destructor:goldo.nucleo.propulsion.CmdSetPose)
  SharedDtor();
}

void CmdSetPose::SharedDtor() {
  if (this != internal_default_instance()) delete position_;
}

void CmdSetPose::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CmdSetPose::descriptor() {
  ::protobuf_goldo_2fnucleo_2fpropulsion_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2fnucleo_2fpropulsion_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CmdSetPose& CmdSetPose::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_goldo_2fnucleo_2fpropulsion_2eproto::scc_info_CmdSetPose.base);
  return *internal_default_instance();
}


void CmdSetPose::Clear() {
// @@protoc_insertion_point(message_clear_start:goldo.nucleo.propulsion.CmdSetPose)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && position_ != NULL) {
    delete position_;
  }
  position_ = NULL;
  ::memset(&sequence_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yaw_) -
      reinterpret_cast<char*>(&sequence_number_)) + sizeof(yaw_));
  _internal_metadata_.Clear();
}

bool CmdSetPose::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:goldo.nucleo.propulsion.CmdSetPose)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 sequence_number = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sequence_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .goldo.common.geometry.Point position = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float yaw = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yaw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:goldo.nucleo.propulsion.CmdSetPose)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:goldo.nucleo.propulsion.CmdSetPose)
  return false;
#undef DO_
}

void CmdSetPose::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:goldo.nucleo.propulsion.CmdSetPose)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sequence_number = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->sequence_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sequence_number(), output);
  }

  // .goldo.common.geometry.Point position = 2;
  if (this->has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_position(), output);
  }

  // float yaw = 3;
  if (this->yaw() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->yaw(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:goldo.nucleo.propulsion.CmdSetPose)
}

::google::protobuf::uint8* CmdSetPose::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:goldo.nucleo.propulsion.CmdSetPose)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sequence_number = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->sequence_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sequence_number(), target);
  }

  // .goldo.common.geometry.Point position = 2;
  if (this->has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_position(), deterministic, target);
  }

  // float yaw = 3;
  if (this->yaw() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->yaw(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:goldo.nucleo.propulsion.CmdSetPose)
  return target;
}

size_t CmdSetPose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:goldo.nucleo.propulsion.CmdSetPose)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .goldo.common.geometry.Point position = 2;
  if (this->has_position()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // int32 sequence_number = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->sequence_number() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sequence_number());
  }

  // float yaw = 3;
  if (this->yaw() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CmdSetPose::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:goldo.nucleo.propulsion.CmdSetPose)
  GOOGLE_DCHECK_NE(&from, this);
  const CmdSetPose* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CmdSetPose>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:goldo.nucleo.propulsion.CmdSetPose)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:goldo.nucleo.propulsion.CmdSetPose)
    MergeFrom(*source);
  }
}

void CmdSetPose::MergeFrom(const CmdSetPose& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:goldo.nucleo.propulsion.CmdSetPose)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_position()) {
    mutable_position()->::goldo::common::geometry::Point::MergeFrom(from.position());
  }
  if (from.sequence_number() != 0) {
    set_sequence_number(from.sequence_number());
  }
  if (from.yaw() != 0) {
    set_yaw(from.yaw());
  }
}

void CmdSetPose::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:goldo.nucleo.propulsion.CmdSetPose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdSetPose::CopyFrom(const CmdSetPose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:goldo.nucleo.propulsion.CmdSetPose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdSetPose::IsInitialized() const {
  return true;
}

void CmdSetPose::Swap(CmdSetPose* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CmdSetPose::InternalSwap(CmdSetPose* other) {
  using std::swap;
  swap(position_, other->position_);
  swap(sequence_number_, other->sequence_number_);
  swap(yaw_, other->yaw_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CmdSetPose::GetMetadata() const {
  protobuf_goldo_2fnucleo_2fpropulsion_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2fnucleo_2fpropulsion_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CmdTransformPose::InitAsDefaultInstance() {
  ::goldo::nucleo::propulsion::_CmdTransformPose_default_instance_._instance.get_mutable()->translation_ = const_cast< ::goldo::common::geometry::Point*>(
      ::goldo::common::geometry::Point::internal_default_instance());
}
void CmdTransformPose::clear_translation() {
  if (GetArenaNoVirtual() == NULL && translation_ != NULL) {
    delete translation_;
  }
  translation_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CmdTransformPose::kSequenceNumberFieldNumber;
const int CmdTransformPose::kTranslationFieldNumber;
const int CmdTransformPose::kRotationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CmdTransformPose::CmdTransformPose()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_goldo_2fnucleo_2fpropulsion_2eproto::scc_info_CmdTransformPose.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:goldo.nucleo.propulsion.CmdTransformPose)
}
CmdTransformPose::CmdTransformPose(const CmdTransformPose& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_translation()) {
    translation_ = new ::goldo::common::geometry::Point(*from.translation_);
  } else {
    translation_ = NULL;
  }
  ::memcpy(&sequence_number_, &from.sequence_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&rotation_) -
    reinterpret_cast<char*>(&sequence_number_)) + sizeof(rotation_));
  // @@protoc_insertion_point(copy_constructor:goldo.nucleo.propulsion.CmdTransformPose)
}

void CmdTransformPose::SharedCtor() {
  ::memset(&translation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rotation_) -
      reinterpret_cast<char*>(&translation_)) + sizeof(rotation_));
}

CmdTransformPose::~CmdTransformPose() {
  // @@protoc_insertion_point(destructor:goldo.nucleo.propulsion.CmdTransformPose)
  SharedDtor();
}

void CmdTransformPose::SharedDtor() {
  if (this != internal_default_instance()) delete translation_;
}

void CmdTransformPose::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CmdTransformPose::descriptor() {
  ::protobuf_goldo_2fnucleo_2fpropulsion_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2fnucleo_2fpropulsion_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CmdTransformPose& CmdTransformPose::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_goldo_2fnucleo_2fpropulsion_2eproto::scc_info_CmdTransformPose.base);
  return *internal_default_instance();
}


void CmdTransformPose::Clear() {
// @@protoc_insertion_point(message_clear_start:goldo.nucleo.propulsion.CmdTransformPose)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && translation_ != NULL) {
    delete translation_;
  }
  translation_ = NULL;
  ::memset(&sequence_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rotation_) -
      reinterpret_cast<char*>(&sequence_number_)) + sizeof(rotation_));
  _internal_metadata_.Clear();
}

bool CmdTransformPose::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:goldo.nucleo.propulsion.CmdTransformPose)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 sequence_number = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sequence_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .goldo.common.geometry.Point translation = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_translation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float rotation = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rotation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:goldo.nucleo.propulsion.CmdTransformPose)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:goldo.nucleo.propulsion.CmdTransformPose)
  return false;
#undef DO_
}

void CmdTransformPose::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:goldo.nucleo.propulsion.CmdTransformPose)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sequence_number = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->sequence_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sequence_number(), output);
  }

  // .goldo.common.geometry.Point translation = 2;
  if (this->has_translation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_translation(), output);
  }

  // float rotation = 3;
  if (this->rotation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->rotation(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:goldo.nucleo.propulsion.CmdTransformPose)
}

::google::protobuf::uint8* CmdTransformPose::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:goldo.nucleo.propulsion.CmdTransformPose)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sequence_number = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->sequence_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sequence_number(), target);
  }

  // .goldo.common.geometry.Point translation = 2;
  if (this->has_translation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_translation(), deterministic, target);
  }

  // float rotation = 3;
  if (this->rotation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->rotation(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:goldo.nucleo.propulsion.CmdTransformPose)
  return target;
}

size_t CmdTransformPose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:goldo.nucleo.propulsion.CmdTransformPose)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .goldo.common.geometry.Point translation = 2;
  if (this->has_translation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *translation_);
  }

  // int32 sequence_number = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->sequence_number() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sequence_number());
  }

  // float rotation = 3;
  if (this->rotation() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CmdTransformPose::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:goldo.nucleo.propulsion.CmdTransformPose)
  GOOGLE_DCHECK_NE(&from, this);
  const CmdTransformPose* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CmdTransformPose>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:goldo.nucleo.propulsion.CmdTransformPose)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:goldo.nucleo.propulsion.CmdTransformPose)
    MergeFrom(*source);
  }
}

void CmdTransformPose::MergeFrom(const CmdTransformPose& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:goldo.nucleo.propulsion.CmdTransformPose)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_translation()) {
    mutable_translation()->::goldo::common::geometry::Point::MergeFrom(from.translation());
  }
  if (from.sequence_number() != 0) {
    set_sequence_number(from.sequence_number());
  }
  if (from.rotation() != 0) {
    set_rotation(from.rotation());
  }
}

void CmdTransformPose::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:goldo.nucleo.propulsion.CmdTransformPose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdTransformPose::CopyFrom(const CmdTransformPose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:goldo.nucleo.propulsion.CmdTransformPose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdTransformPose::IsInitialized() const {
  return true;
}

void CmdTransformPose::Swap(CmdTransformPose* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CmdTransformPose::InternalSwap(CmdTransformPose* other) {
  using std::swap;
  swap(translation_, other->translation_);
  swap(sequence_number_, other->sequence_number_);
  swap(rotation_, other->rotation_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CmdTransformPose::GetMetadata() const {
  protobuf_goldo_2fnucleo_2fpropulsion_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2fnucleo_2fpropulsion_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CmdSetTargetSpeed::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CmdSetTargetSpeed::kSequenceNumberFieldNumber;
const int CmdSetTargetSpeed::kTargetSpeedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CmdSetTargetSpeed::CmdSetTargetSpeed()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_goldo_2fnucleo_2fpropulsion_2eproto::scc_info_CmdSetTargetSpeed.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:goldo.nucleo.propulsion.CmdSetTargetSpeed)
}
CmdSetTargetSpeed::CmdSetTargetSpeed(const CmdSetTargetSpeed& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&sequence_number_, &from.sequence_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&target_speed_) -
    reinterpret_cast<char*>(&sequence_number_)) + sizeof(target_speed_));
  // @@protoc_insertion_point(copy_constructor:goldo.nucleo.propulsion.CmdSetTargetSpeed)
}

void CmdSetTargetSpeed::SharedCtor() {
  ::memset(&sequence_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&target_speed_) -
      reinterpret_cast<char*>(&sequence_number_)) + sizeof(target_speed_));
}

CmdSetTargetSpeed::~CmdSetTargetSpeed() {
  // @@protoc_insertion_point(destructor:goldo.nucleo.propulsion.CmdSetTargetSpeed)
  SharedDtor();
}

void CmdSetTargetSpeed::SharedDtor() {
}

void CmdSetTargetSpeed::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CmdSetTargetSpeed::descriptor() {
  ::protobuf_goldo_2fnucleo_2fpropulsion_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2fnucleo_2fpropulsion_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CmdSetTargetSpeed& CmdSetTargetSpeed::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_goldo_2fnucleo_2fpropulsion_2eproto::scc_info_CmdSetTargetSpeed.base);
  return *internal_default_instance();
}


void CmdSetTargetSpeed::Clear() {
// @@protoc_insertion_point(message_clear_start:goldo.nucleo.propulsion.CmdSetTargetSpeed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&sequence_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&target_speed_) -
      reinterpret_cast<char*>(&sequence_number_)) + sizeof(target_speed_));
  _internal_metadata_.Clear();
}

bool CmdSetTargetSpeed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:goldo.nucleo.propulsion.CmdSetTargetSpeed)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 sequence_number = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sequence_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float target_speed = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &target_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:goldo.nucleo.propulsion.CmdSetTargetSpeed)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:goldo.nucleo.propulsion.CmdSetTargetSpeed)
  return false;
#undef DO_
}

void CmdSetTargetSpeed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:goldo.nucleo.propulsion.CmdSetTargetSpeed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sequence_number = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->sequence_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sequence_number(), output);
  }

  // float target_speed = 3;
  if (this->target_speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->target_speed(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:goldo.nucleo.propulsion.CmdSetTargetSpeed)
}

::google::protobuf::uint8* CmdSetTargetSpeed::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:goldo.nucleo.propulsion.CmdSetTargetSpeed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sequence_number = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->sequence_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sequence_number(), target);
  }

  // float target_speed = 3;
  if (this->target_speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->target_speed(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:goldo.nucleo.propulsion.CmdSetTargetSpeed)
  return target;
}

size_t CmdSetTargetSpeed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:goldo.nucleo.propulsion.CmdSetTargetSpeed)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 sequence_number = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->sequence_number() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sequence_number());
  }

  // float target_speed = 3;
  if (this->target_speed() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CmdSetTargetSpeed::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:goldo.nucleo.propulsion.CmdSetTargetSpeed)
  GOOGLE_DCHECK_NE(&from, this);
  const CmdSetTargetSpeed* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CmdSetTargetSpeed>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:goldo.nucleo.propulsion.CmdSetTargetSpeed)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:goldo.nucleo.propulsion.CmdSetTargetSpeed)
    MergeFrom(*source);
  }
}

void CmdSetTargetSpeed::MergeFrom(const CmdSetTargetSpeed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:goldo.nucleo.propulsion.CmdSetTargetSpeed)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sequence_number() != 0) {
    set_sequence_number(from.sequence_number());
  }
  if (from.target_speed() != 0) {
    set_target_speed(from.target_speed());
  }
}

void CmdSetTargetSpeed::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:goldo.nucleo.propulsion.CmdSetTargetSpeed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdSetTargetSpeed::CopyFrom(const CmdSetTargetSpeed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:goldo.nucleo.propulsion.CmdSetTargetSpeed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdSetTargetSpeed::IsInitialized() const {
  return true;
}

void CmdSetTargetSpeed::Swap(CmdSetTargetSpeed* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CmdSetTargetSpeed::InternalSwap(CmdSetTargetSpeed* other) {
  using std::swap;
  swap(sequence_number_, other->sequence_number_);
  swap(target_speed_, other->target_speed_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CmdSetTargetSpeed::GetMetadata() const {
  protobuf_goldo_2fnucleo_2fpropulsion_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2fnucleo_2fpropulsion_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CmdMeasureNormal::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CmdMeasureNormal::kSequenceNumberFieldNumber;
const int CmdMeasureNormal::kAngleFieldNumber;
const int CmdMeasureNormal::kDistanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CmdMeasureNormal::CmdMeasureNormal()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_goldo_2fnucleo_2fpropulsion_2eproto::scc_info_CmdMeasureNormal.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:goldo.nucleo.propulsion.CmdMeasureNormal)
}
CmdMeasureNormal::CmdMeasureNormal(const CmdMeasureNormal& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&sequence_number_, &from.sequence_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&distance_) -
    reinterpret_cast<char*>(&sequence_number_)) + sizeof(distance_));
  // @@protoc_insertion_point(copy_constructor:goldo.nucleo.propulsion.CmdMeasureNormal)
}

void CmdMeasureNormal::SharedCtor() {
  ::memset(&sequence_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&distance_) -
      reinterpret_cast<char*>(&sequence_number_)) + sizeof(distance_));
}

CmdMeasureNormal::~CmdMeasureNormal() {
  // @@protoc_insertion_point(destructor:goldo.nucleo.propulsion.CmdMeasureNormal)
  SharedDtor();
}

void CmdMeasureNormal::SharedDtor() {
}

void CmdMeasureNormal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CmdMeasureNormal::descriptor() {
  ::protobuf_goldo_2fnucleo_2fpropulsion_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2fnucleo_2fpropulsion_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CmdMeasureNormal& CmdMeasureNormal::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_goldo_2fnucleo_2fpropulsion_2eproto::scc_info_CmdMeasureNormal.base);
  return *internal_default_instance();
}


void CmdMeasureNormal::Clear() {
// @@protoc_insertion_point(message_clear_start:goldo.nucleo.propulsion.CmdMeasureNormal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&sequence_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&distance_) -
      reinterpret_cast<char*>(&sequence_number_)) + sizeof(distance_));
  _internal_metadata_.Clear();
}

bool CmdMeasureNormal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:goldo.nucleo.propulsion.CmdMeasureNormal)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 sequence_number = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sequence_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float angle = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float distance = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:goldo.nucleo.propulsion.CmdMeasureNormal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:goldo.nucleo.propulsion.CmdMeasureNormal)
  return false;
#undef DO_
}

void CmdMeasureNormal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:goldo.nucleo.propulsion.CmdMeasureNormal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sequence_number = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->sequence_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sequence_number(), output);
  }

  // float angle = 2;
  if (this->angle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->angle(), output);
  }

  // float distance = 3;
  if (this->distance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->distance(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:goldo.nucleo.propulsion.CmdMeasureNormal)
}

::google::protobuf::uint8* CmdMeasureNormal::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:goldo.nucleo.propulsion.CmdMeasureNormal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sequence_number = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->sequence_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sequence_number(), target);
  }

  // float angle = 2;
  if (this->angle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->angle(), target);
  }

  // float distance = 3;
  if (this->distance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->distance(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:goldo.nucleo.propulsion.CmdMeasureNormal)
  return target;
}

size_t CmdMeasureNormal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:goldo.nucleo.propulsion.CmdMeasureNormal)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 sequence_number = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->sequence_number() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sequence_number());
  }

  // float angle = 2;
  if (this->angle() != 0) {
    total_size += 1 + 4;
  }

  // float distance = 3;
  if (this->distance() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CmdMeasureNormal::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:goldo.nucleo.propulsion.CmdMeasureNormal)
  GOOGLE_DCHECK_NE(&from, this);
  const CmdMeasureNormal* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CmdMeasureNormal>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:goldo.nucleo.propulsion.CmdMeasureNormal)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:goldo.nucleo.propulsion.CmdMeasureNormal)
    MergeFrom(*source);
  }
}

void CmdMeasureNormal::MergeFrom(const CmdMeasureNormal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:goldo.nucleo.propulsion.CmdMeasureNormal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sequence_number() != 0) {
    set_sequence_number(from.sequence_number());
  }
  if (from.angle() != 0) {
    set_angle(from.angle());
  }
  if (from.distance() != 0) {
    set_distance(from.distance());
  }
}

void CmdMeasureNormal::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:goldo.nucleo.propulsion.CmdMeasureNormal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdMeasureNormal::CopyFrom(const CmdMeasureNormal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:goldo.nucleo.propulsion.CmdMeasureNormal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdMeasureNormal::IsInitialized() const {
  return true;
}

void CmdMeasureNormal::Swap(CmdMeasureNormal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CmdMeasureNormal::InternalSwap(CmdMeasureNormal* other) {
  using std::swap;
  swap(sequence_number_, other->sequence_number_);
  swap(angle_, other->angle_);
  swap(distance_, other->distance_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CmdMeasureNormal::GetMetadata() const {
  protobuf_goldo_2fnucleo_2fpropulsion_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2fnucleo_2fpropulsion_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CmdSetEventSensorsMask::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CmdSetEventSensorsMask::kSequenceNumberFieldNumber;
const int CmdSetEventSensorsMask::kMaskRisingFieldNumber;
const int CmdSetEventSensorsMask::kMaskFallingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CmdSetEventSensorsMask::CmdSetEventSensorsMask()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_goldo_2fnucleo_2fpropulsion_2eproto::scc_info_CmdSetEventSensorsMask.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:goldo.nucleo.propulsion.CmdSetEventSensorsMask)
}
CmdSetEventSensorsMask::CmdSetEventSensorsMask(const CmdSetEventSensorsMask& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&sequence_number_, &from.sequence_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&mask_falling_) -
    reinterpret_cast<char*>(&sequence_number_)) + sizeof(mask_falling_));
  // @@protoc_insertion_point(copy_constructor:goldo.nucleo.propulsion.CmdSetEventSensorsMask)
}

void CmdSetEventSensorsMask::SharedCtor() {
  ::memset(&sequence_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mask_falling_) -
      reinterpret_cast<char*>(&sequence_number_)) + sizeof(mask_falling_));
}

CmdSetEventSensorsMask::~CmdSetEventSensorsMask() {
  // @@protoc_insertion_point(destructor:goldo.nucleo.propulsion.CmdSetEventSensorsMask)
  SharedDtor();
}

void CmdSetEventSensorsMask::SharedDtor() {
}

void CmdSetEventSensorsMask::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CmdSetEventSensorsMask::descriptor() {
  ::protobuf_goldo_2fnucleo_2fpropulsion_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2fnucleo_2fpropulsion_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CmdSetEventSensorsMask& CmdSetEventSensorsMask::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_goldo_2fnucleo_2fpropulsion_2eproto::scc_info_CmdSetEventSensorsMask.base);
  return *internal_default_instance();
}


void CmdSetEventSensorsMask::Clear() {
// @@protoc_insertion_point(message_clear_start:goldo.nucleo.propulsion.CmdSetEventSensorsMask)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&sequence_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mask_falling_) -
      reinterpret_cast<char*>(&sequence_number_)) + sizeof(mask_falling_));
  _internal_metadata_.Clear();
}

bool CmdSetEventSensorsMask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:goldo.nucleo.propulsion.CmdSetEventSensorsMask)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 sequence_number = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sequence_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 mask_rising = 2 [(.goldo.pb2_options.cpp_type) = UINT32];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mask_rising_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 mask_falling = 3 [(.goldo.pb2_options.cpp_type) = UINT32];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mask_falling_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:goldo.nucleo.propulsion.CmdSetEventSensorsMask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:goldo.nucleo.propulsion.CmdSetEventSensorsMask)
  return false;
#undef DO_
}

void CmdSetEventSensorsMask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:goldo.nucleo.propulsion.CmdSetEventSensorsMask)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sequence_number = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->sequence_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sequence_number(), output);
  }

  // uint32 mask_rising = 2 [(.goldo.pb2_options.cpp_type) = UINT32];
  if (this->mask_rising() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mask_rising(), output);
  }

  // uint32 mask_falling = 3 [(.goldo.pb2_options.cpp_type) = UINT32];
  if (this->mask_falling() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mask_falling(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:goldo.nucleo.propulsion.CmdSetEventSensorsMask)
}

::google::protobuf::uint8* CmdSetEventSensorsMask::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:goldo.nucleo.propulsion.CmdSetEventSensorsMask)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sequence_number = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->sequence_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sequence_number(), target);
  }

  // uint32 mask_rising = 2 [(.goldo.pb2_options.cpp_type) = UINT32];
  if (this->mask_rising() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mask_rising(), target);
  }

  // uint32 mask_falling = 3 [(.goldo.pb2_options.cpp_type) = UINT32];
  if (this->mask_falling() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mask_falling(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:goldo.nucleo.propulsion.CmdSetEventSensorsMask)
  return target;
}

size_t CmdSetEventSensorsMask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:goldo.nucleo.propulsion.CmdSetEventSensorsMask)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 sequence_number = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->sequence_number() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sequence_number());
  }

  // uint32 mask_rising = 2 [(.goldo.pb2_options.cpp_type) = UINT32];
  if (this->mask_rising() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mask_rising());
  }

  // uint32 mask_falling = 3 [(.goldo.pb2_options.cpp_type) = UINT32];
  if (this->mask_falling() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mask_falling());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CmdSetEventSensorsMask::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:goldo.nucleo.propulsion.CmdSetEventSensorsMask)
  GOOGLE_DCHECK_NE(&from, this);
  const CmdSetEventSensorsMask* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CmdSetEventSensorsMask>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:goldo.nucleo.propulsion.CmdSetEventSensorsMask)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:goldo.nucleo.propulsion.CmdSetEventSensorsMask)
    MergeFrom(*source);
  }
}

void CmdSetEventSensorsMask::MergeFrom(const CmdSetEventSensorsMask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:goldo.nucleo.propulsion.CmdSetEventSensorsMask)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sequence_number() != 0) {
    set_sequence_number(from.sequence_number());
  }
  if (from.mask_rising() != 0) {
    set_mask_rising(from.mask_rising());
  }
  if (from.mask_falling() != 0) {
    set_mask_falling(from.mask_falling());
  }
}

void CmdSetEventSensorsMask::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:goldo.nucleo.propulsion.CmdSetEventSensorsMask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdSetEventSensorsMask::CopyFrom(const CmdSetEventSensorsMask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:goldo.nucleo.propulsion.CmdSetEventSensorsMask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdSetEventSensorsMask::IsInitialized() const {
  return true;
}

void CmdSetEventSensorsMask::Swap(CmdSetEventSensorsMask* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CmdSetEventSensorsMask::InternalSwap(CmdSetEventSensorsMask* other) {
  using std::swap;
  swap(sequence_number_, other->sequence_number_);
  swap(mask_rising_, other->mask_rising_);
  swap(mask_falling_, other->mask_falling_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CmdSetEventSensorsMask::GetMetadata() const {
  protobuf_goldo_2fnucleo_2fpropulsion_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2fnucleo_2fpropulsion_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ExecuteTrajectory::InitAsDefaultInstance() {
}
void ExecuteTrajectory::clear_points() {
  points_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExecuteTrajectory::kSequenceNumberFieldNumber;
const int ExecuteTrajectory::kSpeedFieldNumber;
const int ExecuteTrajectory::kRepositionDistanceFieldNumber;
const int ExecuteTrajectory::kRepositionSpeedFieldNumber;
const int ExecuteTrajectory::kPointsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExecuteTrajectory::ExecuteTrajectory()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_goldo_2fnucleo_2fpropulsion_2eproto::scc_info_ExecuteTrajectory.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:goldo.nucleo.propulsion.ExecuteTrajectory)
}
ExecuteTrajectory::ExecuteTrajectory(const ExecuteTrajectory& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      points_(from.points_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&sequence_number_, &from.sequence_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&reposition_speed_) -
    reinterpret_cast<char*>(&sequence_number_)) + sizeof(reposition_speed_));
  // @@protoc_insertion_point(copy_constructor:goldo.nucleo.propulsion.ExecuteTrajectory)
}

void ExecuteTrajectory::SharedCtor() {
  ::memset(&sequence_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reposition_speed_) -
      reinterpret_cast<char*>(&sequence_number_)) + sizeof(reposition_speed_));
}

ExecuteTrajectory::~ExecuteTrajectory() {
  // @@protoc_insertion_point(destructor:goldo.nucleo.propulsion.ExecuteTrajectory)
  SharedDtor();
}

void ExecuteTrajectory::SharedDtor() {
}

void ExecuteTrajectory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ExecuteTrajectory::descriptor() {
  ::protobuf_goldo_2fnucleo_2fpropulsion_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2fnucleo_2fpropulsion_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ExecuteTrajectory& ExecuteTrajectory::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_goldo_2fnucleo_2fpropulsion_2eproto::scc_info_ExecuteTrajectory.base);
  return *internal_default_instance();
}


void ExecuteTrajectory::Clear() {
// @@protoc_insertion_point(message_clear_start:goldo.nucleo.propulsion.ExecuteTrajectory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  points_.Clear();
  ::memset(&sequence_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reposition_speed_) -
      reinterpret_cast<char*>(&sequence_number_)) + sizeof(reposition_speed_));
  _internal_metadata_.Clear();
}

bool ExecuteTrajectory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:goldo.nucleo.propulsion.ExecuteTrajectory)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 sequence_number = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sequence_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float speed = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .goldo.common.geometry.Point points = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_points()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float reposition_distance = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &reposition_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float reposition_speed = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &reposition_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:goldo.nucleo.propulsion.ExecuteTrajectory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:goldo.nucleo.propulsion.ExecuteTrajectory)
  return false;
#undef DO_
}

void ExecuteTrajectory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:goldo.nucleo.propulsion.ExecuteTrajectory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sequence_number = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->sequence_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sequence_number(), output);
  }

  // float speed = 2;
  if (this->speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->speed(), output);
  }

  // repeated .goldo.common.geometry.Point points = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->points_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->points(static_cast<int>(i)),
      output);
  }

  // float reposition_distance = 4;
  if (this->reposition_distance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->reposition_distance(), output);
  }

  // float reposition_speed = 5;
  if (this->reposition_speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->reposition_speed(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:goldo.nucleo.propulsion.ExecuteTrajectory)
}

::google::protobuf::uint8* ExecuteTrajectory::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:goldo.nucleo.propulsion.ExecuteTrajectory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sequence_number = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->sequence_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sequence_number(), target);
  }

  // float speed = 2;
  if (this->speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->speed(), target);
  }

  // repeated .goldo.common.geometry.Point points = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->points_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->points(static_cast<int>(i)), deterministic, target);
  }

  // float reposition_distance = 4;
  if (this->reposition_distance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->reposition_distance(), target);
  }

  // float reposition_speed = 5;
  if (this->reposition_speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->reposition_speed(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:goldo.nucleo.propulsion.ExecuteTrajectory)
  return target;
}

size_t ExecuteTrajectory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:goldo.nucleo.propulsion.ExecuteTrajectory)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .goldo.common.geometry.Point points = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->points_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->points(static_cast<int>(i)));
    }
  }

  // int32 sequence_number = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->sequence_number() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sequence_number());
  }

  // float speed = 2;
  if (this->speed() != 0) {
    total_size += 1 + 4;
  }

  // float reposition_distance = 4;
  if (this->reposition_distance() != 0) {
    total_size += 1 + 4;
  }

  // float reposition_speed = 5;
  if (this->reposition_speed() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExecuteTrajectory::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:goldo.nucleo.propulsion.ExecuteTrajectory)
  GOOGLE_DCHECK_NE(&from, this);
  const ExecuteTrajectory* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ExecuteTrajectory>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:goldo.nucleo.propulsion.ExecuteTrajectory)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:goldo.nucleo.propulsion.ExecuteTrajectory)
    MergeFrom(*source);
  }
}

void ExecuteTrajectory::MergeFrom(const ExecuteTrajectory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:goldo.nucleo.propulsion.ExecuteTrajectory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  points_.MergeFrom(from.points_);
  if (from.sequence_number() != 0) {
    set_sequence_number(from.sequence_number());
  }
  if (from.speed() != 0) {
    set_speed(from.speed());
  }
  if (from.reposition_distance() != 0) {
    set_reposition_distance(from.reposition_distance());
  }
  if (from.reposition_speed() != 0) {
    set_reposition_speed(from.reposition_speed());
  }
}

void ExecuteTrajectory::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:goldo.nucleo.propulsion.ExecuteTrajectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecuteTrajectory::CopyFrom(const ExecuteTrajectory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:goldo.nucleo.propulsion.ExecuteTrajectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecuteTrajectory::IsInitialized() const {
  return true;
}

void ExecuteTrajectory::Swap(ExecuteTrajectory* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExecuteTrajectory::InternalSwap(ExecuteTrajectory* other) {
  using std::swap;
  CastToBase(&points_)->InternalSwap(CastToBase(&other->points_));
  swap(sequence_number_, other->sequence_number_);
  swap(speed_, other->speed_);
  swap(reposition_distance_, other->reposition_distance_);
  swap(reposition_speed_, other->reposition_speed_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ExecuteTrajectory::GetMetadata() const {
  protobuf_goldo_2fnucleo_2fpropulsion_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2fnucleo_2fpropulsion_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ExecuteTranslation::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExecuteTranslation::kSequenceNumberFieldNumber;
const int ExecuteTranslation::kDistanceFieldNumber;
const int ExecuteTranslation::kSpeedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExecuteTranslation::ExecuteTranslation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_goldo_2fnucleo_2fpropulsion_2eproto::scc_info_ExecuteTranslation.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:goldo.nucleo.propulsion.ExecuteTranslation)
}
ExecuteTranslation::ExecuteTranslation(const ExecuteTranslation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&sequence_number_, &from.sequence_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&speed_) -
    reinterpret_cast<char*>(&sequence_number_)) + sizeof(speed_));
  // @@protoc_insertion_point(copy_constructor:goldo.nucleo.propulsion.ExecuteTranslation)
}

void ExecuteTranslation::SharedCtor() {
  ::memset(&sequence_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&speed_) -
      reinterpret_cast<char*>(&sequence_number_)) + sizeof(speed_));
}

ExecuteTranslation::~ExecuteTranslation() {
  // @@protoc_insertion_point(destructor:goldo.nucleo.propulsion.ExecuteTranslation)
  SharedDtor();
}

void ExecuteTranslation::SharedDtor() {
}

void ExecuteTranslation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ExecuteTranslation::descriptor() {
  ::protobuf_goldo_2fnucleo_2fpropulsion_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2fnucleo_2fpropulsion_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ExecuteTranslation& ExecuteTranslation::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_goldo_2fnucleo_2fpropulsion_2eproto::scc_info_ExecuteTranslation.base);
  return *internal_default_instance();
}


void ExecuteTranslation::Clear() {
// @@protoc_insertion_point(message_clear_start:goldo.nucleo.propulsion.ExecuteTranslation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&sequence_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&speed_) -
      reinterpret_cast<char*>(&sequence_number_)) + sizeof(speed_));
  _internal_metadata_.Clear();
}

bool ExecuteTranslation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:goldo.nucleo.propulsion.ExecuteTranslation)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 sequence_number = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sequence_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float distance = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float speed = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:goldo.nucleo.propulsion.ExecuteTranslation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:goldo.nucleo.propulsion.ExecuteTranslation)
  return false;
#undef DO_
}

void ExecuteTranslation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:goldo.nucleo.propulsion.ExecuteTranslation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sequence_number = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->sequence_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sequence_number(), output);
  }

  // float distance = 2;
  if (this->distance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->distance(), output);
  }

  // float speed = 3;
  if (this->speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->speed(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:goldo.nucleo.propulsion.ExecuteTranslation)
}

::google::protobuf::uint8* ExecuteTranslation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:goldo.nucleo.propulsion.ExecuteTranslation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sequence_number = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->sequence_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sequence_number(), target);
  }

  // float distance = 2;
  if (this->distance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->distance(), target);
  }

  // float speed = 3;
  if (this->speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->speed(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:goldo.nucleo.propulsion.ExecuteTranslation)
  return target;
}

size_t ExecuteTranslation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:goldo.nucleo.propulsion.ExecuteTranslation)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 sequence_number = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->sequence_number() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sequence_number());
  }

  // float distance = 2;
  if (this->distance() != 0) {
    total_size += 1 + 4;
  }

  // float speed = 3;
  if (this->speed() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExecuteTranslation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:goldo.nucleo.propulsion.ExecuteTranslation)
  GOOGLE_DCHECK_NE(&from, this);
  const ExecuteTranslation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ExecuteTranslation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:goldo.nucleo.propulsion.ExecuteTranslation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:goldo.nucleo.propulsion.ExecuteTranslation)
    MergeFrom(*source);
  }
}

void ExecuteTranslation::MergeFrom(const ExecuteTranslation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:goldo.nucleo.propulsion.ExecuteTranslation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sequence_number() != 0) {
    set_sequence_number(from.sequence_number());
  }
  if (from.distance() != 0) {
    set_distance(from.distance());
  }
  if (from.speed() != 0) {
    set_speed(from.speed());
  }
}

void ExecuteTranslation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:goldo.nucleo.propulsion.ExecuteTranslation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecuteTranslation::CopyFrom(const ExecuteTranslation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:goldo.nucleo.propulsion.ExecuteTranslation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecuteTranslation::IsInitialized() const {
  return true;
}

void ExecuteTranslation::Swap(ExecuteTranslation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExecuteTranslation::InternalSwap(ExecuteTranslation* other) {
  using std::swap;
  swap(sequence_number_, other->sequence_number_);
  swap(distance_, other->distance_);
  swap(speed_, other->speed_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ExecuteTranslation::GetMetadata() const {
  protobuf_goldo_2fnucleo_2fpropulsion_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2fnucleo_2fpropulsion_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ExecuteReposition::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExecuteReposition::kSequenceNumberFieldNumber;
const int ExecuteReposition::kDistanceFieldNumber;
const int ExecuteReposition::kSpeedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExecuteReposition::ExecuteReposition()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_goldo_2fnucleo_2fpropulsion_2eproto::scc_info_ExecuteReposition.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:goldo.nucleo.propulsion.ExecuteReposition)
}
ExecuteReposition::ExecuteReposition(const ExecuteReposition& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&sequence_number_, &from.sequence_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&speed_) -
    reinterpret_cast<char*>(&sequence_number_)) + sizeof(speed_));
  // @@protoc_insertion_point(copy_constructor:goldo.nucleo.propulsion.ExecuteReposition)
}

void ExecuteReposition::SharedCtor() {
  ::memset(&sequence_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&speed_) -
      reinterpret_cast<char*>(&sequence_number_)) + sizeof(speed_));
}

ExecuteReposition::~ExecuteReposition() {
  // @@protoc_insertion_point(destructor:goldo.nucleo.propulsion.ExecuteReposition)
  SharedDtor();
}

void ExecuteReposition::SharedDtor() {
}

void ExecuteReposition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ExecuteReposition::descriptor() {
  ::protobuf_goldo_2fnucleo_2fpropulsion_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2fnucleo_2fpropulsion_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ExecuteReposition& ExecuteReposition::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_goldo_2fnucleo_2fpropulsion_2eproto::scc_info_ExecuteReposition.base);
  return *internal_default_instance();
}


void ExecuteReposition::Clear() {
// @@protoc_insertion_point(message_clear_start:goldo.nucleo.propulsion.ExecuteReposition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&sequence_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&speed_) -
      reinterpret_cast<char*>(&sequence_number_)) + sizeof(speed_));
  _internal_metadata_.Clear();
}

bool ExecuteReposition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:goldo.nucleo.propulsion.ExecuteReposition)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 sequence_number = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sequence_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float distance = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float speed = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:goldo.nucleo.propulsion.ExecuteReposition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:goldo.nucleo.propulsion.ExecuteReposition)
  return false;
#undef DO_
}

void ExecuteReposition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:goldo.nucleo.propulsion.ExecuteReposition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sequence_number = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->sequence_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sequence_number(), output);
  }

  // float distance = 2;
  if (this->distance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->distance(), output);
  }

  // float speed = 3;
  if (this->speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->speed(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:goldo.nucleo.propulsion.ExecuteReposition)
}

::google::protobuf::uint8* ExecuteReposition::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:goldo.nucleo.propulsion.ExecuteReposition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sequence_number = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->sequence_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sequence_number(), target);
  }

  // float distance = 2;
  if (this->distance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->distance(), target);
  }

  // float speed = 3;
  if (this->speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->speed(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:goldo.nucleo.propulsion.ExecuteReposition)
  return target;
}

size_t ExecuteReposition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:goldo.nucleo.propulsion.ExecuteReposition)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 sequence_number = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->sequence_number() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sequence_number());
  }

  // float distance = 2;
  if (this->distance() != 0) {
    total_size += 1 + 4;
  }

  // float speed = 3;
  if (this->speed() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExecuteReposition::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:goldo.nucleo.propulsion.ExecuteReposition)
  GOOGLE_DCHECK_NE(&from, this);
  const ExecuteReposition* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ExecuteReposition>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:goldo.nucleo.propulsion.ExecuteReposition)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:goldo.nucleo.propulsion.ExecuteReposition)
    MergeFrom(*source);
  }
}

void ExecuteReposition::MergeFrom(const ExecuteReposition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:goldo.nucleo.propulsion.ExecuteReposition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sequence_number() != 0) {
    set_sequence_number(from.sequence_number());
  }
  if (from.distance() != 0) {
    set_distance(from.distance());
  }
  if (from.speed() != 0) {
    set_speed(from.speed());
  }
}

void ExecuteReposition::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:goldo.nucleo.propulsion.ExecuteReposition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecuteReposition::CopyFrom(const ExecuteReposition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:goldo.nucleo.propulsion.ExecuteReposition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecuteReposition::IsInitialized() const {
  return true;
}

void ExecuteReposition::Swap(ExecuteReposition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExecuteReposition::InternalSwap(ExecuteReposition* other) {
  using std::swap;
  swap(sequence_number_, other->sequence_number_);
  swap(distance_, other->distance_);
  swap(speed_, other->speed_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ExecuteReposition::GetMetadata() const {
  protobuf_goldo_2fnucleo_2fpropulsion_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2fnucleo_2fpropulsion_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ExecuteRotation::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExecuteRotation::kSequenceNumberFieldNumber;
const int ExecuteRotation::kAngleFieldNumber;
const int ExecuteRotation::kYawRateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExecuteRotation::ExecuteRotation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_goldo_2fnucleo_2fpropulsion_2eproto::scc_info_ExecuteRotation.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:goldo.nucleo.propulsion.ExecuteRotation)
}
ExecuteRotation::ExecuteRotation(const ExecuteRotation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&sequence_number_, &from.sequence_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&yaw_rate_) -
    reinterpret_cast<char*>(&sequence_number_)) + sizeof(yaw_rate_));
  // @@protoc_insertion_point(copy_constructor:goldo.nucleo.propulsion.ExecuteRotation)
}

void ExecuteRotation::SharedCtor() {
  ::memset(&sequence_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yaw_rate_) -
      reinterpret_cast<char*>(&sequence_number_)) + sizeof(yaw_rate_));
}

ExecuteRotation::~ExecuteRotation() {
  // @@protoc_insertion_point(destructor:goldo.nucleo.propulsion.ExecuteRotation)
  SharedDtor();
}

void ExecuteRotation::SharedDtor() {
}

void ExecuteRotation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ExecuteRotation::descriptor() {
  ::protobuf_goldo_2fnucleo_2fpropulsion_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2fnucleo_2fpropulsion_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ExecuteRotation& ExecuteRotation::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_goldo_2fnucleo_2fpropulsion_2eproto::scc_info_ExecuteRotation.base);
  return *internal_default_instance();
}


void ExecuteRotation::Clear() {
// @@protoc_insertion_point(message_clear_start:goldo.nucleo.propulsion.ExecuteRotation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&sequence_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yaw_rate_) -
      reinterpret_cast<char*>(&sequence_number_)) + sizeof(yaw_rate_));
  _internal_metadata_.Clear();
}

bool ExecuteRotation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:goldo.nucleo.propulsion.ExecuteRotation)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 sequence_number = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sequence_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float angle = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float yaw_rate = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yaw_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:goldo.nucleo.propulsion.ExecuteRotation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:goldo.nucleo.propulsion.ExecuteRotation)
  return false;
#undef DO_
}

void ExecuteRotation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:goldo.nucleo.propulsion.ExecuteRotation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sequence_number = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->sequence_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sequence_number(), output);
  }

  // float angle = 2;
  if (this->angle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->angle(), output);
  }

  // float yaw_rate = 3;
  if (this->yaw_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->yaw_rate(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:goldo.nucleo.propulsion.ExecuteRotation)
}

::google::protobuf::uint8* ExecuteRotation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:goldo.nucleo.propulsion.ExecuteRotation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sequence_number = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->sequence_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sequence_number(), target);
  }

  // float angle = 2;
  if (this->angle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->angle(), target);
  }

  // float yaw_rate = 3;
  if (this->yaw_rate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->yaw_rate(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:goldo.nucleo.propulsion.ExecuteRotation)
  return target;
}

size_t ExecuteRotation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:goldo.nucleo.propulsion.ExecuteRotation)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 sequence_number = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->sequence_number() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sequence_number());
  }

  // float angle = 2;
  if (this->angle() != 0) {
    total_size += 1 + 4;
  }

  // float yaw_rate = 3;
  if (this->yaw_rate() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExecuteRotation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:goldo.nucleo.propulsion.ExecuteRotation)
  GOOGLE_DCHECK_NE(&from, this);
  const ExecuteRotation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ExecuteRotation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:goldo.nucleo.propulsion.ExecuteRotation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:goldo.nucleo.propulsion.ExecuteRotation)
    MergeFrom(*source);
  }
}

void ExecuteRotation::MergeFrom(const ExecuteRotation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:goldo.nucleo.propulsion.ExecuteRotation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sequence_number() != 0) {
    set_sequence_number(from.sequence_number());
  }
  if (from.angle() != 0) {
    set_angle(from.angle());
  }
  if (from.yaw_rate() != 0) {
    set_yaw_rate(from.yaw_rate());
  }
}

void ExecuteRotation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:goldo.nucleo.propulsion.ExecuteRotation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecuteRotation::CopyFrom(const ExecuteRotation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:goldo.nucleo.propulsion.ExecuteRotation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecuteRotation::IsInitialized() const {
  return true;
}

void ExecuteRotation::Swap(ExecuteRotation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExecuteRotation::InternalSwap(ExecuteRotation* other) {
  using std::swap;
  swap(sequence_number_, other->sequence_number_);
  swap(angle_, other->angle_);
  swap(yaw_rate_, other->yaw_rate_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ExecuteRotation::GetMetadata() const {
  protobuf_goldo_2fnucleo_2fpropulsion_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2fnucleo_2fpropulsion_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ExecuteMoveTo::InitAsDefaultInstance() {
  ::goldo::nucleo::propulsion::_ExecuteMoveTo_default_instance_._instance.get_mutable()->point_ = const_cast< ::goldo::common::geometry::Point*>(
      ::goldo::common::geometry::Point::internal_default_instance());
}
void ExecuteMoveTo::clear_point() {
  if (GetArenaNoVirtual() == NULL && point_ != NULL) {
    delete point_;
  }
  point_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExecuteMoveTo::kSequenceNumberFieldNumber;
const int ExecuteMoveTo::kPointFieldNumber;
const int ExecuteMoveTo::kSpeedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExecuteMoveTo::ExecuteMoveTo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_goldo_2fnucleo_2fpropulsion_2eproto::scc_info_ExecuteMoveTo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:goldo.nucleo.propulsion.ExecuteMoveTo)
}
ExecuteMoveTo::ExecuteMoveTo(const ExecuteMoveTo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_point()) {
    point_ = new ::goldo::common::geometry::Point(*from.point_);
  } else {
    point_ = NULL;
  }
  ::memcpy(&sequence_number_, &from.sequence_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&speed_) -
    reinterpret_cast<char*>(&sequence_number_)) + sizeof(speed_));
  // @@protoc_insertion_point(copy_constructor:goldo.nucleo.propulsion.ExecuteMoveTo)
}

void ExecuteMoveTo::SharedCtor() {
  ::memset(&point_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&speed_) -
      reinterpret_cast<char*>(&point_)) + sizeof(speed_));
}

ExecuteMoveTo::~ExecuteMoveTo() {
  // @@protoc_insertion_point(destructor:goldo.nucleo.propulsion.ExecuteMoveTo)
  SharedDtor();
}

void ExecuteMoveTo::SharedDtor() {
  if (this != internal_default_instance()) delete point_;
}

void ExecuteMoveTo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ExecuteMoveTo::descriptor() {
  ::protobuf_goldo_2fnucleo_2fpropulsion_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2fnucleo_2fpropulsion_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ExecuteMoveTo& ExecuteMoveTo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_goldo_2fnucleo_2fpropulsion_2eproto::scc_info_ExecuteMoveTo.base);
  return *internal_default_instance();
}


void ExecuteMoveTo::Clear() {
// @@protoc_insertion_point(message_clear_start:goldo.nucleo.propulsion.ExecuteMoveTo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && point_ != NULL) {
    delete point_;
  }
  point_ = NULL;
  ::memset(&sequence_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&speed_) -
      reinterpret_cast<char*>(&sequence_number_)) + sizeof(speed_));
  _internal_metadata_.Clear();
}

bool ExecuteMoveTo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:goldo.nucleo.propulsion.ExecuteMoveTo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 sequence_number = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sequence_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .goldo.common.geometry.Point point = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float speed = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:goldo.nucleo.propulsion.ExecuteMoveTo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:goldo.nucleo.propulsion.ExecuteMoveTo)
  return false;
#undef DO_
}

void ExecuteMoveTo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:goldo.nucleo.propulsion.ExecuteMoveTo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sequence_number = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->sequence_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sequence_number(), output);
  }

  // .goldo.common.geometry.Point point = 2;
  if (this->has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_point(), output);
  }

  // float speed = 3;
  if (this->speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->speed(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:goldo.nucleo.propulsion.ExecuteMoveTo)
}

::google::protobuf::uint8* ExecuteMoveTo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:goldo.nucleo.propulsion.ExecuteMoveTo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sequence_number = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->sequence_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sequence_number(), target);
  }

  // .goldo.common.geometry.Point point = 2;
  if (this->has_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_point(), deterministic, target);
  }

  // float speed = 3;
  if (this->speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->speed(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:goldo.nucleo.propulsion.ExecuteMoveTo)
  return target;
}

size_t ExecuteMoveTo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:goldo.nucleo.propulsion.ExecuteMoveTo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .goldo.common.geometry.Point point = 2;
  if (this->has_point()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *point_);
  }

  // int32 sequence_number = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->sequence_number() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sequence_number());
  }

  // float speed = 3;
  if (this->speed() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExecuteMoveTo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:goldo.nucleo.propulsion.ExecuteMoveTo)
  GOOGLE_DCHECK_NE(&from, this);
  const ExecuteMoveTo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ExecuteMoveTo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:goldo.nucleo.propulsion.ExecuteMoveTo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:goldo.nucleo.propulsion.ExecuteMoveTo)
    MergeFrom(*source);
  }
}

void ExecuteMoveTo::MergeFrom(const ExecuteMoveTo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:goldo.nucleo.propulsion.ExecuteMoveTo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_point()) {
    mutable_point()->::goldo::common::geometry::Point::MergeFrom(from.point());
  }
  if (from.sequence_number() != 0) {
    set_sequence_number(from.sequence_number());
  }
  if (from.speed() != 0) {
    set_speed(from.speed());
  }
}

void ExecuteMoveTo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:goldo.nucleo.propulsion.ExecuteMoveTo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecuteMoveTo::CopyFrom(const ExecuteMoveTo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:goldo.nucleo.propulsion.ExecuteMoveTo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecuteMoveTo::IsInitialized() const {
  return true;
}

void ExecuteMoveTo::Swap(ExecuteMoveTo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExecuteMoveTo::InternalSwap(ExecuteMoveTo* other) {
  using std::swap;
  swap(point_, other->point_);
  swap(sequence_number_, other->sequence_number_);
  swap(speed_, other->speed_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ExecuteMoveTo::GetMetadata() const {
  protobuf_goldo_2fnucleo_2fpropulsion_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2fnucleo_2fpropulsion_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ExecutePointTo::InitAsDefaultInstance() {
  ::goldo::nucleo::propulsion::_ExecutePointTo_default_instance_._instance.get_mutable()->point_ = const_cast< ::goldo::common::geometry::Point*>(
      ::goldo::common::geometry::Point::internal_default_instance());
}
void ExecutePointTo::clear_point() {
  if (GetArenaNoVirtual() == NULL && point_ != NULL) {
    delete point_;
  }
  point_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExecutePointTo::kSequenceNumberFieldNumber;
const int ExecutePointTo::kPointFieldNumber;
const int ExecutePointTo::kYawRateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExecutePointTo::ExecutePointTo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_goldo_2fnucleo_2fpropulsion_2eproto::scc_info_ExecutePointTo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:goldo.nucleo.propulsion.ExecutePointTo)
}
ExecutePointTo::ExecutePointTo(const ExecutePointTo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_point()) {
    point_ = new ::goldo::common::geometry::Point(*from.point_);
  } else {
    point_ = NULL;
  }
  ::memcpy(&sequence_number_, &from.sequence_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&yaw_rate_) -
    reinterpret_cast<char*>(&sequence_number_)) + sizeof(yaw_rate_));
  // @@protoc_insertion_point(copy_constructor:goldo.nucleo.propulsion.ExecutePointTo)
}

void ExecutePointTo::SharedCtor() {
  ::memset(&point_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yaw_rate_) -
      reinterpret_cast<char*>(&point_)) + sizeof(yaw_rate_));
}

ExecutePointTo::~ExecutePointTo() {
  // @@protoc_insertion_point(destructor:goldo.nucleo.propulsion.ExecutePointTo)
  SharedDtor();
}

void ExecutePointTo::SharedDtor() {
  if (this != internal_default_instance()) delete point_;
}

void ExecutePointTo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ExecutePointTo::descriptor() {
  ::protobuf_goldo_2fnucleo_2fpropulsion_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2fnucleo_2fpropulsion_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ExecutePointTo& ExecutePointTo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_goldo_2fnucleo_2fpropulsion_2eproto::scc_info_ExecutePointTo.base);
  return *internal_default_instance();
}


void ExecutePointTo::Clear() {
// @@protoc_insertion_point(message_clear_start:goldo.nucleo.propulsion.ExecutePointTo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && point_ != NULL) {
    delete point_;
  }
  point_ = NULL;
  ::memset(&sequence_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yaw_rate_) -
      reinterpret_cast<char*>(&sequence_number_)) + sizeof(yaw_rate_));
  _internal_metadata_.Clear();
}

bool ExecutePointTo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:goldo.nucleo.propulsion.ExecutePointTo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 sequence_number = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sequence_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .goldo.common.geometry.Point point = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float yaw_rate = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yaw_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:goldo.nucleo.propulsion.ExecutePointTo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:goldo.nucleo.propulsion.ExecutePointTo)
  return false;
#undef DO_
}

void ExecutePointTo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:goldo.nucleo.propulsion.ExecutePointTo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sequence_number = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->sequence_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sequence_number(), output);
  }

  // .goldo.common.geometry.Point point = 2;
  if (this->has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_point(), output);
  }

  // float yaw_rate = 3;
  if (this->yaw_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->yaw_rate(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:goldo.nucleo.propulsion.ExecutePointTo)
}

::google::protobuf::uint8* ExecutePointTo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:goldo.nucleo.propulsion.ExecutePointTo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sequence_number = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->sequence_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sequence_number(), target);
  }

  // .goldo.common.geometry.Point point = 2;
  if (this->has_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_point(), deterministic, target);
  }

  // float yaw_rate = 3;
  if (this->yaw_rate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->yaw_rate(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:goldo.nucleo.propulsion.ExecutePointTo)
  return target;
}

size_t ExecutePointTo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:goldo.nucleo.propulsion.ExecutePointTo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .goldo.common.geometry.Point point = 2;
  if (this->has_point()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *point_);
  }

  // int32 sequence_number = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->sequence_number() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sequence_number());
  }

  // float yaw_rate = 3;
  if (this->yaw_rate() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExecutePointTo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:goldo.nucleo.propulsion.ExecutePointTo)
  GOOGLE_DCHECK_NE(&from, this);
  const ExecutePointTo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ExecutePointTo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:goldo.nucleo.propulsion.ExecutePointTo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:goldo.nucleo.propulsion.ExecutePointTo)
    MergeFrom(*source);
  }
}

void ExecutePointTo::MergeFrom(const ExecutePointTo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:goldo.nucleo.propulsion.ExecutePointTo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_point()) {
    mutable_point()->::goldo::common::geometry::Point::MergeFrom(from.point());
  }
  if (from.sequence_number() != 0) {
    set_sequence_number(from.sequence_number());
  }
  if (from.yaw_rate() != 0) {
    set_yaw_rate(from.yaw_rate());
  }
}

void ExecutePointTo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:goldo.nucleo.propulsion.ExecutePointTo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecutePointTo::CopyFrom(const ExecutePointTo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:goldo.nucleo.propulsion.ExecutePointTo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecutePointTo::IsInitialized() const {
  return true;
}

void ExecutePointTo::Swap(ExecutePointTo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExecutePointTo::InternalSwap(ExecutePointTo* other) {
  using std::swap;
  swap(point_, other->point_);
  swap(sequence_number_, other->sequence_number_);
  swap(yaw_rate_, other->yaw_rate_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ExecutePointTo::GetMetadata() const {
  protobuf_goldo_2fnucleo_2fpropulsion_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2fnucleo_2fpropulsion_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ExecuteFaceDirection::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExecuteFaceDirection::kSequenceNumberFieldNumber;
const int ExecuteFaceDirection::kYawFieldNumber;
const int ExecuteFaceDirection::kYawRateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExecuteFaceDirection::ExecuteFaceDirection()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_goldo_2fnucleo_2fpropulsion_2eproto::scc_info_ExecuteFaceDirection.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:goldo.nucleo.propulsion.ExecuteFaceDirection)
}
ExecuteFaceDirection::ExecuteFaceDirection(const ExecuteFaceDirection& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&sequence_number_, &from.sequence_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&yaw_rate_) -
    reinterpret_cast<char*>(&sequence_number_)) + sizeof(yaw_rate_));
  // @@protoc_insertion_point(copy_constructor:goldo.nucleo.propulsion.ExecuteFaceDirection)
}

void ExecuteFaceDirection::SharedCtor() {
  ::memset(&sequence_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yaw_rate_) -
      reinterpret_cast<char*>(&sequence_number_)) + sizeof(yaw_rate_));
}

ExecuteFaceDirection::~ExecuteFaceDirection() {
  // @@protoc_insertion_point(destructor:goldo.nucleo.propulsion.ExecuteFaceDirection)
  SharedDtor();
}

void ExecuteFaceDirection::SharedDtor() {
}

void ExecuteFaceDirection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ExecuteFaceDirection::descriptor() {
  ::protobuf_goldo_2fnucleo_2fpropulsion_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2fnucleo_2fpropulsion_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ExecuteFaceDirection& ExecuteFaceDirection::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_goldo_2fnucleo_2fpropulsion_2eproto::scc_info_ExecuteFaceDirection.base);
  return *internal_default_instance();
}


void ExecuteFaceDirection::Clear() {
// @@protoc_insertion_point(message_clear_start:goldo.nucleo.propulsion.ExecuteFaceDirection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&sequence_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yaw_rate_) -
      reinterpret_cast<char*>(&sequence_number_)) + sizeof(yaw_rate_));
  _internal_metadata_.Clear();
}

bool ExecuteFaceDirection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:goldo.nucleo.propulsion.ExecuteFaceDirection)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 sequence_number = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sequence_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float yaw = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yaw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float yaw_rate = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yaw_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:goldo.nucleo.propulsion.ExecuteFaceDirection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:goldo.nucleo.propulsion.ExecuteFaceDirection)
  return false;
#undef DO_
}

void ExecuteFaceDirection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:goldo.nucleo.propulsion.ExecuteFaceDirection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sequence_number = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->sequence_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sequence_number(), output);
  }

  // float yaw = 2;
  if (this->yaw() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->yaw(), output);
  }

  // float yaw_rate = 3;
  if (this->yaw_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->yaw_rate(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:goldo.nucleo.propulsion.ExecuteFaceDirection)
}

::google::protobuf::uint8* ExecuteFaceDirection::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:goldo.nucleo.propulsion.ExecuteFaceDirection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sequence_number = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->sequence_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sequence_number(), target);
  }

  // float yaw = 2;
  if (this->yaw() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->yaw(), target);
  }

  // float yaw_rate = 3;
  if (this->yaw_rate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->yaw_rate(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:goldo.nucleo.propulsion.ExecuteFaceDirection)
  return target;
}

size_t ExecuteFaceDirection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:goldo.nucleo.propulsion.ExecuteFaceDirection)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 sequence_number = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->sequence_number() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sequence_number());
  }

  // float yaw = 2;
  if (this->yaw() != 0) {
    total_size += 1 + 4;
  }

  // float yaw_rate = 3;
  if (this->yaw_rate() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExecuteFaceDirection::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:goldo.nucleo.propulsion.ExecuteFaceDirection)
  GOOGLE_DCHECK_NE(&from, this);
  const ExecuteFaceDirection* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ExecuteFaceDirection>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:goldo.nucleo.propulsion.ExecuteFaceDirection)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:goldo.nucleo.propulsion.ExecuteFaceDirection)
    MergeFrom(*source);
  }
}

void ExecuteFaceDirection::MergeFrom(const ExecuteFaceDirection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:goldo.nucleo.propulsion.ExecuteFaceDirection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sequence_number() != 0) {
    set_sequence_number(from.sequence_number());
  }
  if (from.yaw() != 0) {
    set_yaw(from.yaw());
  }
  if (from.yaw_rate() != 0) {
    set_yaw_rate(from.yaw_rate());
  }
}

void ExecuteFaceDirection::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:goldo.nucleo.propulsion.ExecuteFaceDirection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecuteFaceDirection::CopyFrom(const ExecuteFaceDirection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:goldo.nucleo.propulsion.ExecuteFaceDirection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecuteFaceDirection::IsInitialized() const {
  return true;
}

void ExecuteFaceDirection::Swap(ExecuteFaceDirection* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExecuteFaceDirection::InternalSwap(ExecuteFaceDirection* other) {
  using std::swap;
  swap(sequence_number_, other->sequence_number_);
  swap(yaw_, other->yaw_);
  swap(yaw_rate_, other->yaw_rate_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ExecuteFaceDirection::GetMetadata() const {
  protobuf_goldo_2fnucleo_2fpropulsion_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2fnucleo_2fpropulsion_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace propulsion
}  // namespace nucleo
}  // namespace goldo
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::goldo::nucleo::propulsion::StateChange* Arena::CreateMaybeMessage< ::goldo::nucleo::propulsion::StateChange >(Arena* arena) {
  return Arena::CreateInternal< ::goldo::nucleo::propulsion::StateChange >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::goldo::nucleo::propulsion::PropulsionEvent* Arena::CreateMaybeMessage< ::goldo::nucleo::propulsion::PropulsionEvent >(Arena* arena) {
  return Arena::CreateInternal< ::goldo::nucleo::propulsion::PropulsionEvent >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::goldo::nucleo::propulsion::Telemetry* Arena::CreateMaybeMessage< ::goldo::nucleo::propulsion::Telemetry >(Arena* arena) {
  return Arena::CreateInternal< ::goldo::nucleo::propulsion::Telemetry >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::goldo::nucleo::propulsion::TelemetryEx* Arena::CreateMaybeMessage< ::goldo::nucleo::propulsion::TelemetryEx >(Arena* arena) {
  return Arena::CreateInternal< ::goldo::nucleo::propulsion::TelemetryEx >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::goldo::nucleo::propulsion::MotorsVelocitySetpoints* Arena::CreateMaybeMessage< ::goldo::nucleo::propulsion::MotorsVelocitySetpoints >(Arena* arena) {
  return Arena::CreateInternal< ::goldo::nucleo::propulsion::MotorsVelocitySetpoints >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::goldo::nucleo::propulsion::OdometryConfig* Arena::CreateMaybeMessage< ::goldo::nucleo::propulsion::OdometryConfig >(Arena* arena) {
  return Arena::CreateInternal< ::goldo::nucleo::propulsion::OdometryConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::goldo::nucleo::propulsion::PIDConfig* Arena::CreateMaybeMessage< ::goldo::nucleo::propulsion::PIDConfig >(Arena* arena) {
  return Arena::CreateInternal< ::goldo::nucleo::propulsion::PIDConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::goldo::nucleo::propulsion::PropulsionLowLevelPIDConfig* Arena::CreateMaybeMessage< ::goldo::nucleo::propulsion::PropulsionLowLevelPIDConfig >(Arena* arena) {
  return Arena::CreateInternal< ::goldo::nucleo::propulsion::PropulsionLowLevelPIDConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::goldo::nucleo::propulsion::PropulsionLowLevelControllerConfig* Arena::CreateMaybeMessage< ::goldo::nucleo::propulsion::PropulsionLowLevelControllerConfig >(Arena* arena) {
  return Arena::CreateInternal< ::goldo::nucleo::propulsion::PropulsionLowLevelControllerConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::goldo::nucleo::propulsion::PropulsionControllerConfig* Arena::CreateMaybeMessage< ::goldo::nucleo::propulsion::PropulsionControllerConfig >(Arena* arena) {
  return Arena::CreateInternal< ::goldo::nucleo::propulsion::PropulsionControllerConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::goldo::nucleo::propulsion::PropulsionTaskConfig* Arena::CreateMaybeMessage< ::goldo::nucleo::propulsion::PropulsionTaskConfig >(Arena* arena) {
  return Arena::CreateInternal< ::goldo::nucleo::propulsion::PropulsionTaskConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::goldo::nucleo::propulsion::CommandStatus* Arena::CreateMaybeMessage< ::goldo::nucleo::propulsion::CommandStatus >(Arena* arena) {
  return Arena::CreateInternal< ::goldo::nucleo::propulsion::CommandStatus >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::goldo::nucleo::propulsion::SetMotorsTorqueLimits* Arena::CreateMaybeMessage< ::goldo::nucleo::propulsion::SetMotorsTorqueLimits >(Arena* arena) {
  return Arena::CreateInternal< ::goldo::nucleo::propulsion::SetMotorsTorqueLimits >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::goldo::nucleo::propulsion::CmdEmpty* Arena::CreateMaybeMessage< ::goldo::nucleo::propulsion::CmdEmpty >(Arena* arena) {
  return Arena::CreateInternal< ::goldo::nucleo::propulsion::CmdEmpty >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::goldo::nucleo::propulsion::CmdSetEnable* Arena::CreateMaybeMessage< ::goldo::nucleo::propulsion::CmdSetEnable >(Arena* arena) {
  return Arena::CreateInternal< ::goldo::nucleo::propulsion::CmdSetEnable >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::goldo::nucleo::propulsion::CmdSetAccelerationLimits* Arena::CreateMaybeMessage< ::goldo::nucleo::propulsion::CmdSetAccelerationLimits >(Arena* arena) {
  return Arena::CreateInternal< ::goldo::nucleo::propulsion::CmdSetAccelerationLimits >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::goldo::nucleo::propulsion::CmdSetPose* Arena::CreateMaybeMessage< ::goldo::nucleo::propulsion::CmdSetPose >(Arena* arena) {
  return Arena::CreateInternal< ::goldo::nucleo::propulsion::CmdSetPose >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::goldo::nucleo::propulsion::CmdTransformPose* Arena::CreateMaybeMessage< ::goldo::nucleo::propulsion::CmdTransformPose >(Arena* arena) {
  return Arena::CreateInternal< ::goldo::nucleo::propulsion::CmdTransformPose >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::goldo::nucleo::propulsion::CmdSetTargetSpeed* Arena::CreateMaybeMessage< ::goldo::nucleo::propulsion::CmdSetTargetSpeed >(Arena* arena) {
  return Arena::CreateInternal< ::goldo::nucleo::propulsion::CmdSetTargetSpeed >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::goldo::nucleo::propulsion::CmdMeasureNormal* Arena::CreateMaybeMessage< ::goldo::nucleo::propulsion::CmdMeasureNormal >(Arena* arena) {
  return Arena::CreateInternal< ::goldo::nucleo::propulsion::CmdMeasureNormal >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::goldo::nucleo::propulsion::CmdSetEventSensorsMask* Arena::CreateMaybeMessage< ::goldo::nucleo::propulsion::CmdSetEventSensorsMask >(Arena* arena) {
  return Arena::CreateInternal< ::goldo::nucleo::propulsion::CmdSetEventSensorsMask >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::goldo::nucleo::propulsion::ExecuteTrajectory* Arena::CreateMaybeMessage< ::goldo::nucleo::propulsion::ExecuteTrajectory >(Arena* arena) {
  return Arena::CreateInternal< ::goldo::nucleo::propulsion::ExecuteTrajectory >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::goldo::nucleo::propulsion::ExecuteTranslation* Arena::CreateMaybeMessage< ::goldo::nucleo::propulsion::ExecuteTranslation >(Arena* arena) {
  return Arena::CreateInternal< ::goldo::nucleo::propulsion::ExecuteTranslation >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::goldo::nucleo::propulsion::ExecuteReposition* Arena::CreateMaybeMessage< ::goldo::nucleo::propulsion::ExecuteReposition >(Arena* arena) {
  return Arena::CreateInternal< ::goldo::nucleo::propulsion::ExecuteReposition >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::goldo::nucleo::propulsion::ExecuteRotation* Arena::CreateMaybeMessage< ::goldo::nucleo::propulsion::ExecuteRotation >(Arena* arena) {
  return Arena::CreateInternal< ::goldo::nucleo::propulsion::ExecuteRotation >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::goldo::nucleo::propulsion::ExecuteMoveTo* Arena::CreateMaybeMessage< ::goldo::nucleo::propulsion::ExecuteMoveTo >(Arena* arena) {
  return Arena::CreateInternal< ::goldo::nucleo::propulsion::ExecuteMoveTo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::goldo::nucleo::propulsion::ExecutePointTo* Arena::CreateMaybeMessage< ::goldo::nucleo::propulsion::ExecutePointTo >(Arena* arena) {
  return Arena::CreateInternal< ::goldo::nucleo::propulsion::ExecutePointTo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::goldo::nucleo::propulsion::ExecuteFaceDirection* Arena::CreateMaybeMessage< ::goldo::nucleo::propulsion::ExecuteFaceDirection >(Arena* arena) {
  return Arena::CreateInternal< ::goldo::nucleo::propulsion::ExecuteFaceDirection >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
