// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: goldo/nucleo/hal.proto

#include "goldo/nucleo/hal.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_goldo_2fnucleo_2fhal_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_goldo_2fnucleo_2fhal_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_EncoderConfig;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_goldo_2fnucleo_2fhal_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GpioConfig;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_goldo_2fnucleo_2fhal_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_I2cConfig;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_goldo_2fnucleo_2fhal_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PwmConfig;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_goldo_2fnucleo_2fhal_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SpiConfig;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_goldo_2fnucleo_2fhal_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TimerConfig;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_goldo_2fnucleo_2fhal_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_UartConfig;
}  // namespace protobuf_goldo_2fnucleo_2fhal_2eproto
namespace goldo {
namespace nucleo {
namespace hal {
class GpioConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GpioConfig>
      _instance;
} _GpioConfig_default_instance_;
class TimerConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TimerConfig>
      _instance;
} _TimerConfig_default_instance_;
class PwmConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PwmConfig>
      _instance;
} _PwmConfig_default_instance_;
class EncoderConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EncoderConfig>
      _instance;
} _EncoderConfig_default_instance_;
class UartConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UartConfig>
      _instance;
} _UartConfig_default_instance_;
class I2cConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<I2cConfig>
      _instance;
} _I2cConfig_default_instance_;
class SpiConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SpiConfig>
      _instance;
} _SpiConfig_default_instance_;
class HalConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HalConfig>
      _instance;
} _HalConfig_default_instance_;
}  // namespace hal
}  // namespace nucleo
}  // namespace goldo
namespace protobuf_goldo_2fnucleo_2fhal_2eproto {
static void InitDefaultsGpioConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::goldo::nucleo::hal::_GpioConfig_default_instance_;
    new (ptr) ::goldo::nucleo::hal::GpioConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::goldo::nucleo::hal::GpioConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GpioConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGpioConfig}, {}};

static void InitDefaultsTimerConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::goldo::nucleo::hal::_TimerConfig_default_instance_;
    new (ptr) ::goldo::nucleo::hal::TimerConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::goldo::nucleo::hal::TimerConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TimerConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTimerConfig}, {}};

static void InitDefaultsPwmConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::goldo::nucleo::hal::_PwmConfig_default_instance_;
    new (ptr) ::goldo::nucleo::hal::PwmConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::goldo::nucleo::hal::PwmConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PwmConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPwmConfig}, {}};

static void InitDefaultsEncoderConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::goldo::nucleo::hal::_EncoderConfig_default_instance_;
    new (ptr) ::goldo::nucleo::hal::EncoderConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::goldo::nucleo::hal::EncoderConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_EncoderConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEncoderConfig}, {}};

static void InitDefaultsUartConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::goldo::nucleo::hal::_UartConfig_default_instance_;
    new (ptr) ::goldo::nucleo::hal::UartConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::goldo::nucleo::hal::UartConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UartConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUartConfig}, {}};

static void InitDefaultsI2cConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::goldo::nucleo::hal::_I2cConfig_default_instance_;
    new (ptr) ::goldo::nucleo::hal::I2cConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::goldo::nucleo::hal::I2cConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_I2cConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsI2cConfig}, {}};

static void InitDefaultsSpiConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::goldo::nucleo::hal::_SpiConfig_default_instance_;
    new (ptr) ::goldo::nucleo::hal::SpiConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::goldo::nucleo::hal::SpiConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SpiConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSpiConfig}, {}};

static void InitDefaultsHalConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::goldo::nucleo::hal::_HalConfig_default_instance_;
    new (ptr) ::goldo::nucleo::hal::HalConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::goldo::nucleo::hal::HalConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<7> scc_info_HalConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 7, InitDefaultsHalConfig}, {
      &protobuf_goldo_2fnucleo_2fhal_2eproto::scc_info_GpioConfig.base,
      &protobuf_goldo_2fnucleo_2fhal_2eproto::scc_info_TimerConfig.base,
      &protobuf_goldo_2fnucleo_2fhal_2eproto::scc_info_PwmConfig.base,
      &protobuf_goldo_2fnucleo_2fhal_2eproto::scc_info_EncoderConfig.base,
      &protobuf_goldo_2fnucleo_2fhal_2eproto::scc_info_UartConfig.base,
      &protobuf_goldo_2fnucleo_2fhal_2eproto::scc_info_I2cConfig.base,
      &protobuf_goldo_2fnucleo_2fhal_2eproto::scc_info_SpiConfig.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_GpioConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TimerConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PwmConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EncoderConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UartConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_I2cConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SpiConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HalConfig.base);
}

::google::protobuf::Metadata file_level_metadata[8];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[4];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::hal::GpioConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::hal::GpioConfig, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::hal::GpioConfig, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::hal::GpioConfig, pin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::hal::GpioConfig, mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::hal::GpioConfig, pull_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::hal::TimerConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::hal::TimerConfig, device_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::hal::TimerConfig, prescaler_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::hal::TimerConfig, period_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::hal::PwmConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::hal::PwmConfig, device_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::hal::EncoderConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::hal::EncoderConfig, device_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::hal::EncoderConfig, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::hal::EncoderConfig, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::hal::EncoderConfig, mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::hal::EncoderConfig, dir_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::hal::EncoderConfig, ch1_pin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::hal::EncoderConfig, ch2_pin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::hal::EncoderConfig, ch3_pin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::hal::EncoderConfig, period_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::hal::UartConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::hal::UartConfig, device_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::hal::UartConfig, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::hal::UartConfig, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::hal::UartConfig, rx_buffer_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::hal::UartConfig, tx_buffer_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::hal::UartConfig, rx_blocking_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::hal::UartConfig, tx_blocking_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::hal::UartConfig, rx_dma_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::hal::UartConfig, tx_dma_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::hal::UartConfig, rx_pin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::hal::UartConfig, tx_pin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::hal::UartConfig, txen_pin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::hal::UartConfig, baudrate_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::hal::I2cConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::hal::I2cConfig, device_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::hal::I2cConfig, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::hal::I2cConfig, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::hal::I2cConfig, rx_buffer_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::hal::I2cConfig, tx_buffer_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::hal::I2cConfig, rx_blocking_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::hal::I2cConfig, tx_blocking_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::hal::I2cConfig, rx_dma_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::hal::I2cConfig, tx_dma_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::hal::I2cConfig, scl_pin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::hal::I2cConfig, sda_pin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::hal::I2cConfig, timing_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::hal::SpiConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::hal::SpiConfig, device_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::hal::SpiConfig, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::hal::SpiConfig, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::hal::SpiConfig, rx_buffer_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::hal::SpiConfig, tx_buffer_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::hal::SpiConfig, rx_blocking_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::hal::SpiConfig, tx_blocking_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::hal::SpiConfig, rx_dma_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::hal::SpiConfig, tx_dma_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::hal::SpiConfig, sck_pin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::hal::SpiConfig, mosi_pin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::hal::SpiConfig, miso_pin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::hal::SpiConfig, nss_pin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::hal::SpiConfig, baudrate_prescaler_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::hal::HalConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::hal::HalConfig, gpio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::hal::HalConfig, timer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::hal::HalConfig, pwm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::hal::HalConfig, encoder_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::hal::HalConfig, uart_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::hal::HalConfig, i2c_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::hal::HalConfig, spi_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::goldo::nucleo::hal::GpioConfig)},
  { 10, -1, sizeof(::goldo::nucleo::hal::TimerConfig)},
  { 18, -1, sizeof(::goldo::nucleo::hal::PwmConfig)},
  { 24, -1, sizeof(::goldo::nucleo::hal::EncoderConfig)},
  { 38, -1, sizeof(::goldo::nucleo::hal::UartConfig)},
  { 56, -1, sizeof(::goldo::nucleo::hal::I2cConfig)},
  { 73, -1, sizeof(::goldo::nucleo::hal::SpiConfig)},
  { 92, -1, sizeof(::goldo::nucleo::hal::HalConfig)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::goldo::nucleo::hal::_GpioConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::goldo::nucleo::hal::_TimerConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::goldo::nucleo::hal::_PwmConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::goldo::nucleo::hal::_EncoderConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::goldo::nucleo::hal::_UartConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::goldo::nucleo::hal::_I2cConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::goldo::nucleo::hal::_SpiConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::goldo::nucleo::hal::_HalConfig_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "goldo/nucleo/hal.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 8);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\026goldo/nucleo/hal.proto\022\020goldo.nucleo.h"
      "al\032\027goldo/pb2_options.proto\"\207\001\n\nGpioConf"
      "ig\022\n\n\002id\030\002 \001(\r\022\014\n\004name\030\003 \001(\t\022\013\n\003pin\030\004 \001("
      "\t\022(\n\004mode\030\005 \001(\0162\032.goldo.nucleo.hal.GpioM"
      "ode\022(\n\004pull\030\006 \001(\0162\032.goldo.nucleo.hal.Gpi"
      "oPull\"@\n\013TimerConfig\022\016\n\006device\030\001 \001(\t\022\021\n\t"
      "prescaler\030\004 \001(\r\022\016\n\006period\030\005 \001(\r\"\033\n\tPwmCo"
      "nfig\022\016\n\006device\030\001 \001(\t\"\332\001\n\rEncoderConfig\022\016"
      "\n\006device\030\001 \001(\t\022\n\n\002id\030\002 \001(\r\022\014\n\004name\030\003 \001(\t"
      "\022+\n\004mode\030\004 \001(\0162\035.goldo.nucleo.hal.Encode"
      "rMode\022/\n\003dir\030\005 \001(\0162\".goldo.nucleo.hal.En"
      "coderDirection\022\017\n\007ch1_pin\030\006 \001(\t\022\017\n\007ch2_p"
      "in\030\007 \001(\t\022\017\n\007ch3_pin\030\010 \001(\t\022\016\n\006period\030\t \001("
      "\r\"\364\001\n\nUartConfig\022\016\n\006device\030\001 \001(\t\022\n\n\002id\030\002"
      " \001(\r\022\014\n\004name\030\003 \001(\t\022\026\n\016rx_buffer_size\030\004 \001"
      "(\r\022\026\n\016tx_buffer_size\030\005 \001(\r\022\023\n\013rx_blockin"
      "g\030\006 \001(\010\022\023\n\013tx_blocking\030\007 \001(\010\022\016\n\006rx_dma\030\010"
      " \001(\010\022\016\n\006tx_dma\030\t \001(\010\022\016\n\006rx_pin\030\n \001(\t\022\016\n\006"
      "tx_pin\030\013 \001(\t\022\020\n\010txen_pin\030\014 \001(\t\022\020\n\010baudra"
      "te\030\r \001(\r\"\341\001\n\tI2cConfig\022\016\n\006device\030\001 \001(\t\022\n"
      "\n\002id\030\002 \001(\r\022\014\n\004name\030\003 \001(\t\022\026\n\016rx_buffer_si"
      "ze\030\004 \001(\r\022\026\n\016tx_buffer_size\030\005 \001(\r\022\023\n\013rx_b"
      "locking\030\006 \001(\010\022\023\n\013tx_blocking\030\007 \001(\010\022\016\n\006rx"
      "_dma\030\010 \001(\010\022\016\n\006tx_dma\030\t \001(\010\022\017\n\007scl_pin\030\n "
      "\001(\t\022\017\n\007sda_pin\030\013 \001(\t\022\016\n\006timing\030\014 \001(\r\"\221\002\n"
      "\tSpiConfig\022\016\n\006device\030\001 \001(\t\022\n\n\002id\030\002 \001(\r\022\014"
      "\n\004name\030\003 \001(\t\022\026\n\016rx_buffer_size\030\004 \001(\r\022\026\n\016"
      "tx_buffer_size\030\005 \001(\r\022\023\n\013rx_blocking\030\006 \001("
      "\010\022\023\n\013tx_blocking\030\007 \001(\010\022\016\n\006rx_dma\030\010 \001(\010\022\016"
      "\n\006tx_dma\030\t \001(\010\022\017\n\007sck_pin\030\n \001(\t\022\020\n\010mosi_"
      "pin\030\013 \001(\t\022\020\n\010miso_pin\030\014 \001(\t\022\017\n\007nss_pin\030\r"
      " \001(\t\022\032\n\022baudrate_prescaler\030\016 \001(\r\"\301\002\n\tHal"
      "Config\022*\n\004gpio\030\001 \003(\0132\034.goldo.nucleo.hal."
      "GpioConfig\022,\n\005timer\030\002 \003(\0132\035.goldo.nucleo"
      ".hal.TimerConfig\022(\n\003pwm\030\003 \003(\0132\033.goldo.nu"
      "cleo.hal.PwmConfig\0220\n\007encoder\030\004 \003(\0132\037.go"
      "ldo.nucleo.hal.EncoderConfig\022*\n\004uart\030\005 \003"
      "(\0132\034.goldo.nucleo.hal.UartConfig\022(\n\003i2c\030"
      "\006 \003(\0132\033.goldo.nucleo.hal.I2cConfig\022(\n\003sp"
      "i\030\007 \003(\0132\033.goldo.nucleo.hal.SpiConfig**\n\010"
      "GpioMode\022\006\n\002IN\020\000\022\n\n\006OUT_PP\020\001\022\n\n\006OUT_OD\020\002"
      "*\034\n\010GpioPull\022\010\n\004NONE\020\000\022\006\n\002UP\020\004*,\n\020Encode"
      "rDirection\022\013\n\007FORWARD\020\000\022\013\n\007REVERSE\020\001*\"\n\013"
      "EncoderMode\022\n\n\006NORMAL\020\000\022\007\n\003HAL\020\002b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1760);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "goldo/nucleo/hal.proto", &protobuf_RegisterTypes);
  ::protobuf_goldo_2fpb2_5foptions_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_goldo_2fnucleo_2fhal_2eproto
namespace goldo {
namespace nucleo {
namespace hal {
const ::google::protobuf::EnumDescriptor* GpioMode_descriptor() {
  protobuf_goldo_2fnucleo_2fhal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_goldo_2fnucleo_2fhal_2eproto::file_level_enum_descriptors[0];
}
bool GpioMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GpioPull_descriptor() {
  protobuf_goldo_2fnucleo_2fhal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_goldo_2fnucleo_2fhal_2eproto::file_level_enum_descriptors[1];
}
bool GpioPull_IsValid(int value) {
  switch (value) {
    case 0:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EncoderDirection_descriptor() {
  protobuf_goldo_2fnucleo_2fhal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_goldo_2fnucleo_2fhal_2eproto::file_level_enum_descriptors[2];
}
bool EncoderDirection_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EncoderMode_descriptor() {
  protobuf_goldo_2fnucleo_2fhal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_goldo_2fnucleo_2fhal_2eproto::file_level_enum_descriptors[3];
}
bool EncoderMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void GpioConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GpioConfig::kIdFieldNumber;
const int GpioConfig::kNameFieldNumber;
const int GpioConfig::kPinFieldNumber;
const int GpioConfig::kModeFieldNumber;
const int GpioConfig::kPullFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GpioConfig::GpioConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_goldo_2fnucleo_2fhal_2eproto::scc_info_GpioConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:goldo.nucleo.hal.GpioConfig)
}
GpioConfig::GpioConfig(const GpioConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  pin_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pin().size() > 0) {
    pin_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pin_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&pull_) -
    reinterpret_cast<char*>(&id_)) + sizeof(pull_));
  // @@protoc_insertion_point(copy_constructor:goldo.nucleo.hal.GpioConfig)
}

void GpioConfig::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pin_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pull_) -
      reinterpret_cast<char*>(&id_)) + sizeof(pull_));
}

GpioConfig::~GpioConfig() {
  // @@protoc_insertion_point(destructor:goldo.nucleo.hal.GpioConfig)
  SharedDtor();
}

void GpioConfig::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pin_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GpioConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GpioConfig::descriptor() {
  ::protobuf_goldo_2fnucleo_2fhal_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2fnucleo_2fhal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GpioConfig& GpioConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_goldo_2fnucleo_2fhal_2eproto::scc_info_GpioConfig.base);
  return *internal_default_instance();
}


void GpioConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:goldo.nucleo.hal.GpioConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pin_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pull_) -
      reinterpret_cast<char*>(&id_)) + sizeof(pull_));
  _internal_metadata_.Clear();
}

bool GpioConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:goldo.nucleo.hal.GpioConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "goldo.nucleo.hal.GpioConfig.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string pin = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pin()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pin().data(), static_cast<int>(this->pin().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "goldo.nucleo.hal.GpioConfig.pin"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .goldo.nucleo.hal.GpioMode mode = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mode(static_cast< ::goldo::nucleo::hal::GpioMode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .goldo.nucleo.hal.GpioPull pull = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_pull(static_cast< ::goldo::nucleo::hal::GpioPull >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:goldo.nucleo.hal.GpioConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:goldo.nucleo.hal.GpioConfig)
  return false;
#undef DO_
}

void GpioConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:goldo.nucleo.hal.GpioConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 2;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "goldo.nucleo.hal.GpioConfig.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // string pin = 4;
  if (this->pin().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pin().data(), static_cast<int>(this->pin().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "goldo.nucleo.hal.GpioConfig.pin");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->pin(), output);
  }

  // .goldo.nucleo.hal.GpioMode mode = 5;
  if (this->mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->mode(), output);
  }

  // .goldo.nucleo.hal.GpioPull pull = 6;
  if (this->pull() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->pull(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:goldo.nucleo.hal.GpioConfig)
}

::google::protobuf::uint8* GpioConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:goldo.nucleo.hal.GpioConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 2;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "goldo.nucleo.hal.GpioConfig.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // string pin = 4;
  if (this->pin().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pin().data(), static_cast<int>(this->pin().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "goldo.nucleo.hal.GpioConfig.pin");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->pin(), target);
  }

  // .goldo.nucleo.hal.GpioMode mode = 5;
  if (this->mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->mode(), target);
  }

  // .goldo.nucleo.hal.GpioPull pull = 6;
  if (this->pull() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->pull(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:goldo.nucleo.hal.GpioConfig)
  return target;
}

size_t GpioConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:goldo.nucleo.hal.GpioConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string pin = 4;
  if (this->pin().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pin());
  }

  // uint32 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  // .goldo.nucleo.hal.GpioMode mode = 5;
  if (this->mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
  }

  // .goldo.nucleo.hal.GpioPull pull = 6;
  if (this->pull() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->pull());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GpioConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:goldo.nucleo.hal.GpioConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const GpioConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GpioConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:goldo.nucleo.hal.GpioConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:goldo.nucleo.hal.GpioConfig)
    MergeFrom(*source);
  }
}

void GpioConfig::MergeFrom(const GpioConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:goldo.nucleo.hal.GpioConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.pin().size() > 0) {

    pin_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pin_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.mode() != 0) {
    set_mode(from.mode());
  }
  if (from.pull() != 0) {
    set_pull(from.pull());
  }
}

void GpioConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:goldo.nucleo.hal.GpioConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GpioConfig::CopyFrom(const GpioConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:goldo.nucleo.hal.GpioConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GpioConfig::IsInitialized() const {
  return true;
}

void GpioConfig::Swap(GpioConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GpioConfig::InternalSwap(GpioConfig* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pin_.Swap(&other->pin_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(mode_, other->mode_);
  swap(pull_, other->pull_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GpioConfig::GetMetadata() const {
  protobuf_goldo_2fnucleo_2fhal_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2fnucleo_2fhal_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TimerConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TimerConfig::kDeviceFieldNumber;
const int TimerConfig::kPrescalerFieldNumber;
const int TimerConfig::kPeriodFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TimerConfig::TimerConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_goldo_2fnucleo_2fhal_2eproto::scc_info_TimerConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:goldo.nucleo.hal.TimerConfig)
}
TimerConfig::TimerConfig(const TimerConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  device_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.device().size() > 0) {
    device_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_);
  }
  ::memcpy(&prescaler_, &from.prescaler_,
    static_cast<size_t>(reinterpret_cast<char*>(&period_) -
    reinterpret_cast<char*>(&prescaler_)) + sizeof(period_));
  // @@protoc_insertion_point(copy_constructor:goldo.nucleo.hal.TimerConfig)
}

void TimerConfig::SharedCtor() {
  device_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&prescaler_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&period_) -
      reinterpret_cast<char*>(&prescaler_)) + sizeof(period_));
}

TimerConfig::~TimerConfig() {
  // @@protoc_insertion_point(destructor:goldo.nucleo.hal.TimerConfig)
  SharedDtor();
}

void TimerConfig::SharedDtor() {
  device_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TimerConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TimerConfig::descriptor() {
  ::protobuf_goldo_2fnucleo_2fhal_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2fnucleo_2fhal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TimerConfig& TimerConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_goldo_2fnucleo_2fhal_2eproto::scc_info_TimerConfig.base);
  return *internal_default_instance();
}


void TimerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:goldo.nucleo.hal.TimerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&prescaler_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&period_) -
      reinterpret_cast<char*>(&prescaler_)) + sizeof(period_));
  _internal_metadata_.Clear();
}

bool TimerConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:goldo.nucleo.hal.TimerConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string device = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->device().data(), static_cast<int>(this->device().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "goldo.nucleo.hal.TimerConfig.device"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 prescaler = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prescaler_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 period = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &period_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:goldo.nucleo.hal.TimerConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:goldo.nucleo.hal.TimerConfig)
  return false;
#undef DO_
}

void TimerConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:goldo.nucleo.hal.TimerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string device = 1;
  if (this->device().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device().data(), static_cast<int>(this->device().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "goldo.nucleo.hal.TimerConfig.device");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->device(), output);
  }

  // uint32 prescaler = 4;
  if (this->prescaler() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->prescaler(), output);
  }

  // uint32 period = 5;
  if (this->period() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->period(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:goldo.nucleo.hal.TimerConfig)
}

::google::protobuf::uint8* TimerConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:goldo.nucleo.hal.TimerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string device = 1;
  if (this->device().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device().data(), static_cast<int>(this->device().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "goldo.nucleo.hal.TimerConfig.device");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->device(), target);
  }

  // uint32 prescaler = 4;
  if (this->prescaler() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->prescaler(), target);
  }

  // uint32 period = 5;
  if (this->period() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->period(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:goldo.nucleo.hal.TimerConfig)
  return target;
}

size_t TimerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:goldo.nucleo.hal.TimerConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string device = 1;
  if (this->device().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->device());
  }

  // uint32 prescaler = 4;
  if (this->prescaler() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->prescaler());
  }

  // uint32 period = 5;
  if (this->period() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->period());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TimerConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:goldo.nucleo.hal.TimerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const TimerConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TimerConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:goldo.nucleo.hal.TimerConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:goldo.nucleo.hal.TimerConfig)
    MergeFrom(*source);
  }
}

void TimerConfig::MergeFrom(const TimerConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:goldo.nucleo.hal.TimerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.device().size() > 0) {

    device_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_);
  }
  if (from.prescaler() != 0) {
    set_prescaler(from.prescaler());
  }
  if (from.period() != 0) {
    set_period(from.period());
  }
}

void TimerConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:goldo.nucleo.hal.TimerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimerConfig::CopyFrom(const TimerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:goldo.nucleo.hal.TimerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimerConfig::IsInitialized() const {
  return true;
}

void TimerConfig::Swap(TimerConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TimerConfig::InternalSwap(TimerConfig* other) {
  using std::swap;
  device_.Swap(&other->device_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(prescaler_, other->prescaler_);
  swap(period_, other->period_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TimerConfig::GetMetadata() const {
  protobuf_goldo_2fnucleo_2fhal_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2fnucleo_2fhal_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PwmConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PwmConfig::kDeviceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PwmConfig::PwmConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_goldo_2fnucleo_2fhal_2eproto::scc_info_PwmConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:goldo.nucleo.hal.PwmConfig)
}
PwmConfig::PwmConfig(const PwmConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  device_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.device().size() > 0) {
    device_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_);
  }
  // @@protoc_insertion_point(copy_constructor:goldo.nucleo.hal.PwmConfig)
}

void PwmConfig::SharedCtor() {
  device_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

PwmConfig::~PwmConfig() {
  // @@protoc_insertion_point(destructor:goldo.nucleo.hal.PwmConfig)
  SharedDtor();
}

void PwmConfig::SharedDtor() {
  device_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PwmConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PwmConfig::descriptor() {
  ::protobuf_goldo_2fnucleo_2fhal_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2fnucleo_2fhal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PwmConfig& PwmConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_goldo_2fnucleo_2fhal_2eproto::scc_info_PwmConfig.base);
  return *internal_default_instance();
}


void PwmConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:goldo.nucleo.hal.PwmConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool PwmConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:goldo.nucleo.hal.PwmConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string device = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->device().data(), static_cast<int>(this->device().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "goldo.nucleo.hal.PwmConfig.device"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:goldo.nucleo.hal.PwmConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:goldo.nucleo.hal.PwmConfig)
  return false;
#undef DO_
}

void PwmConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:goldo.nucleo.hal.PwmConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string device = 1;
  if (this->device().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device().data(), static_cast<int>(this->device().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "goldo.nucleo.hal.PwmConfig.device");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->device(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:goldo.nucleo.hal.PwmConfig)
}

::google::protobuf::uint8* PwmConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:goldo.nucleo.hal.PwmConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string device = 1;
  if (this->device().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device().data(), static_cast<int>(this->device().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "goldo.nucleo.hal.PwmConfig.device");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->device(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:goldo.nucleo.hal.PwmConfig)
  return target;
}

size_t PwmConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:goldo.nucleo.hal.PwmConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string device = 1;
  if (this->device().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->device());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PwmConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:goldo.nucleo.hal.PwmConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const PwmConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PwmConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:goldo.nucleo.hal.PwmConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:goldo.nucleo.hal.PwmConfig)
    MergeFrom(*source);
  }
}

void PwmConfig::MergeFrom(const PwmConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:goldo.nucleo.hal.PwmConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.device().size() > 0) {

    device_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_);
  }
}

void PwmConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:goldo.nucleo.hal.PwmConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PwmConfig::CopyFrom(const PwmConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:goldo.nucleo.hal.PwmConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PwmConfig::IsInitialized() const {
  return true;
}

void PwmConfig::Swap(PwmConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PwmConfig::InternalSwap(PwmConfig* other) {
  using std::swap;
  device_.Swap(&other->device_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PwmConfig::GetMetadata() const {
  protobuf_goldo_2fnucleo_2fhal_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2fnucleo_2fhal_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void EncoderConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EncoderConfig::kDeviceFieldNumber;
const int EncoderConfig::kIdFieldNumber;
const int EncoderConfig::kNameFieldNumber;
const int EncoderConfig::kModeFieldNumber;
const int EncoderConfig::kDirFieldNumber;
const int EncoderConfig::kCh1PinFieldNumber;
const int EncoderConfig::kCh2PinFieldNumber;
const int EncoderConfig::kCh3PinFieldNumber;
const int EncoderConfig::kPeriodFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EncoderConfig::EncoderConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_goldo_2fnucleo_2fhal_2eproto::scc_info_EncoderConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:goldo.nucleo.hal.EncoderConfig)
}
EncoderConfig::EncoderConfig(const EncoderConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  device_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.device().size() > 0) {
    device_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ch1_pin_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ch1_pin().size() > 0) {
    ch1_pin_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ch1_pin_);
  }
  ch2_pin_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ch2_pin().size() > 0) {
    ch2_pin_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ch2_pin_);
  }
  ch3_pin_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ch3_pin().size() > 0) {
    ch3_pin_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ch3_pin_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&period_) -
    reinterpret_cast<char*>(&id_)) + sizeof(period_));
  // @@protoc_insertion_point(copy_constructor:goldo.nucleo.hal.EncoderConfig)
}

void EncoderConfig::SharedCtor() {
  device_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ch1_pin_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ch2_pin_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ch3_pin_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&period_) -
      reinterpret_cast<char*>(&id_)) + sizeof(period_));
}

EncoderConfig::~EncoderConfig() {
  // @@protoc_insertion_point(destructor:goldo.nucleo.hal.EncoderConfig)
  SharedDtor();
}

void EncoderConfig::SharedDtor() {
  device_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ch1_pin_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ch2_pin_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ch3_pin_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EncoderConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* EncoderConfig::descriptor() {
  ::protobuf_goldo_2fnucleo_2fhal_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2fnucleo_2fhal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EncoderConfig& EncoderConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_goldo_2fnucleo_2fhal_2eproto::scc_info_EncoderConfig.base);
  return *internal_default_instance();
}


void EncoderConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:goldo.nucleo.hal.EncoderConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ch1_pin_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ch2_pin_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ch3_pin_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&period_) -
      reinterpret_cast<char*>(&id_)) + sizeof(period_));
  _internal_metadata_.Clear();
}

bool EncoderConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:goldo.nucleo.hal.EncoderConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string device = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->device().data(), static_cast<int>(this->device().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "goldo.nucleo.hal.EncoderConfig.device"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "goldo.nucleo.hal.EncoderConfig.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .goldo.nucleo.hal.EncoderMode mode = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mode(static_cast< ::goldo::nucleo::hal::EncoderMode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .goldo.nucleo.hal.EncoderDirection dir = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_dir(static_cast< ::goldo::nucleo::hal::EncoderDirection >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ch1_pin = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ch1_pin()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ch1_pin().data(), static_cast<int>(this->ch1_pin().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "goldo.nucleo.hal.EncoderConfig.ch1_pin"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ch2_pin = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ch2_pin()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ch2_pin().data(), static_cast<int>(this->ch2_pin().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "goldo.nucleo.hal.EncoderConfig.ch2_pin"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ch3_pin = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ch3_pin()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ch3_pin().data(), static_cast<int>(this->ch3_pin().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "goldo.nucleo.hal.EncoderConfig.ch3_pin"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 period = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &period_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:goldo.nucleo.hal.EncoderConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:goldo.nucleo.hal.EncoderConfig)
  return false;
#undef DO_
}

void EncoderConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:goldo.nucleo.hal.EncoderConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string device = 1;
  if (this->device().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device().data(), static_cast<int>(this->device().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "goldo.nucleo.hal.EncoderConfig.device");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->device(), output);
  }

  // uint32 id = 2;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "goldo.nucleo.hal.EncoderConfig.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // .goldo.nucleo.hal.EncoderMode mode = 4;
  if (this->mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->mode(), output);
  }

  // .goldo.nucleo.hal.EncoderDirection dir = 5;
  if (this->dir() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->dir(), output);
  }

  // string ch1_pin = 6;
  if (this->ch1_pin().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ch1_pin().data(), static_cast<int>(this->ch1_pin().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "goldo.nucleo.hal.EncoderConfig.ch1_pin");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->ch1_pin(), output);
  }

  // string ch2_pin = 7;
  if (this->ch2_pin().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ch2_pin().data(), static_cast<int>(this->ch2_pin().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "goldo.nucleo.hal.EncoderConfig.ch2_pin");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->ch2_pin(), output);
  }

  // string ch3_pin = 8;
  if (this->ch3_pin().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ch3_pin().data(), static_cast<int>(this->ch3_pin().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "goldo.nucleo.hal.EncoderConfig.ch3_pin");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->ch3_pin(), output);
  }

  // uint32 period = 9;
  if (this->period() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->period(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:goldo.nucleo.hal.EncoderConfig)
}

::google::protobuf::uint8* EncoderConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:goldo.nucleo.hal.EncoderConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string device = 1;
  if (this->device().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device().data(), static_cast<int>(this->device().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "goldo.nucleo.hal.EncoderConfig.device");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->device(), target);
  }

  // uint32 id = 2;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "goldo.nucleo.hal.EncoderConfig.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // .goldo.nucleo.hal.EncoderMode mode = 4;
  if (this->mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->mode(), target);
  }

  // .goldo.nucleo.hal.EncoderDirection dir = 5;
  if (this->dir() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->dir(), target);
  }

  // string ch1_pin = 6;
  if (this->ch1_pin().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ch1_pin().data(), static_cast<int>(this->ch1_pin().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "goldo.nucleo.hal.EncoderConfig.ch1_pin");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->ch1_pin(), target);
  }

  // string ch2_pin = 7;
  if (this->ch2_pin().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ch2_pin().data(), static_cast<int>(this->ch2_pin().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "goldo.nucleo.hal.EncoderConfig.ch2_pin");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->ch2_pin(), target);
  }

  // string ch3_pin = 8;
  if (this->ch3_pin().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ch3_pin().data(), static_cast<int>(this->ch3_pin().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "goldo.nucleo.hal.EncoderConfig.ch3_pin");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->ch3_pin(), target);
  }

  // uint32 period = 9;
  if (this->period() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->period(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:goldo.nucleo.hal.EncoderConfig)
  return target;
}

size_t EncoderConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:goldo.nucleo.hal.EncoderConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string device = 1;
  if (this->device().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->device());
  }

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string ch1_pin = 6;
  if (this->ch1_pin().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ch1_pin());
  }

  // string ch2_pin = 7;
  if (this->ch2_pin().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ch2_pin());
  }

  // string ch3_pin = 8;
  if (this->ch3_pin().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ch3_pin());
  }

  // uint32 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  // .goldo.nucleo.hal.EncoderMode mode = 4;
  if (this->mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
  }

  // .goldo.nucleo.hal.EncoderDirection dir = 5;
  if (this->dir() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->dir());
  }

  // uint32 period = 9;
  if (this->period() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->period());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EncoderConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:goldo.nucleo.hal.EncoderConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const EncoderConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EncoderConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:goldo.nucleo.hal.EncoderConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:goldo.nucleo.hal.EncoderConfig)
    MergeFrom(*source);
  }
}

void EncoderConfig::MergeFrom(const EncoderConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:goldo.nucleo.hal.EncoderConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.device().size() > 0) {

    device_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.ch1_pin().size() > 0) {

    ch1_pin_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ch1_pin_);
  }
  if (from.ch2_pin().size() > 0) {

    ch2_pin_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ch2_pin_);
  }
  if (from.ch3_pin().size() > 0) {

    ch3_pin_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ch3_pin_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.mode() != 0) {
    set_mode(from.mode());
  }
  if (from.dir() != 0) {
    set_dir(from.dir());
  }
  if (from.period() != 0) {
    set_period(from.period());
  }
}

void EncoderConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:goldo.nucleo.hal.EncoderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EncoderConfig::CopyFrom(const EncoderConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:goldo.nucleo.hal.EncoderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EncoderConfig::IsInitialized() const {
  return true;
}

void EncoderConfig::Swap(EncoderConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EncoderConfig::InternalSwap(EncoderConfig* other) {
  using std::swap;
  device_.Swap(&other->device_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ch1_pin_.Swap(&other->ch1_pin_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ch2_pin_.Swap(&other->ch2_pin_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ch3_pin_.Swap(&other->ch3_pin_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(mode_, other->mode_);
  swap(dir_, other->dir_);
  swap(period_, other->period_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata EncoderConfig::GetMetadata() const {
  protobuf_goldo_2fnucleo_2fhal_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2fnucleo_2fhal_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UartConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UartConfig::kDeviceFieldNumber;
const int UartConfig::kIdFieldNumber;
const int UartConfig::kNameFieldNumber;
const int UartConfig::kRxBufferSizeFieldNumber;
const int UartConfig::kTxBufferSizeFieldNumber;
const int UartConfig::kRxBlockingFieldNumber;
const int UartConfig::kTxBlockingFieldNumber;
const int UartConfig::kRxDmaFieldNumber;
const int UartConfig::kTxDmaFieldNumber;
const int UartConfig::kRxPinFieldNumber;
const int UartConfig::kTxPinFieldNumber;
const int UartConfig::kTxenPinFieldNumber;
const int UartConfig::kBaudrateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UartConfig::UartConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_goldo_2fnucleo_2fhal_2eproto::scc_info_UartConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:goldo.nucleo.hal.UartConfig)
}
UartConfig::UartConfig(const UartConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  device_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.device().size() > 0) {
    device_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  rx_pin_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.rx_pin().size() > 0) {
    rx_pin_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rx_pin_);
  }
  tx_pin_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tx_pin().size() > 0) {
    tx_pin_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tx_pin_);
  }
  txen_pin_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.txen_pin().size() > 0) {
    txen_pin_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.txen_pin_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&baudrate_) -
    reinterpret_cast<char*>(&id_)) + sizeof(baudrate_));
  // @@protoc_insertion_point(copy_constructor:goldo.nucleo.hal.UartConfig)
}

void UartConfig::SharedCtor() {
  device_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rx_pin_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tx_pin_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  txen_pin_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&baudrate_) -
      reinterpret_cast<char*>(&id_)) + sizeof(baudrate_));
}

UartConfig::~UartConfig() {
  // @@protoc_insertion_point(destructor:goldo.nucleo.hal.UartConfig)
  SharedDtor();
}

void UartConfig::SharedDtor() {
  device_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rx_pin_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tx_pin_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  txen_pin_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UartConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UartConfig::descriptor() {
  ::protobuf_goldo_2fnucleo_2fhal_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2fnucleo_2fhal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UartConfig& UartConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_goldo_2fnucleo_2fhal_2eproto::scc_info_UartConfig.base);
  return *internal_default_instance();
}


void UartConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:goldo.nucleo.hal.UartConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rx_pin_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tx_pin_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  txen_pin_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&baudrate_) -
      reinterpret_cast<char*>(&id_)) + sizeof(baudrate_));
  _internal_metadata_.Clear();
}

bool UartConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:goldo.nucleo.hal.UartConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string device = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->device().data(), static_cast<int>(this->device().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "goldo.nucleo.hal.UartConfig.device"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "goldo.nucleo.hal.UartConfig.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 rx_buffer_size = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rx_buffer_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 tx_buffer_size = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tx_buffer_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool rx_blocking = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rx_blocking_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool tx_blocking = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tx_blocking_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool rx_dma = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rx_dma_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool tx_dma = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tx_dma_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string rx_pin = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rx_pin()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->rx_pin().data(), static_cast<int>(this->rx_pin().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "goldo.nucleo.hal.UartConfig.rx_pin"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string tx_pin = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tx_pin()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tx_pin().data(), static_cast<int>(this->tx_pin().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "goldo.nucleo.hal.UartConfig.tx_pin"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string txen_pin = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_txen_pin()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->txen_pin().data(), static_cast<int>(this->txen_pin().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "goldo.nucleo.hal.UartConfig.txen_pin"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 baudrate = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &baudrate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:goldo.nucleo.hal.UartConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:goldo.nucleo.hal.UartConfig)
  return false;
#undef DO_
}

void UartConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:goldo.nucleo.hal.UartConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string device = 1;
  if (this->device().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device().data(), static_cast<int>(this->device().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "goldo.nucleo.hal.UartConfig.device");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->device(), output);
  }

  // uint32 id = 2;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "goldo.nucleo.hal.UartConfig.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // uint32 rx_buffer_size = 4;
  if (this->rx_buffer_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->rx_buffer_size(), output);
  }

  // uint32 tx_buffer_size = 5;
  if (this->tx_buffer_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->tx_buffer_size(), output);
  }

  // bool rx_blocking = 6;
  if (this->rx_blocking() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->rx_blocking(), output);
  }

  // bool tx_blocking = 7;
  if (this->tx_blocking() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->tx_blocking(), output);
  }

  // bool rx_dma = 8;
  if (this->rx_dma() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->rx_dma(), output);
  }

  // bool tx_dma = 9;
  if (this->tx_dma() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->tx_dma(), output);
  }

  // string rx_pin = 10;
  if (this->rx_pin().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rx_pin().data(), static_cast<int>(this->rx_pin().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "goldo.nucleo.hal.UartConfig.rx_pin");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->rx_pin(), output);
  }

  // string tx_pin = 11;
  if (this->tx_pin().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tx_pin().data(), static_cast<int>(this->tx_pin().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "goldo.nucleo.hal.UartConfig.tx_pin");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->tx_pin(), output);
  }

  // string txen_pin = 12;
  if (this->txen_pin().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->txen_pin().data(), static_cast<int>(this->txen_pin().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "goldo.nucleo.hal.UartConfig.txen_pin");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->txen_pin(), output);
  }

  // uint32 baudrate = 13;
  if (this->baudrate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->baudrate(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:goldo.nucleo.hal.UartConfig)
}

::google::protobuf::uint8* UartConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:goldo.nucleo.hal.UartConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string device = 1;
  if (this->device().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device().data(), static_cast<int>(this->device().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "goldo.nucleo.hal.UartConfig.device");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->device(), target);
  }

  // uint32 id = 2;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "goldo.nucleo.hal.UartConfig.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // uint32 rx_buffer_size = 4;
  if (this->rx_buffer_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->rx_buffer_size(), target);
  }

  // uint32 tx_buffer_size = 5;
  if (this->tx_buffer_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->tx_buffer_size(), target);
  }

  // bool rx_blocking = 6;
  if (this->rx_blocking() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->rx_blocking(), target);
  }

  // bool tx_blocking = 7;
  if (this->tx_blocking() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->tx_blocking(), target);
  }

  // bool rx_dma = 8;
  if (this->rx_dma() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->rx_dma(), target);
  }

  // bool tx_dma = 9;
  if (this->tx_dma() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->tx_dma(), target);
  }

  // string rx_pin = 10;
  if (this->rx_pin().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rx_pin().data(), static_cast<int>(this->rx_pin().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "goldo.nucleo.hal.UartConfig.rx_pin");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->rx_pin(), target);
  }

  // string tx_pin = 11;
  if (this->tx_pin().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tx_pin().data(), static_cast<int>(this->tx_pin().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "goldo.nucleo.hal.UartConfig.tx_pin");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->tx_pin(), target);
  }

  // string txen_pin = 12;
  if (this->txen_pin().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->txen_pin().data(), static_cast<int>(this->txen_pin().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "goldo.nucleo.hal.UartConfig.txen_pin");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->txen_pin(), target);
  }

  // uint32 baudrate = 13;
  if (this->baudrate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->baudrate(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:goldo.nucleo.hal.UartConfig)
  return target;
}

size_t UartConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:goldo.nucleo.hal.UartConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string device = 1;
  if (this->device().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->device());
  }

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string rx_pin = 10;
  if (this->rx_pin().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->rx_pin());
  }

  // string tx_pin = 11;
  if (this->tx_pin().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tx_pin());
  }

  // string txen_pin = 12;
  if (this->txen_pin().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->txen_pin());
  }

  // uint32 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  // uint32 rx_buffer_size = 4;
  if (this->rx_buffer_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->rx_buffer_size());
  }

  // uint32 tx_buffer_size = 5;
  if (this->tx_buffer_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tx_buffer_size());
  }

  // bool rx_blocking = 6;
  if (this->rx_blocking() != 0) {
    total_size += 1 + 1;
  }

  // bool tx_blocking = 7;
  if (this->tx_blocking() != 0) {
    total_size += 1 + 1;
  }

  // bool rx_dma = 8;
  if (this->rx_dma() != 0) {
    total_size += 1 + 1;
  }

  // bool tx_dma = 9;
  if (this->tx_dma() != 0) {
    total_size += 1 + 1;
  }

  // uint32 baudrate = 13;
  if (this->baudrate() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->baudrate());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UartConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:goldo.nucleo.hal.UartConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const UartConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UartConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:goldo.nucleo.hal.UartConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:goldo.nucleo.hal.UartConfig)
    MergeFrom(*source);
  }
}

void UartConfig::MergeFrom(const UartConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:goldo.nucleo.hal.UartConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.device().size() > 0) {

    device_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.rx_pin().size() > 0) {

    rx_pin_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rx_pin_);
  }
  if (from.tx_pin().size() > 0) {

    tx_pin_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tx_pin_);
  }
  if (from.txen_pin().size() > 0) {

    txen_pin_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.txen_pin_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.rx_buffer_size() != 0) {
    set_rx_buffer_size(from.rx_buffer_size());
  }
  if (from.tx_buffer_size() != 0) {
    set_tx_buffer_size(from.tx_buffer_size());
  }
  if (from.rx_blocking() != 0) {
    set_rx_blocking(from.rx_blocking());
  }
  if (from.tx_blocking() != 0) {
    set_tx_blocking(from.tx_blocking());
  }
  if (from.rx_dma() != 0) {
    set_rx_dma(from.rx_dma());
  }
  if (from.tx_dma() != 0) {
    set_tx_dma(from.tx_dma());
  }
  if (from.baudrate() != 0) {
    set_baudrate(from.baudrate());
  }
}

void UartConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:goldo.nucleo.hal.UartConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UartConfig::CopyFrom(const UartConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:goldo.nucleo.hal.UartConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UartConfig::IsInitialized() const {
  return true;
}

void UartConfig::Swap(UartConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UartConfig::InternalSwap(UartConfig* other) {
  using std::swap;
  device_.Swap(&other->device_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  rx_pin_.Swap(&other->rx_pin_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  tx_pin_.Swap(&other->tx_pin_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  txen_pin_.Swap(&other->txen_pin_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(rx_buffer_size_, other->rx_buffer_size_);
  swap(tx_buffer_size_, other->tx_buffer_size_);
  swap(rx_blocking_, other->rx_blocking_);
  swap(tx_blocking_, other->tx_blocking_);
  swap(rx_dma_, other->rx_dma_);
  swap(tx_dma_, other->tx_dma_);
  swap(baudrate_, other->baudrate_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UartConfig::GetMetadata() const {
  protobuf_goldo_2fnucleo_2fhal_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2fnucleo_2fhal_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void I2cConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int I2cConfig::kDeviceFieldNumber;
const int I2cConfig::kIdFieldNumber;
const int I2cConfig::kNameFieldNumber;
const int I2cConfig::kRxBufferSizeFieldNumber;
const int I2cConfig::kTxBufferSizeFieldNumber;
const int I2cConfig::kRxBlockingFieldNumber;
const int I2cConfig::kTxBlockingFieldNumber;
const int I2cConfig::kRxDmaFieldNumber;
const int I2cConfig::kTxDmaFieldNumber;
const int I2cConfig::kSclPinFieldNumber;
const int I2cConfig::kSdaPinFieldNumber;
const int I2cConfig::kTimingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

I2cConfig::I2cConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_goldo_2fnucleo_2fhal_2eproto::scc_info_I2cConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:goldo.nucleo.hal.I2cConfig)
}
I2cConfig::I2cConfig(const I2cConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  device_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.device().size() > 0) {
    device_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  scl_pin_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.scl_pin().size() > 0) {
    scl_pin_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.scl_pin_);
  }
  sda_pin_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sda_pin().size() > 0) {
    sda_pin_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sda_pin_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&timing_) -
    reinterpret_cast<char*>(&id_)) + sizeof(timing_));
  // @@protoc_insertion_point(copy_constructor:goldo.nucleo.hal.I2cConfig)
}

void I2cConfig::SharedCtor() {
  device_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  scl_pin_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sda_pin_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timing_) -
      reinterpret_cast<char*>(&id_)) + sizeof(timing_));
}

I2cConfig::~I2cConfig() {
  // @@protoc_insertion_point(destructor:goldo.nucleo.hal.I2cConfig)
  SharedDtor();
}

void I2cConfig::SharedDtor() {
  device_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  scl_pin_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sda_pin_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void I2cConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* I2cConfig::descriptor() {
  ::protobuf_goldo_2fnucleo_2fhal_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2fnucleo_2fhal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const I2cConfig& I2cConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_goldo_2fnucleo_2fhal_2eproto::scc_info_I2cConfig.base);
  return *internal_default_instance();
}


void I2cConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:goldo.nucleo.hal.I2cConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  scl_pin_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sda_pin_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timing_) -
      reinterpret_cast<char*>(&id_)) + sizeof(timing_));
  _internal_metadata_.Clear();
}

bool I2cConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:goldo.nucleo.hal.I2cConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string device = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->device().data(), static_cast<int>(this->device().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "goldo.nucleo.hal.I2cConfig.device"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "goldo.nucleo.hal.I2cConfig.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 rx_buffer_size = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rx_buffer_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 tx_buffer_size = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tx_buffer_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool rx_blocking = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rx_blocking_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool tx_blocking = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tx_blocking_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool rx_dma = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rx_dma_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool tx_dma = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tx_dma_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string scl_pin = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scl_pin()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->scl_pin().data(), static_cast<int>(this->scl_pin().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "goldo.nucleo.hal.I2cConfig.scl_pin"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sda_pin = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sda_pin()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sda_pin().data(), static_cast<int>(this->sda_pin().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "goldo.nucleo.hal.I2cConfig.sda_pin"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 timing = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:goldo.nucleo.hal.I2cConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:goldo.nucleo.hal.I2cConfig)
  return false;
#undef DO_
}

void I2cConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:goldo.nucleo.hal.I2cConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string device = 1;
  if (this->device().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device().data(), static_cast<int>(this->device().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "goldo.nucleo.hal.I2cConfig.device");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->device(), output);
  }

  // uint32 id = 2;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "goldo.nucleo.hal.I2cConfig.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // uint32 rx_buffer_size = 4;
  if (this->rx_buffer_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->rx_buffer_size(), output);
  }

  // uint32 tx_buffer_size = 5;
  if (this->tx_buffer_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->tx_buffer_size(), output);
  }

  // bool rx_blocking = 6;
  if (this->rx_blocking() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->rx_blocking(), output);
  }

  // bool tx_blocking = 7;
  if (this->tx_blocking() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->tx_blocking(), output);
  }

  // bool rx_dma = 8;
  if (this->rx_dma() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->rx_dma(), output);
  }

  // bool tx_dma = 9;
  if (this->tx_dma() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->tx_dma(), output);
  }

  // string scl_pin = 10;
  if (this->scl_pin().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->scl_pin().data(), static_cast<int>(this->scl_pin().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "goldo.nucleo.hal.I2cConfig.scl_pin");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->scl_pin(), output);
  }

  // string sda_pin = 11;
  if (this->sda_pin().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sda_pin().data(), static_cast<int>(this->sda_pin().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "goldo.nucleo.hal.I2cConfig.sda_pin");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->sda_pin(), output);
  }

  // uint32 timing = 12;
  if (this->timing() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->timing(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:goldo.nucleo.hal.I2cConfig)
}

::google::protobuf::uint8* I2cConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:goldo.nucleo.hal.I2cConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string device = 1;
  if (this->device().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device().data(), static_cast<int>(this->device().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "goldo.nucleo.hal.I2cConfig.device");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->device(), target);
  }

  // uint32 id = 2;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "goldo.nucleo.hal.I2cConfig.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // uint32 rx_buffer_size = 4;
  if (this->rx_buffer_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->rx_buffer_size(), target);
  }

  // uint32 tx_buffer_size = 5;
  if (this->tx_buffer_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->tx_buffer_size(), target);
  }

  // bool rx_blocking = 6;
  if (this->rx_blocking() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->rx_blocking(), target);
  }

  // bool tx_blocking = 7;
  if (this->tx_blocking() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->tx_blocking(), target);
  }

  // bool rx_dma = 8;
  if (this->rx_dma() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->rx_dma(), target);
  }

  // bool tx_dma = 9;
  if (this->tx_dma() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->tx_dma(), target);
  }

  // string scl_pin = 10;
  if (this->scl_pin().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->scl_pin().data(), static_cast<int>(this->scl_pin().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "goldo.nucleo.hal.I2cConfig.scl_pin");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->scl_pin(), target);
  }

  // string sda_pin = 11;
  if (this->sda_pin().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sda_pin().data(), static_cast<int>(this->sda_pin().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "goldo.nucleo.hal.I2cConfig.sda_pin");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->sda_pin(), target);
  }

  // uint32 timing = 12;
  if (this->timing() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->timing(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:goldo.nucleo.hal.I2cConfig)
  return target;
}

size_t I2cConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:goldo.nucleo.hal.I2cConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string device = 1;
  if (this->device().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->device());
  }

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string scl_pin = 10;
  if (this->scl_pin().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->scl_pin());
  }

  // string sda_pin = 11;
  if (this->sda_pin().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sda_pin());
  }

  // uint32 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  // uint32 rx_buffer_size = 4;
  if (this->rx_buffer_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->rx_buffer_size());
  }

  // uint32 tx_buffer_size = 5;
  if (this->tx_buffer_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tx_buffer_size());
  }

  // bool rx_blocking = 6;
  if (this->rx_blocking() != 0) {
    total_size += 1 + 1;
  }

  // bool tx_blocking = 7;
  if (this->tx_blocking() != 0) {
    total_size += 1 + 1;
  }

  // bool rx_dma = 8;
  if (this->rx_dma() != 0) {
    total_size += 1 + 1;
  }

  // bool tx_dma = 9;
  if (this->tx_dma() != 0) {
    total_size += 1 + 1;
  }

  // uint32 timing = 12;
  if (this->timing() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->timing());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void I2cConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:goldo.nucleo.hal.I2cConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const I2cConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const I2cConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:goldo.nucleo.hal.I2cConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:goldo.nucleo.hal.I2cConfig)
    MergeFrom(*source);
  }
}

void I2cConfig::MergeFrom(const I2cConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:goldo.nucleo.hal.I2cConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.device().size() > 0) {

    device_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.scl_pin().size() > 0) {

    scl_pin_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.scl_pin_);
  }
  if (from.sda_pin().size() > 0) {

    sda_pin_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sda_pin_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.rx_buffer_size() != 0) {
    set_rx_buffer_size(from.rx_buffer_size());
  }
  if (from.tx_buffer_size() != 0) {
    set_tx_buffer_size(from.tx_buffer_size());
  }
  if (from.rx_blocking() != 0) {
    set_rx_blocking(from.rx_blocking());
  }
  if (from.tx_blocking() != 0) {
    set_tx_blocking(from.tx_blocking());
  }
  if (from.rx_dma() != 0) {
    set_rx_dma(from.rx_dma());
  }
  if (from.tx_dma() != 0) {
    set_tx_dma(from.tx_dma());
  }
  if (from.timing() != 0) {
    set_timing(from.timing());
  }
}

void I2cConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:goldo.nucleo.hal.I2cConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void I2cConfig::CopyFrom(const I2cConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:goldo.nucleo.hal.I2cConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool I2cConfig::IsInitialized() const {
  return true;
}

void I2cConfig::Swap(I2cConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void I2cConfig::InternalSwap(I2cConfig* other) {
  using std::swap;
  device_.Swap(&other->device_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  scl_pin_.Swap(&other->scl_pin_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sda_pin_.Swap(&other->sda_pin_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(rx_buffer_size_, other->rx_buffer_size_);
  swap(tx_buffer_size_, other->tx_buffer_size_);
  swap(rx_blocking_, other->rx_blocking_);
  swap(tx_blocking_, other->tx_blocking_);
  swap(rx_dma_, other->rx_dma_);
  swap(tx_dma_, other->tx_dma_);
  swap(timing_, other->timing_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata I2cConfig::GetMetadata() const {
  protobuf_goldo_2fnucleo_2fhal_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2fnucleo_2fhal_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SpiConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SpiConfig::kDeviceFieldNumber;
const int SpiConfig::kIdFieldNumber;
const int SpiConfig::kNameFieldNumber;
const int SpiConfig::kRxBufferSizeFieldNumber;
const int SpiConfig::kTxBufferSizeFieldNumber;
const int SpiConfig::kRxBlockingFieldNumber;
const int SpiConfig::kTxBlockingFieldNumber;
const int SpiConfig::kRxDmaFieldNumber;
const int SpiConfig::kTxDmaFieldNumber;
const int SpiConfig::kSckPinFieldNumber;
const int SpiConfig::kMosiPinFieldNumber;
const int SpiConfig::kMisoPinFieldNumber;
const int SpiConfig::kNssPinFieldNumber;
const int SpiConfig::kBaudratePrescalerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpiConfig::SpiConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_goldo_2fnucleo_2fhal_2eproto::scc_info_SpiConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:goldo.nucleo.hal.SpiConfig)
}
SpiConfig::SpiConfig(const SpiConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  device_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.device().size() > 0) {
    device_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  sck_pin_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sck_pin().size() > 0) {
    sck_pin_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sck_pin_);
  }
  mosi_pin_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.mosi_pin().size() > 0) {
    mosi_pin_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mosi_pin_);
  }
  miso_pin_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.miso_pin().size() > 0) {
    miso_pin_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.miso_pin_);
  }
  nss_pin_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.nss_pin().size() > 0) {
    nss_pin_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nss_pin_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&baudrate_prescaler_) -
    reinterpret_cast<char*>(&id_)) + sizeof(baudrate_prescaler_));
  // @@protoc_insertion_point(copy_constructor:goldo.nucleo.hal.SpiConfig)
}

void SpiConfig::SharedCtor() {
  device_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sck_pin_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mosi_pin_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  miso_pin_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nss_pin_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&baudrate_prescaler_) -
      reinterpret_cast<char*>(&id_)) + sizeof(baudrate_prescaler_));
}

SpiConfig::~SpiConfig() {
  // @@protoc_insertion_point(destructor:goldo.nucleo.hal.SpiConfig)
  SharedDtor();
}

void SpiConfig::SharedDtor() {
  device_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sck_pin_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mosi_pin_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  miso_pin_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nss_pin_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SpiConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SpiConfig::descriptor() {
  ::protobuf_goldo_2fnucleo_2fhal_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2fnucleo_2fhal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SpiConfig& SpiConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_goldo_2fnucleo_2fhal_2eproto::scc_info_SpiConfig.base);
  return *internal_default_instance();
}


void SpiConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:goldo.nucleo.hal.SpiConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sck_pin_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mosi_pin_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  miso_pin_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nss_pin_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&baudrate_prescaler_) -
      reinterpret_cast<char*>(&id_)) + sizeof(baudrate_prescaler_));
  _internal_metadata_.Clear();
}

bool SpiConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:goldo.nucleo.hal.SpiConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string device = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->device().data(), static_cast<int>(this->device().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "goldo.nucleo.hal.SpiConfig.device"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "goldo.nucleo.hal.SpiConfig.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 rx_buffer_size = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rx_buffer_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 tx_buffer_size = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tx_buffer_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool rx_blocking = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rx_blocking_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool tx_blocking = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tx_blocking_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool rx_dma = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rx_dma_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool tx_dma = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tx_dma_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sck_pin = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sck_pin()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sck_pin().data(), static_cast<int>(this->sck_pin().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "goldo.nucleo.hal.SpiConfig.sck_pin"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string mosi_pin = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mosi_pin()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mosi_pin().data(), static_cast<int>(this->mosi_pin().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "goldo.nucleo.hal.SpiConfig.mosi_pin"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string miso_pin = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_miso_pin()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->miso_pin().data(), static_cast<int>(this->miso_pin().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "goldo.nucleo.hal.SpiConfig.miso_pin"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string nss_pin = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nss_pin()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->nss_pin().data(), static_cast<int>(this->nss_pin().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "goldo.nucleo.hal.SpiConfig.nss_pin"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 baudrate_prescaler = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &baudrate_prescaler_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:goldo.nucleo.hal.SpiConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:goldo.nucleo.hal.SpiConfig)
  return false;
#undef DO_
}

void SpiConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:goldo.nucleo.hal.SpiConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string device = 1;
  if (this->device().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device().data(), static_cast<int>(this->device().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "goldo.nucleo.hal.SpiConfig.device");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->device(), output);
  }

  // uint32 id = 2;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "goldo.nucleo.hal.SpiConfig.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // uint32 rx_buffer_size = 4;
  if (this->rx_buffer_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->rx_buffer_size(), output);
  }

  // uint32 tx_buffer_size = 5;
  if (this->tx_buffer_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->tx_buffer_size(), output);
  }

  // bool rx_blocking = 6;
  if (this->rx_blocking() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->rx_blocking(), output);
  }

  // bool tx_blocking = 7;
  if (this->tx_blocking() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->tx_blocking(), output);
  }

  // bool rx_dma = 8;
  if (this->rx_dma() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->rx_dma(), output);
  }

  // bool tx_dma = 9;
  if (this->tx_dma() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->tx_dma(), output);
  }

  // string sck_pin = 10;
  if (this->sck_pin().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sck_pin().data(), static_cast<int>(this->sck_pin().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "goldo.nucleo.hal.SpiConfig.sck_pin");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->sck_pin(), output);
  }

  // string mosi_pin = 11;
  if (this->mosi_pin().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mosi_pin().data(), static_cast<int>(this->mosi_pin().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "goldo.nucleo.hal.SpiConfig.mosi_pin");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->mosi_pin(), output);
  }

  // string miso_pin = 12;
  if (this->miso_pin().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->miso_pin().data(), static_cast<int>(this->miso_pin().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "goldo.nucleo.hal.SpiConfig.miso_pin");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->miso_pin(), output);
  }

  // string nss_pin = 13;
  if (this->nss_pin().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nss_pin().data(), static_cast<int>(this->nss_pin().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "goldo.nucleo.hal.SpiConfig.nss_pin");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->nss_pin(), output);
  }

  // uint32 baudrate_prescaler = 14;
  if (this->baudrate_prescaler() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->baudrate_prescaler(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:goldo.nucleo.hal.SpiConfig)
}

::google::protobuf::uint8* SpiConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:goldo.nucleo.hal.SpiConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string device = 1;
  if (this->device().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device().data(), static_cast<int>(this->device().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "goldo.nucleo.hal.SpiConfig.device");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->device(), target);
  }

  // uint32 id = 2;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "goldo.nucleo.hal.SpiConfig.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // uint32 rx_buffer_size = 4;
  if (this->rx_buffer_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->rx_buffer_size(), target);
  }

  // uint32 tx_buffer_size = 5;
  if (this->tx_buffer_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->tx_buffer_size(), target);
  }

  // bool rx_blocking = 6;
  if (this->rx_blocking() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->rx_blocking(), target);
  }

  // bool tx_blocking = 7;
  if (this->tx_blocking() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->tx_blocking(), target);
  }

  // bool rx_dma = 8;
  if (this->rx_dma() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->rx_dma(), target);
  }

  // bool tx_dma = 9;
  if (this->tx_dma() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->tx_dma(), target);
  }

  // string sck_pin = 10;
  if (this->sck_pin().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sck_pin().data(), static_cast<int>(this->sck_pin().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "goldo.nucleo.hal.SpiConfig.sck_pin");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->sck_pin(), target);
  }

  // string mosi_pin = 11;
  if (this->mosi_pin().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mosi_pin().data(), static_cast<int>(this->mosi_pin().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "goldo.nucleo.hal.SpiConfig.mosi_pin");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->mosi_pin(), target);
  }

  // string miso_pin = 12;
  if (this->miso_pin().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->miso_pin().data(), static_cast<int>(this->miso_pin().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "goldo.nucleo.hal.SpiConfig.miso_pin");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->miso_pin(), target);
  }

  // string nss_pin = 13;
  if (this->nss_pin().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nss_pin().data(), static_cast<int>(this->nss_pin().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "goldo.nucleo.hal.SpiConfig.nss_pin");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->nss_pin(), target);
  }

  // uint32 baudrate_prescaler = 14;
  if (this->baudrate_prescaler() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->baudrate_prescaler(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:goldo.nucleo.hal.SpiConfig)
  return target;
}

size_t SpiConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:goldo.nucleo.hal.SpiConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string device = 1;
  if (this->device().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->device());
  }

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string sck_pin = 10;
  if (this->sck_pin().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sck_pin());
  }

  // string mosi_pin = 11;
  if (this->mosi_pin().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mosi_pin());
  }

  // string miso_pin = 12;
  if (this->miso_pin().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->miso_pin());
  }

  // string nss_pin = 13;
  if (this->nss_pin().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nss_pin());
  }

  // uint32 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  // uint32 rx_buffer_size = 4;
  if (this->rx_buffer_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->rx_buffer_size());
  }

  // uint32 tx_buffer_size = 5;
  if (this->tx_buffer_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tx_buffer_size());
  }

  // bool rx_blocking = 6;
  if (this->rx_blocking() != 0) {
    total_size += 1 + 1;
  }

  // bool tx_blocking = 7;
  if (this->tx_blocking() != 0) {
    total_size += 1 + 1;
  }

  // bool rx_dma = 8;
  if (this->rx_dma() != 0) {
    total_size += 1 + 1;
  }

  // bool tx_dma = 9;
  if (this->tx_dma() != 0) {
    total_size += 1 + 1;
  }

  // uint32 baudrate_prescaler = 14;
  if (this->baudrate_prescaler() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->baudrate_prescaler());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpiConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:goldo.nucleo.hal.SpiConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const SpiConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SpiConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:goldo.nucleo.hal.SpiConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:goldo.nucleo.hal.SpiConfig)
    MergeFrom(*source);
  }
}

void SpiConfig::MergeFrom(const SpiConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:goldo.nucleo.hal.SpiConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.device().size() > 0) {

    device_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.sck_pin().size() > 0) {

    sck_pin_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sck_pin_);
  }
  if (from.mosi_pin().size() > 0) {

    mosi_pin_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mosi_pin_);
  }
  if (from.miso_pin().size() > 0) {

    miso_pin_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.miso_pin_);
  }
  if (from.nss_pin().size() > 0) {

    nss_pin_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nss_pin_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.rx_buffer_size() != 0) {
    set_rx_buffer_size(from.rx_buffer_size());
  }
  if (from.tx_buffer_size() != 0) {
    set_tx_buffer_size(from.tx_buffer_size());
  }
  if (from.rx_blocking() != 0) {
    set_rx_blocking(from.rx_blocking());
  }
  if (from.tx_blocking() != 0) {
    set_tx_blocking(from.tx_blocking());
  }
  if (from.rx_dma() != 0) {
    set_rx_dma(from.rx_dma());
  }
  if (from.tx_dma() != 0) {
    set_tx_dma(from.tx_dma());
  }
  if (from.baudrate_prescaler() != 0) {
    set_baudrate_prescaler(from.baudrate_prescaler());
  }
}

void SpiConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:goldo.nucleo.hal.SpiConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpiConfig::CopyFrom(const SpiConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:goldo.nucleo.hal.SpiConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpiConfig::IsInitialized() const {
  return true;
}

void SpiConfig::Swap(SpiConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SpiConfig::InternalSwap(SpiConfig* other) {
  using std::swap;
  device_.Swap(&other->device_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sck_pin_.Swap(&other->sck_pin_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  mosi_pin_.Swap(&other->mosi_pin_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  miso_pin_.Swap(&other->miso_pin_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  nss_pin_.Swap(&other->nss_pin_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(rx_buffer_size_, other->rx_buffer_size_);
  swap(tx_buffer_size_, other->tx_buffer_size_);
  swap(rx_blocking_, other->rx_blocking_);
  swap(tx_blocking_, other->tx_blocking_);
  swap(rx_dma_, other->rx_dma_);
  swap(tx_dma_, other->tx_dma_);
  swap(baudrate_prescaler_, other->baudrate_prescaler_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SpiConfig::GetMetadata() const {
  protobuf_goldo_2fnucleo_2fhal_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2fnucleo_2fhal_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HalConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HalConfig::kGpioFieldNumber;
const int HalConfig::kTimerFieldNumber;
const int HalConfig::kPwmFieldNumber;
const int HalConfig::kEncoderFieldNumber;
const int HalConfig::kUartFieldNumber;
const int HalConfig::kI2CFieldNumber;
const int HalConfig::kSpiFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HalConfig::HalConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_goldo_2fnucleo_2fhal_2eproto::scc_info_HalConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:goldo.nucleo.hal.HalConfig)
}
HalConfig::HalConfig(const HalConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      gpio_(from.gpio_),
      timer_(from.timer_),
      pwm_(from.pwm_),
      encoder_(from.encoder_),
      uart_(from.uart_),
      i2c_(from.i2c_),
      spi_(from.spi_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:goldo.nucleo.hal.HalConfig)
}

void HalConfig::SharedCtor() {
}

HalConfig::~HalConfig() {
  // @@protoc_insertion_point(destructor:goldo.nucleo.hal.HalConfig)
  SharedDtor();
}

void HalConfig::SharedDtor() {
}

void HalConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* HalConfig::descriptor() {
  ::protobuf_goldo_2fnucleo_2fhal_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2fnucleo_2fhal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HalConfig& HalConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_goldo_2fnucleo_2fhal_2eproto::scc_info_HalConfig.base);
  return *internal_default_instance();
}


void HalConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:goldo.nucleo.hal.HalConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gpio_.Clear();
  timer_.Clear();
  pwm_.Clear();
  encoder_.Clear();
  uart_.Clear();
  i2c_.Clear();
  spi_.Clear();
  _internal_metadata_.Clear();
}

bool HalConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:goldo.nucleo.hal.HalConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .goldo.nucleo.hal.GpioConfig gpio = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_gpio()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .goldo.nucleo.hal.TimerConfig timer = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_timer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .goldo.nucleo.hal.PwmConfig pwm = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_pwm()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .goldo.nucleo.hal.EncoderConfig encoder = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_encoder()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .goldo.nucleo.hal.UartConfig uart = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_uart()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .goldo.nucleo.hal.I2cConfig i2c = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_i2c()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .goldo.nucleo.hal.SpiConfig spi = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_spi()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:goldo.nucleo.hal.HalConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:goldo.nucleo.hal.HalConfig)
  return false;
#undef DO_
}

void HalConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:goldo.nucleo.hal.HalConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .goldo.nucleo.hal.GpioConfig gpio = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->gpio_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->gpio(static_cast<int>(i)),
      output);
  }

  // repeated .goldo.nucleo.hal.TimerConfig timer = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->timer_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->timer(static_cast<int>(i)),
      output);
  }

  // repeated .goldo.nucleo.hal.PwmConfig pwm = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pwm_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->pwm(static_cast<int>(i)),
      output);
  }

  // repeated .goldo.nucleo.hal.EncoderConfig encoder = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->encoder_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->encoder(static_cast<int>(i)),
      output);
  }

  // repeated .goldo.nucleo.hal.UartConfig uart = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->uart_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->uart(static_cast<int>(i)),
      output);
  }

  // repeated .goldo.nucleo.hal.I2cConfig i2c = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->i2c_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->i2c(static_cast<int>(i)),
      output);
  }

  // repeated .goldo.nucleo.hal.SpiConfig spi = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->spi_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->spi(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:goldo.nucleo.hal.HalConfig)
}

::google::protobuf::uint8* HalConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:goldo.nucleo.hal.HalConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .goldo.nucleo.hal.GpioConfig gpio = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->gpio_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->gpio(static_cast<int>(i)), deterministic, target);
  }

  // repeated .goldo.nucleo.hal.TimerConfig timer = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->timer_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->timer(static_cast<int>(i)), deterministic, target);
  }

  // repeated .goldo.nucleo.hal.PwmConfig pwm = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pwm_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->pwm(static_cast<int>(i)), deterministic, target);
  }

  // repeated .goldo.nucleo.hal.EncoderConfig encoder = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->encoder_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->encoder(static_cast<int>(i)), deterministic, target);
  }

  // repeated .goldo.nucleo.hal.UartConfig uart = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->uart_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->uart(static_cast<int>(i)), deterministic, target);
  }

  // repeated .goldo.nucleo.hal.I2cConfig i2c = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->i2c_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->i2c(static_cast<int>(i)), deterministic, target);
  }

  // repeated .goldo.nucleo.hal.SpiConfig spi = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->spi_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->spi(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:goldo.nucleo.hal.HalConfig)
  return target;
}

size_t HalConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:goldo.nucleo.hal.HalConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .goldo.nucleo.hal.GpioConfig gpio = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->gpio_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->gpio(static_cast<int>(i)));
    }
  }

  // repeated .goldo.nucleo.hal.TimerConfig timer = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->timer_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->timer(static_cast<int>(i)));
    }
  }

  // repeated .goldo.nucleo.hal.PwmConfig pwm = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->pwm_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->pwm(static_cast<int>(i)));
    }
  }

  // repeated .goldo.nucleo.hal.EncoderConfig encoder = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->encoder_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->encoder(static_cast<int>(i)));
    }
  }

  // repeated .goldo.nucleo.hal.UartConfig uart = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->uart_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->uart(static_cast<int>(i)));
    }
  }

  // repeated .goldo.nucleo.hal.I2cConfig i2c = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->i2c_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->i2c(static_cast<int>(i)));
    }
  }

  // repeated .goldo.nucleo.hal.SpiConfig spi = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->spi_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->spi(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HalConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:goldo.nucleo.hal.HalConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const HalConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HalConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:goldo.nucleo.hal.HalConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:goldo.nucleo.hal.HalConfig)
    MergeFrom(*source);
  }
}

void HalConfig::MergeFrom(const HalConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:goldo.nucleo.hal.HalConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  gpio_.MergeFrom(from.gpio_);
  timer_.MergeFrom(from.timer_);
  pwm_.MergeFrom(from.pwm_);
  encoder_.MergeFrom(from.encoder_);
  uart_.MergeFrom(from.uart_);
  i2c_.MergeFrom(from.i2c_);
  spi_.MergeFrom(from.spi_);
}

void HalConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:goldo.nucleo.hal.HalConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HalConfig::CopyFrom(const HalConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:goldo.nucleo.hal.HalConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HalConfig::IsInitialized() const {
  return true;
}

void HalConfig::Swap(HalConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HalConfig::InternalSwap(HalConfig* other) {
  using std::swap;
  CastToBase(&gpio_)->InternalSwap(CastToBase(&other->gpio_));
  CastToBase(&timer_)->InternalSwap(CastToBase(&other->timer_));
  CastToBase(&pwm_)->InternalSwap(CastToBase(&other->pwm_));
  CastToBase(&encoder_)->InternalSwap(CastToBase(&other->encoder_));
  CastToBase(&uart_)->InternalSwap(CastToBase(&other->uart_));
  CastToBase(&i2c_)->InternalSwap(CastToBase(&other->i2c_));
  CastToBase(&spi_)->InternalSwap(CastToBase(&other->spi_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata HalConfig::GetMetadata() const {
  protobuf_goldo_2fnucleo_2fhal_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2fnucleo_2fhal_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace hal
}  // namespace nucleo
}  // namespace goldo
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::goldo::nucleo::hal::GpioConfig* Arena::CreateMaybeMessage< ::goldo::nucleo::hal::GpioConfig >(Arena* arena) {
  return Arena::CreateInternal< ::goldo::nucleo::hal::GpioConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::goldo::nucleo::hal::TimerConfig* Arena::CreateMaybeMessage< ::goldo::nucleo::hal::TimerConfig >(Arena* arena) {
  return Arena::CreateInternal< ::goldo::nucleo::hal::TimerConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::goldo::nucleo::hal::PwmConfig* Arena::CreateMaybeMessage< ::goldo::nucleo::hal::PwmConfig >(Arena* arena) {
  return Arena::CreateInternal< ::goldo::nucleo::hal::PwmConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::goldo::nucleo::hal::EncoderConfig* Arena::CreateMaybeMessage< ::goldo::nucleo::hal::EncoderConfig >(Arena* arena) {
  return Arena::CreateInternal< ::goldo::nucleo::hal::EncoderConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::goldo::nucleo::hal::UartConfig* Arena::CreateMaybeMessage< ::goldo::nucleo::hal::UartConfig >(Arena* arena) {
  return Arena::CreateInternal< ::goldo::nucleo::hal::UartConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::goldo::nucleo::hal::I2cConfig* Arena::CreateMaybeMessage< ::goldo::nucleo::hal::I2cConfig >(Arena* arena) {
  return Arena::CreateInternal< ::goldo::nucleo::hal::I2cConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::goldo::nucleo::hal::SpiConfig* Arena::CreateMaybeMessage< ::goldo::nucleo::hal::SpiConfig >(Arena* arena) {
  return Arena::CreateInternal< ::goldo::nucleo::hal::SpiConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::goldo::nucleo::hal::HalConfig* Arena::CreateMaybeMessage< ::goldo::nucleo::hal::HalConfig >(Arena* arena) {
  return Arena::CreateInternal< ::goldo::nucleo::hal::HalConfig >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
