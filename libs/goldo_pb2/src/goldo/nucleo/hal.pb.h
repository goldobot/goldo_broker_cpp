// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: goldo/nucleo/hal.proto

#ifndef PROTOBUF_INCLUDED_goldo_2fnucleo_2fhal_2eproto
#define PROTOBUF_INCLUDED_goldo_2fnucleo_2fhal_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "goldo/pb2_options.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_goldo_2fnucleo_2fhal_2eproto 

namespace protobuf_goldo_2fnucleo_2fhal_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[8];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_goldo_2fnucleo_2fhal_2eproto
namespace goldo {
namespace nucleo {
namespace hal {
class EncoderConfig;
class EncoderConfigDefaultTypeInternal;
extern EncoderConfigDefaultTypeInternal _EncoderConfig_default_instance_;
class GpioConfig;
class GpioConfigDefaultTypeInternal;
extern GpioConfigDefaultTypeInternal _GpioConfig_default_instance_;
class HalConfig;
class HalConfigDefaultTypeInternal;
extern HalConfigDefaultTypeInternal _HalConfig_default_instance_;
class I2cConfig;
class I2cConfigDefaultTypeInternal;
extern I2cConfigDefaultTypeInternal _I2cConfig_default_instance_;
class PwmConfig;
class PwmConfigDefaultTypeInternal;
extern PwmConfigDefaultTypeInternal _PwmConfig_default_instance_;
class SpiConfig;
class SpiConfigDefaultTypeInternal;
extern SpiConfigDefaultTypeInternal _SpiConfig_default_instance_;
class TimerConfig;
class TimerConfigDefaultTypeInternal;
extern TimerConfigDefaultTypeInternal _TimerConfig_default_instance_;
class UartConfig;
class UartConfigDefaultTypeInternal;
extern UartConfigDefaultTypeInternal _UartConfig_default_instance_;
}  // namespace hal
}  // namespace nucleo
}  // namespace goldo
namespace google {
namespace protobuf {
template<> ::goldo::nucleo::hal::EncoderConfig* Arena::CreateMaybeMessage<::goldo::nucleo::hal::EncoderConfig>(Arena*);
template<> ::goldo::nucleo::hal::GpioConfig* Arena::CreateMaybeMessage<::goldo::nucleo::hal::GpioConfig>(Arena*);
template<> ::goldo::nucleo::hal::HalConfig* Arena::CreateMaybeMessage<::goldo::nucleo::hal::HalConfig>(Arena*);
template<> ::goldo::nucleo::hal::I2cConfig* Arena::CreateMaybeMessage<::goldo::nucleo::hal::I2cConfig>(Arena*);
template<> ::goldo::nucleo::hal::PwmConfig* Arena::CreateMaybeMessage<::goldo::nucleo::hal::PwmConfig>(Arena*);
template<> ::goldo::nucleo::hal::SpiConfig* Arena::CreateMaybeMessage<::goldo::nucleo::hal::SpiConfig>(Arena*);
template<> ::goldo::nucleo::hal::TimerConfig* Arena::CreateMaybeMessage<::goldo::nucleo::hal::TimerConfig>(Arena*);
template<> ::goldo::nucleo::hal::UartConfig* Arena::CreateMaybeMessage<::goldo::nucleo::hal::UartConfig>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace goldo {
namespace nucleo {
namespace hal {

enum GpioMode {
  IN = 0,
  OUT_PP = 1,
  OUT_OD = 2,
  GpioMode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  GpioMode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool GpioMode_IsValid(int value);
const GpioMode GpioMode_MIN = IN;
const GpioMode GpioMode_MAX = OUT_OD;
const int GpioMode_ARRAYSIZE = GpioMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* GpioMode_descriptor();
inline const ::std::string& GpioMode_Name(GpioMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    GpioMode_descriptor(), value);
}
inline bool GpioMode_Parse(
    const ::std::string& name, GpioMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GpioMode>(
    GpioMode_descriptor(), name, value);
}
enum GpioPull {
  NONE = 0,
  UP = 4,
  GpioPull_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  GpioPull_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool GpioPull_IsValid(int value);
const GpioPull GpioPull_MIN = NONE;
const GpioPull GpioPull_MAX = UP;
const int GpioPull_ARRAYSIZE = GpioPull_MAX + 1;

const ::google::protobuf::EnumDescriptor* GpioPull_descriptor();
inline const ::std::string& GpioPull_Name(GpioPull value) {
  return ::google::protobuf::internal::NameOfEnum(
    GpioPull_descriptor(), value);
}
inline bool GpioPull_Parse(
    const ::std::string& name, GpioPull* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GpioPull>(
    GpioPull_descriptor(), name, value);
}
enum EncoderDirection {
  FORWARD = 0,
  REVERSE = 1,
  EncoderDirection_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  EncoderDirection_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool EncoderDirection_IsValid(int value);
const EncoderDirection EncoderDirection_MIN = FORWARD;
const EncoderDirection EncoderDirection_MAX = REVERSE;
const int EncoderDirection_ARRAYSIZE = EncoderDirection_MAX + 1;

const ::google::protobuf::EnumDescriptor* EncoderDirection_descriptor();
inline const ::std::string& EncoderDirection_Name(EncoderDirection value) {
  return ::google::protobuf::internal::NameOfEnum(
    EncoderDirection_descriptor(), value);
}
inline bool EncoderDirection_Parse(
    const ::std::string& name, EncoderDirection* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EncoderDirection>(
    EncoderDirection_descriptor(), name, value);
}
enum EncoderMode {
  NORMAL = 0,
  HAL = 2,
  EncoderMode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  EncoderMode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool EncoderMode_IsValid(int value);
const EncoderMode EncoderMode_MIN = NORMAL;
const EncoderMode EncoderMode_MAX = HAL;
const int EncoderMode_ARRAYSIZE = EncoderMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* EncoderMode_descriptor();
inline const ::std::string& EncoderMode_Name(EncoderMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    EncoderMode_descriptor(), value);
}
inline bool EncoderMode_Parse(
    const ::std::string& name, EncoderMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EncoderMode>(
    EncoderMode_descriptor(), name, value);
}
// ===================================================================

class GpioConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:goldo.nucleo.hal.GpioConfig) */ {
 public:
  GpioConfig();
  virtual ~GpioConfig();

  GpioConfig(const GpioConfig& from);

  inline GpioConfig& operator=(const GpioConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GpioConfig(GpioConfig&& from) noexcept
    : GpioConfig() {
    *this = ::std::move(from);
  }

  inline GpioConfig& operator=(GpioConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GpioConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GpioConfig* internal_default_instance() {
    return reinterpret_cast<const GpioConfig*>(
               &_GpioConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(GpioConfig* other);
  friend void swap(GpioConfig& a, GpioConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GpioConfig* New() const final {
    return CreateMaybeMessage<GpioConfig>(NULL);
  }

  GpioConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GpioConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GpioConfig& from);
  void MergeFrom(const GpioConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GpioConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string pin = 4;
  void clear_pin();
  static const int kPinFieldNumber = 4;
  const ::std::string& pin() const;
  void set_pin(const ::std::string& value);
  #if LANG_CXX11
  void set_pin(::std::string&& value);
  #endif
  void set_pin(const char* value);
  void set_pin(const char* value, size_t size);
  ::std::string* mutable_pin();
  ::std::string* release_pin();
  void set_allocated_pin(::std::string* pin);

  // uint32 id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // .goldo.nucleo.hal.GpioMode mode = 5;
  void clear_mode();
  static const int kModeFieldNumber = 5;
  ::goldo::nucleo::hal::GpioMode mode() const;
  void set_mode(::goldo::nucleo::hal::GpioMode value);

  // .goldo.nucleo.hal.GpioPull pull = 6;
  void clear_pull();
  static const int kPullFieldNumber = 6;
  ::goldo::nucleo::hal::GpioPull pull() const;
  void set_pull(::goldo::nucleo::hal::GpioPull value);

  // @@protoc_insertion_point(class_scope:goldo.nucleo.hal.GpioConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr pin_;
  ::google::protobuf::uint32 id_;
  int mode_;
  int pull_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_goldo_2fnucleo_2fhal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TimerConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:goldo.nucleo.hal.TimerConfig) */ {
 public:
  TimerConfig();
  virtual ~TimerConfig();

  TimerConfig(const TimerConfig& from);

  inline TimerConfig& operator=(const TimerConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TimerConfig(TimerConfig&& from) noexcept
    : TimerConfig() {
    *this = ::std::move(from);
  }

  inline TimerConfig& operator=(TimerConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TimerConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TimerConfig* internal_default_instance() {
    return reinterpret_cast<const TimerConfig*>(
               &_TimerConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(TimerConfig* other);
  friend void swap(TimerConfig& a, TimerConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TimerConfig* New() const final {
    return CreateMaybeMessage<TimerConfig>(NULL);
  }

  TimerConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TimerConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TimerConfig& from);
  void MergeFrom(const TimerConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimerConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string device = 1;
  void clear_device();
  static const int kDeviceFieldNumber = 1;
  const ::std::string& device() const;
  void set_device(const ::std::string& value);
  #if LANG_CXX11
  void set_device(::std::string&& value);
  #endif
  void set_device(const char* value);
  void set_device(const char* value, size_t size);
  ::std::string* mutable_device();
  ::std::string* release_device();
  void set_allocated_device(::std::string* device);

  // uint32 prescaler = 4;
  void clear_prescaler();
  static const int kPrescalerFieldNumber = 4;
  ::google::protobuf::uint32 prescaler() const;
  void set_prescaler(::google::protobuf::uint32 value);

  // uint32 period = 5;
  void clear_period();
  static const int kPeriodFieldNumber = 5;
  ::google::protobuf::uint32 period() const;
  void set_period(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:goldo.nucleo.hal.TimerConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr device_;
  ::google::protobuf::uint32 prescaler_;
  ::google::protobuf::uint32 period_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_goldo_2fnucleo_2fhal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PwmConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:goldo.nucleo.hal.PwmConfig) */ {
 public:
  PwmConfig();
  virtual ~PwmConfig();

  PwmConfig(const PwmConfig& from);

  inline PwmConfig& operator=(const PwmConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PwmConfig(PwmConfig&& from) noexcept
    : PwmConfig() {
    *this = ::std::move(from);
  }

  inline PwmConfig& operator=(PwmConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PwmConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PwmConfig* internal_default_instance() {
    return reinterpret_cast<const PwmConfig*>(
               &_PwmConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(PwmConfig* other);
  friend void swap(PwmConfig& a, PwmConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PwmConfig* New() const final {
    return CreateMaybeMessage<PwmConfig>(NULL);
  }

  PwmConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PwmConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PwmConfig& from);
  void MergeFrom(const PwmConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PwmConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string device = 1;
  void clear_device();
  static const int kDeviceFieldNumber = 1;
  const ::std::string& device() const;
  void set_device(const ::std::string& value);
  #if LANG_CXX11
  void set_device(::std::string&& value);
  #endif
  void set_device(const char* value);
  void set_device(const char* value, size_t size);
  ::std::string* mutable_device();
  ::std::string* release_device();
  void set_allocated_device(::std::string* device);

  // @@protoc_insertion_point(class_scope:goldo.nucleo.hal.PwmConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr device_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_goldo_2fnucleo_2fhal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EncoderConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:goldo.nucleo.hal.EncoderConfig) */ {
 public:
  EncoderConfig();
  virtual ~EncoderConfig();

  EncoderConfig(const EncoderConfig& from);

  inline EncoderConfig& operator=(const EncoderConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EncoderConfig(EncoderConfig&& from) noexcept
    : EncoderConfig() {
    *this = ::std::move(from);
  }

  inline EncoderConfig& operator=(EncoderConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EncoderConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EncoderConfig* internal_default_instance() {
    return reinterpret_cast<const EncoderConfig*>(
               &_EncoderConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(EncoderConfig* other);
  friend void swap(EncoderConfig& a, EncoderConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EncoderConfig* New() const final {
    return CreateMaybeMessage<EncoderConfig>(NULL);
  }

  EncoderConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EncoderConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EncoderConfig& from);
  void MergeFrom(const EncoderConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EncoderConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string device = 1;
  void clear_device();
  static const int kDeviceFieldNumber = 1;
  const ::std::string& device() const;
  void set_device(const ::std::string& value);
  #if LANG_CXX11
  void set_device(::std::string&& value);
  #endif
  void set_device(const char* value);
  void set_device(const char* value, size_t size);
  ::std::string* mutable_device();
  ::std::string* release_device();
  void set_allocated_device(::std::string* device);

  // string name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string ch1_pin = 6;
  void clear_ch1_pin();
  static const int kCh1PinFieldNumber = 6;
  const ::std::string& ch1_pin() const;
  void set_ch1_pin(const ::std::string& value);
  #if LANG_CXX11
  void set_ch1_pin(::std::string&& value);
  #endif
  void set_ch1_pin(const char* value);
  void set_ch1_pin(const char* value, size_t size);
  ::std::string* mutable_ch1_pin();
  ::std::string* release_ch1_pin();
  void set_allocated_ch1_pin(::std::string* ch1_pin);

  // string ch2_pin = 7;
  void clear_ch2_pin();
  static const int kCh2PinFieldNumber = 7;
  const ::std::string& ch2_pin() const;
  void set_ch2_pin(const ::std::string& value);
  #if LANG_CXX11
  void set_ch2_pin(::std::string&& value);
  #endif
  void set_ch2_pin(const char* value);
  void set_ch2_pin(const char* value, size_t size);
  ::std::string* mutable_ch2_pin();
  ::std::string* release_ch2_pin();
  void set_allocated_ch2_pin(::std::string* ch2_pin);

  // string ch3_pin = 8;
  void clear_ch3_pin();
  static const int kCh3PinFieldNumber = 8;
  const ::std::string& ch3_pin() const;
  void set_ch3_pin(const ::std::string& value);
  #if LANG_CXX11
  void set_ch3_pin(::std::string&& value);
  #endif
  void set_ch3_pin(const char* value);
  void set_ch3_pin(const char* value, size_t size);
  ::std::string* mutable_ch3_pin();
  ::std::string* release_ch3_pin();
  void set_allocated_ch3_pin(::std::string* ch3_pin);

  // uint32 id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // .goldo.nucleo.hal.EncoderMode mode = 4;
  void clear_mode();
  static const int kModeFieldNumber = 4;
  ::goldo::nucleo::hal::EncoderMode mode() const;
  void set_mode(::goldo::nucleo::hal::EncoderMode value);

  // .goldo.nucleo.hal.EncoderDirection dir = 5;
  void clear_dir();
  static const int kDirFieldNumber = 5;
  ::goldo::nucleo::hal::EncoderDirection dir() const;
  void set_dir(::goldo::nucleo::hal::EncoderDirection value);

  // uint32 period = 9;
  void clear_period();
  static const int kPeriodFieldNumber = 9;
  ::google::protobuf::uint32 period() const;
  void set_period(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:goldo.nucleo.hal.EncoderConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr device_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr ch1_pin_;
  ::google::protobuf::internal::ArenaStringPtr ch2_pin_;
  ::google::protobuf::internal::ArenaStringPtr ch3_pin_;
  ::google::protobuf::uint32 id_;
  int mode_;
  int dir_;
  ::google::protobuf::uint32 period_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_goldo_2fnucleo_2fhal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UartConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:goldo.nucleo.hal.UartConfig) */ {
 public:
  UartConfig();
  virtual ~UartConfig();

  UartConfig(const UartConfig& from);

  inline UartConfig& operator=(const UartConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UartConfig(UartConfig&& from) noexcept
    : UartConfig() {
    *this = ::std::move(from);
  }

  inline UartConfig& operator=(UartConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UartConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UartConfig* internal_default_instance() {
    return reinterpret_cast<const UartConfig*>(
               &_UartConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(UartConfig* other);
  friend void swap(UartConfig& a, UartConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UartConfig* New() const final {
    return CreateMaybeMessage<UartConfig>(NULL);
  }

  UartConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UartConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UartConfig& from);
  void MergeFrom(const UartConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UartConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string device = 1;
  void clear_device();
  static const int kDeviceFieldNumber = 1;
  const ::std::string& device() const;
  void set_device(const ::std::string& value);
  #if LANG_CXX11
  void set_device(::std::string&& value);
  #endif
  void set_device(const char* value);
  void set_device(const char* value, size_t size);
  ::std::string* mutable_device();
  ::std::string* release_device();
  void set_allocated_device(::std::string* device);

  // string name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string rx_pin = 10;
  void clear_rx_pin();
  static const int kRxPinFieldNumber = 10;
  const ::std::string& rx_pin() const;
  void set_rx_pin(const ::std::string& value);
  #if LANG_CXX11
  void set_rx_pin(::std::string&& value);
  #endif
  void set_rx_pin(const char* value);
  void set_rx_pin(const char* value, size_t size);
  ::std::string* mutable_rx_pin();
  ::std::string* release_rx_pin();
  void set_allocated_rx_pin(::std::string* rx_pin);

  // string tx_pin = 11;
  void clear_tx_pin();
  static const int kTxPinFieldNumber = 11;
  const ::std::string& tx_pin() const;
  void set_tx_pin(const ::std::string& value);
  #if LANG_CXX11
  void set_tx_pin(::std::string&& value);
  #endif
  void set_tx_pin(const char* value);
  void set_tx_pin(const char* value, size_t size);
  ::std::string* mutable_tx_pin();
  ::std::string* release_tx_pin();
  void set_allocated_tx_pin(::std::string* tx_pin);

  // string txen_pin = 12;
  void clear_txen_pin();
  static const int kTxenPinFieldNumber = 12;
  const ::std::string& txen_pin() const;
  void set_txen_pin(const ::std::string& value);
  #if LANG_CXX11
  void set_txen_pin(::std::string&& value);
  #endif
  void set_txen_pin(const char* value);
  void set_txen_pin(const char* value, size_t size);
  ::std::string* mutable_txen_pin();
  ::std::string* release_txen_pin();
  void set_allocated_txen_pin(::std::string* txen_pin);

  // uint32 id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // uint32 rx_buffer_size = 4;
  void clear_rx_buffer_size();
  static const int kRxBufferSizeFieldNumber = 4;
  ::google::protobuf::uint32 rx_buffer_size() const;
  void set_rx_buffer_size(::google::protobuf::uint32 value);

  // uint32 tx_buffer_size = 5;
  void clear_tx_buffer_size();
  static const int kTxBufferSizeFieldNumber = 5;
  ::google::protobuf::uint32 tx_buffer_size() const;
  void set_tx_buffer_size(::google::protobuf::uint32 value);

  // bool rx_blocking = 6;
  void clear_rx_blocking();
  static const int kRxBlockingFieldNumber = 6;
  bool rx_blocking() const;
  void set_rx_blocking(bool value);

  // bool tx_blocking = 7;
  void clear_tx_blocking();
  static const int kTxBlockingFieldNumber = 7;
  bool tx_blocking() const;
  void set_tx_blocking(bool value);

  // bool rx_dma = 8;
  void clear_rx_dma();
  static const int kRxDmaFieldNumber = 8;
  bool rx_dma() const;
  void set_rx_dma(bool value);

  // bool tx_dma = 9;
  void clear_tx_dma();
  static const int kTxDmaFieldNumber = 9;
  bool tx_dma() const;
  void set_tx_dma(bool value);

  // uint32 baudrate = 13;
  void clear_baudrate();
  static const int kBaudrateFieldNumber = 13;
  ::google::protobuf::uint32 baudrate() const;
  void set_baudrate(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:goldo.nucleo.hal.UartConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr device_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr rx_pin_;
  ::google::protobuf::internal::ArenaStringPtr tx_pin_;
  ::google::protobuf::internal::ArenaStringPtr txen_pin_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 rx_buffer_size_;
  ::google::protobuf::uint32 tx_buffer_size_;
  bool rx_blocking_;
  bool tx_blocking_;
  bool rx_dma_;
  bool tx_dma_;
  ::google::protobuf::uint32 baudrate_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_goldo_2fnucleo_2fhal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class I2cConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:goldo.nucleo.hal.I2cConfig) */ {
 public:
  I2cConfig();
  virtual ~I2cConfig();

  I2cConfig(const I2cConfig& from);

  inline I2cConfig& operator=(const I2cConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  I2cConfig(I2cConfig&& from) noexcept
    : I2cConfig() {
    *this = ::std::move(from);
  }

  inline I2cConfig& operator=(I2cConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const I2cConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const I2cConfig* internal_default_instance() {
    return reinterpret_cast<const I2cConfig*>(
               &_I2cConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(I2cConfig* other);
  friend void swap(I2cConfig& a, I2cConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline I2cConfig* New() const final {
    return CreateMaybeMessage<I2cConfig>(NULL);
  }

  I2cConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<I2cConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const I2cConfig& from);
  void MergeFrom(const I2cConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(I2cConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string device = 1;
  void clear_device();
  static const int kDeviceFieldNumber = 1;
  const ::std::string& device() const;
  void set_device(const ::std::string& value);
  #if LANG_CXX11
  void set_device(::std::string&& value);
  #endif
  void set_device(const char* value);
  void set_device(const char* value, size_t size);
  ::std::string* mutable_device();
  ::std::string* release_device();
  void set_allocated_device(::std::string* device);

  // string name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string scl_pin = 10;
  void clear_scl_pin();
  static const int kSclPinFieldNumber = 10;
  const ::std::string& scl_pin() const;
  void set_scl_pin(const ::std::string& value);
  #if LANG_CXX11
  void set_scl_pin(::std::string&& value);
  #endif
  void set_scl_pin(const char* value);
  void set_scl_pin(const char* value, size_t size);
  ::std::string* mutable_scl_pin();
  ::std::string* release_scl_pin();
  void set_allocated_scl_pin(::std::string* scl_pin);

  // string sda_pin = 11;
  void clear_sda_pin();
  static const int kSdaPinFieldNumber = 11;
  const ::std::string& sda_pin() const;
  void set_sda_pin(const ::std::string& value);
  #if LANG_CXX11
  void set_sda_pin(::std::string&& value);
  #endif
  void set_sda_pin(const char* value);
  void set_sda_pin(const char* value, size_t size);
  ::std::string* mutable_sda_pin();
  ::std::string* release_sda_pin();
  void set_allocated_sda_pin(::std::string* sda_pin);

  // uint32 id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // uint32 rx_buffer_size = 4;
  void clear_rx_buffer_size();
  static const int kRxBufferSizeFieldNumber = 4;
  ::google::protobuf::uint32 rx_buffer_size() const;
  void set_rx_buffer_size(::google::protobuf::uint32 value);

  // uint32 tx_buffer_size = 5;
  void clear_tx_buffer_size();
  static const int kTxBufferSizeFieldNumber = 5;
  ::google::protobuf::uint32 tx_buffer_size() const;
  void set_tx_buffer_size(::google::protobuf::uint32 value);

  // bool rx_blocking = 6;
  void clear_rx_blocking();
  static const int kRxBlockingFieldNumber = 6;
  bool rx_blocking() const;
  void set_rx_blocking(bool value);

  // bool tx_blocking = 7;
  void clear_tx_blocking();
  static const int kTxBlockingFieldNumber = 7;
  bool tx_blocking() const;
  void set_tx_blocking(bool value);

  // bool rx_dma = 8;
  void clear_rx_dma();
  static const int kRxDmaFieldNumber = 8;
  bool rx_dma() const;
  void set_rx_dma(bool value);

  // bool tx_dma = 9;
  void clear_tx_dma();
  static const int kTxDmaFieldNumber = 9;
  bool tx_dma() const;
  void set_tx_dma(bool value);

  // uint32 timing = 12;
  void clear_timing();
  static const int kTimingFieldNumber = 12;
  ::google::protobuf::uint32 timing() const;
  void set_timing(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:goldo.nucleo.hal.I2cConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr device_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr scl_pin_;
  ::google::protobuf::internal::ArenaStringPtr sda_pin_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 rx_buffer_size_;
  ::google::protobuf::uint32 tx_buffer_size_;
  bool rx_blocking_;
  bool tx_blocking_;
  bool rx_dma_;
  bool tx_dma_;
  ::google::protobuf::uint32 timing_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_goldo_2fnucleo_2fhal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SpiConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:goldo.nucleo.hal.SpiConfig) */ {
 public:
  SpiConfig();
  virtual ~SpiConfig();

  SpiConfig(const SpiConfig& from);

  inline SpiConfig& operator=(const SpiConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SpiConfig(SpiConfig&& from) noexcept
    : SpiConfig() {
    *this = ::std::move(from);
  }

  inline SpiConfig& operator=(SpiConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SpiConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SpiConfig* internal_default_instance() {
    return reinterpret_cast<const SpiConfig*>(
               &_SpiConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(SpiConfig* other);
  friend void swap(SpiConfig& a, SpiConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SpiConfig* New() const final {
    return CreateMaybeMessage<SpiConfig>(NULL);
  }

  SpiConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SpiConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SpiConfig& from);
  void MergeFrom(const SpiConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpiConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string device = 1;
  void clear_device();
  static const int kDeviceFieldNumber = 1;
  const ::std::string& device() const;
  void set_device(const ::std::string& value);
  #if LANG_CXX11
  void set_device(::std::string&& value);
  #endif
  void set_device(const char* value);
  void set_device(const char* value, size_t size);
  ::std::string* mutable_device();
  ::std::string* release_device();
  void set_allocated_device(::std::string* device);

  // string name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string sck_pin = 10;
  void clear_sck_pin();
  static const int kSckPinFieldNumber = 10;
  const ::std::string& sck_pin() const;
  void set_sck_pin(const ::std::string& value);
  #if LANG_CXX11
  void set_sck_pin(::std::string&& value);
  #endif
  void set_sck_pin(const char* value);
  void set_sck_pin(const char* value, size_t size);
  ::std::string* mutable_sck_pin();
  ::std::string* release_sck_pin();
  void set_allocated_sck_pin(::std::string* sck_pin);

  // string mosi_pin = 11;
  void clear_mosi_pin();
  static const int kMosiPinFieldNumber = 11;
  const ::std::string& mosi_pin() const;
  void set_mosi_pin(const ::std::string& value);
  #if LANG_CXX11
  void set_mosi_pin(::std::string&& value);
  #endif
  void set_mosi_pin(const char* value);
  void set_mosi_pin(const char* value, size_t size);
  ::std::string* mutable_mosi_pin();
  ::std::string* release_mosi_pin();
  void set_allocated_mosi_pin(::std::string* mosi_pin);

  // string miso_pin = 12;
  void clear_miso_pin();
  static const int kMisoPinFieldNumber = 12;
  const ::std::string& miso_pin() const;
  void set_miso_pin(const ::std::string& value);
  #if LANG_CXX11
  void set_miso_pin(::std::string&& value);
  #endif
  void set_miso_pin(const char* value);
  void set_miso_pin(const char* value, size_t size);
  ::std::string* mutable_miso_pin();
  ::std::string* release_miso_pin();
  void set_allocated_miso_pin(::std::string* miso_pin);

  // string nss_pin = 13;
  void clear_nss_pin();
  static const int kNssPinFieldNumber = 13;
  const ::std::string& nss_pin() const;
  void set_nss_pin(const ::std::string& value);
  #if LANG_CXX11
  void set_nss_pin(::std::string&& value);
  #endif
  void set_nss_pin(const char* value);
  void set_nss_pin(const char* value, size_t size);
  ::std::string* mutable_nss_pin();
  ::std::string* release_nss_pin();
  void set_allocated_nss_pin(::std::string* nss_pin);

  // uint32 id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // uint32 rx_buffer_size = 4;
  void clear_rx_buffer_size();
  static const int kRxBufferSizeFieldNumber = 4;
  ::google::protobuf::uint32 rx_buffer_size() const;
  void set_rx_buffer_size(::google::protobuf::uint32 value);

  // uint32 tx_buffer_size = 5;
  void clear_tx_buffer_size();
  static const int kTxBufferSizeFieldNumber = 5;
  ::google::protobuf::uint32 tx_buffer_size() const;
  void set_tx_buffer_size(::google::protobuf::uint32 value);

  // bool rx_blocking = 6;
  void clear_rx_blocking();
  static const int kRxBlockingFieldNumber = 6;
  bool rx_blocking() const;
  void set_rx_blocking(bool value);

  // bool tx_blocking = 7;
  void clear_tx_blocking();
  static const int kTxBlockingFieldNumber = 7;
  bool tx_blocking() const;
  void set_tx_blocking(bool value);

  // bool rx_dma = 8;
  void clear_rx_dma();
  static const int kRxDmaFieldNumber = 8;
  bool rx_dma() const;
  void set_rx_dma(bool value);

  // bool tx_dma = 9;
  void clear_tx_dma();
  static const int kTxDmaFieldNumber = 9;
  bool tx_dma() const;
  void set_tx_dma(bool value);

  // uint32 baudrate_prescaler = 14;
  void clear_baudrate_prescaler();
  static const int kBaudratePrescalerFieldNumber = 14;
  ::google::protobuf::uint32 baudrate_prescaler() const;
  void set_baudrate_prescaler(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:goldo.nucleo.hal.SpiConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr device_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr sck_pin_;
  ::google::protobuf::internal::ArenaStringPtr mosi_pin_;
  ::google::protobuf::internal::ArenaStringPtr miso_pin_;
  ::google::protobuf::internal::ArenaStringPtr nss_pin_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 rx_buffer_size_;
  ::google::protobuf::uint32 tx_buffer_size_;
  bool rx_blocking_;
  bool tx_blocking_;
  bool rx_dma_;
  bool tx_dma_;
  ::google::protobuf::uint32 baudrate_prescaler_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_goldo_2fnucleo_2fhal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HalConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:goldo.nucleo.hal.HalConfig) */ {
 public:
  HalConfig();
  virtual ~HalConfig();

  HalConfig(const HalConfig& from);

  inline HalConfig& operator=(const HalConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HalConfig(HalConfig&& from) noexcept
    : HalConfig() {
    *this = ::std::move(from);
  }

  inline HalConfig& operator=(HalConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HalConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HalConfig* internal_default_instance() {
    return reinterpret_cast<const HalConfig*>(
               &_HalConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(HalConfig* other);
  friend void swap(HalConfig& a, HalConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HalConfig* New() const final {
    return CreateMaybeMessage<HalConfig>(NULL);
  }

  HalConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<HalConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const HalConfig& from);
  void MergeFrom(const HalConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HalConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .goldo.nucleo.hal.GpioConfig gpio = 1;
  int gpio_size() const;
  void clear_gpio();
  static const int kGpioFieldNumber = 1;
  ::goldo::nucleo::hal::GpioConfig* mutable_gpio(int index);
  ::google::protobuf::RepeatedPtrField< ::goldo::nucleo::hal::GpioConfig >*
      mutable_gpio();
  const ::goldo::nucleo::hal::GpioConfig& gpio(int index) const;
  ::goldo::nucleo::hal::GpioConfig* add_gpio();
  const ::google::protobuf::RepeatedPtrField< ::goldo::nucleo::hal::GpioConfig >&
      gpio() const;

  // repeated .goldo.nucleo.hal.TimerConfig timer = 2;
  int timer_size() const;
  void clear_timer();
  static const int kTimerFieldNumber = 2;
  ::goldo::nucleo::hal::TimerConfig* mutable_timer(int index);
  ::google::protobuf::RepeatedPtrField< ::goldo::nucleo::hal::TimerConfig >*
      mutable_timer();
  const ::goldo::nucleo::hal::TimerConfig& timer(int index) const;
  ::goldo::nucleo::hal::TimerConfig* add_timer();
  const ::google::protobuf::RepeatedPtrField< ::goldo::nucleo::hal::TimerConfig >&
      timer() const;

  // repeated .goldo.nucleo.hal.PwmConfig pwm = 3;
  int pwm_size() const;
  void clear_pwm();
  static const int kPwmFieldNumber = 3;
  ::goldo::nucleo::hal::PwmConfig* mutable_pwm(int index);
  ::google::protobuf::RepeatedPtrField< ::goldo::nucleo::hal::PwmConfig >*
      mutable_pwm();
  const ::goldo::nucleo::hal::PwmConfig& pwm(int index) const;
  ::goldo::nucleo::hal::PwmConfig* add_pwm();
  const ::google::protobuf::RepeatedPtrField< ::goldo::nucleo::hal::PwmConfig >&
      pwm() const;

  // repeated .goldo.nucleo.hal.EncoderConfig encoder = 4;
  int encoder_size() const;
  void clear_encoder();
  static const int kEncoderFieldNumber = 4;
  ::goldo::nucleo::hal::EncoderConfig* mutable_encoder(int index);
  ::google::protobuf::RepeatedPtrField< ::goldo::nucleo::hal::EncoderConfig >*
      mutable_encoder();
  const ::goldo::nucleo::hal::EncoderConfig& encoder(int index) const;
  ::goldo::nucleo::hal::EncoderConfig* add_encoder();
  const ::google::protobuf::RepeatedPtrField< ::goldo::nucleo::hal::EncoderConfig >&
      encoder() const;

  // repeated .goldo.nucleo.hal.UartConfig uart = 5;
  int uart_size() const;
  void clear_uart();
  static const int kUartFieldNumber = 5;
  ::goldo::nucleo::hal::UartConfig* mutable_uart(int index);
  ::google::protobuf::RepeatedPtrField< ::goldo::nucleo::hal::UartConfig >*
      mutable_uart();
  const ::goldo::nucleo::hal::UartConfig& uart(int index) const;
  ::goldo::nucleo::hal::UartConfig* add_uart();
  const ::google::protobuf::RepeatedPtrField< ::goldo::nucleo::hal::UartConfig >&
      uart() const;

  // repeated .goldo.nucleo.hal.I2cConfig i2c = 6;
  int i2c_size() const;
  void clear_i2c();
  static const int kI2CFieldNumber = 6;
  ::goldo::nucleo::hal::I2cConfig* mutable_i2c(int index);
  ::google::protobuf::RepeatedPtrField< ::goldo::nucleo::hal::I2cConfig >*
      mutable_i2c();
  const ::goldo::nucleo::hal::I2cConfig& i2c(int index) const;
  ::goldo::nucleo::hal::I2cConfig* add_i2c();
  const ::google::protobuf::RepeatedPtrField< ::goldo::nucleo::hal::I2cConfig >&
      i2c() const;

  // repeated .goldo.nucleo.hal.SpiConfig spi = 7;
  int spi_size() const;
  void clear_spi();
  static const int kSpiFieldNumber = 7;
  ::goldo::nucleo::hal::SpiConfig* mutable_spi(int index);
  ::google::protobuf::RepeatedPtrField< ::goldo::nucleo::hal::SpiConfig >*
      mutable_spi();
  const ::goldo::nucleo::hal::SpiConfig& spi(int index) const;
  ::goldo::nucleo::hal::SpiConfig* add_spi();
  const ::google::protobuf::RepeatedPtrField< ::goldo::nucleo::hal::SpiConfig >&
      spi() const;

  // @@protoc_insertion_point(class_scope:goldo.nucleo.hal.HalConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::goldo::nucleo::hal::GpioConfig > gpio_;
  ::google::protobuf::RepeatedPtrField< ::goldo::nucleo::hal::TimerConfig > timer_;
  ::google::protobuf::RepeatedPtrField< ::goldo::nucleo::hal::PwmConfig > pwm_;
  ::google::protobuf::RepeatedPtrField< ::goldo::nucleo::hal::EncoderConfig > encoder_;
  ::google::protobuf::RepeatedPtrField< ::goldo::nucleo::hal::UartConfig > uart_;
  ::google::protobuf::RepeatedPtrField< ::goldo::nucleo::hal::I2cConfig > i2c_;
  ::google::protobuf::RepeatedPtrField< ::goldo::nucleo::hal::SpiConfig > spi_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_goldo_2fnucleo_2fhal_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GpioConfig

// uint32 id = 2;
inline void GpioConfig::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 GpioConfig::id() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.hal.GpioConfig.id)
  return id_;
}
inline void GpioConfig::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:goldo.nucleo.hal.GpioConfig.id)
}

// string name = 3;
inline void GpioConfig::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GpioConfig::name() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.hal.GpioConfig.name)
  return name_.GetNoArena();
}
inline void GpioConfig::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:goldo.nucleo.hal.GpioConfig.name)
}
#if LANG_CXX11
inline void GpioConfig::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:goldo.nucleo.hal.GpioConfig.name)
}
#endif
inline void GpioConfig::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:goldo.nucleo.hal.GpioConfig.name)
}
inline void GpioConfig::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:goldo.nucleo.hal.GpioConfig.name)
}
inline ::std::string* GpioConfig::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:goldo.nucleo.hal.GpioConfig.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GpioConfig::release_name() {
  // @@protoc_insertion_point(field_release:goldo.nucleo.hal.GpioConfig.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GpioConfig::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:goldo.nucleo.hal.GpioConfig.name)
}

// string pin = 4;
inline void GpioConfig::clear_pin() {
  pin_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GpioConfig::pin() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.hal.GpioConfig.pin)
  return pin_.GetNoArena();
}
inline void GpioConfig::set_pin(const ::std::string& value) {
  
  pin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:goldo.nucleo.hal.GpioConfig.pin)
}
#if LANG_CXX11
inline void GpioConfig::set_pin(::std::string&& value) {
  
  pin_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:goldo.nucleo.hal.GpioConfig.pin)
}
#endif
inline void GpioConfig::set_pin(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:goldo.nucleo.hal.GpioConfig.pin)
}
inline void GpioConfig::set_pin(const char* value, size_t size) {
  
  pin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:goldo.nucleo.hal.GpioConfig.pin)
}
inline ::std::string* GpioConfig::mutable_pin() {
  
  // @@protoc_insertion_point(field_mutable:goldo.nucleo.hal.GpioConfig.pin)
  return pin_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GpioConfig::release_pin() {
  // @@protoc_insertion_point(field_release:goldo.nucleo.hal.GpioConfig.pin)
  
  return pin_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GpioConfig::set_allocated_pin(::std::string* pin) {
  if (pin != NULL) {
    
  } else {
    
  }
  pin_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pin);
  // @@protoc_insertion_point(field_set_allocated:goldo.nucleo.hal.GpioConfig.pin)
}

// .goldo.nucleo.hal.GpioMode mode = 5;
inline void GpioConfig::clear_mode() {
  mode_ = 0;
}
inline ::goldo::nucleo::hal::GpioMode GpioConfig::mode() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.hal.GpioConfig.mode)
  return static_cast< ::goldo::nucleo::hal::GpioMode >(mode_);
}
inline void GpioConfig::set_mode(::goldo::nucleo::hal::GpioMode value) {
  
  mode_ = value;
  // @@protoc_insertion_point(field_set:goldo.nucleo.hal.GpioConfig.mode)
}

// .goldo.nucleo.hal.GpioPull pull = 6;
inline void GpioConfig::clear_pull() {
  pull_ = 0;
}
inline ::goldo::nucleo::hal::GpioPull GpioConfig::pull() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.hal.GpioConfig.pull)
  return static_cast< ::goldo::nucleo::hal::GpioPull >(pull_);
}
inline void GpioConfig::set_pull(::goldo::nucleo::hal::GpioPull value) {
  
  pull_ = value;
  // @@protoc_insertion_point(field_set:goldo.nucleo.hal.GpioConfig.pull)
}

// -------------------------------------------------------------------

// TimerConfig

// string device = 1;
inline void TimerConfig::clear_device() {
  device_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TimerConfig::device() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.hal.TimerConfig.device)
  return device_.GetNoArena();
}
inline void TimerConfig::set_device(const ::std::string& value) {
  
  device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:goldo.nucleo.hal.TimerConfig.device)
}
#if LANG_CXX11
inline void TimerConfig::set_device(::std::string&& value) {
  
  device_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:goldo.nucleo.hal.TimerConfig.device)
}
#endif
inline void TimerConfig::set_device(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:goldo.nucleo.hal.TimerConfig.device)
}
inline void TimerConfig::set_device(const char* value, size_t size) {
  
  device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:goldo.nucleo.hal.TimerConfig.device)
}
inline ::std::string* TimerConfig::mutable_device() {
  
  // @@protoc_insertion_point(field_mutable:goldo.nucleo.hal.TimerConfig.device)
  return device_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TimerConfig::release_device() {
  // @@protoc_insertion_point(field_release:goldo.nucleo.hal.TimerConfig.device)
  
  return device_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TimerConfig::set_allocated_device(::std::string* device) {
  if (device != NULL) {
    
  } else {
    
  }
  device_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device);
  // @@protoc_insertion_point(field_set_allocated:goldo.nucleo.hal.TimerConfig.device)
}

// uint32 prescaler = 4;
inline void TimerConfig::clear_prescaler() {
  prescaler_ = 0u;
}
inline ::google::protobuf::uint32 TimerConfig::prescaler() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.hal.TimerConfig.prescaler)
  return prescaler_;
}
inline void TimerConfig::set_prescaler(::google::protobuf::uint32 value) {
  
  prescaler_ = value;
  // @@protoc_insertion_point(field_set:goldo.nucleo.hal.TimerConfig.prescaler)
}

// uint32 period = 5;
inline void TimerConfig::clear_period() {
  period_ = 0u;
}
inline ::google::protobuf::uint32 TimerConfig::period() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.hal.TimerConfig.period)
  return period_;
}
inline void TimerConfig::set_period(::google::protobuf::uint32 value) {
  
  period_ = value;
  // @@protoc_insertion_point(field_set:goldo.nucleo.hal.TimerConfig.period)
}

// -------------------------------------------------------------------

// PwmConfig

// string device = 1;
inline void PwmConfig::clear_device() {
  device_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PwmConfig::device() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.hal.PwmConfig.device)
  return device_.GetNoArena();
}
inline void PwmConfig::set_device(const ::std::string& value) {
  
  device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:goldo.nucleo.hal.PwmConfig.device)
}
#if LANG_CXX11
inline void PwmConfig::set_device(::std::string&& value) {
  
  device_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:goldo.nucleo.hal.PwmConfig.device)
}
#endif
inline void PwmConfig::set_device(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:goldo.nucleo.hal.PwmConfig.device)
}
inline void PwmConfig::set_device(const char* value, size_t size) {
  
  device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:goldo.nucleo.hal.PwmConfig.device)
}
inline ::std::string* PwmConfig::mutable_device() {
  
  // @@protoc_insertion_point(field_mutable:goldo.nucleo.hal.PwmConfig.device)
  return device_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PwmConfig::release_device() {
  // @@protoc_insertion_point(field_release:goldo.nucleo.hal.PwmConfig.device)
  
  return device_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PwmConfig::set_allocated_device(::std::string* device) {
  if (device != NULL) {
    
  } else {
    
  }
  device_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device);
  // @@protoc_insertion_point(field_set_allocated:goldo.nucleo.hal.PwmConfig.device)
}

// -------------------------------------------------------------------

// EncoderConfig

// string device = 1;
inline void EncoderConfig::clear_device() {
  device_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EncoderConfig::device() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.hal.EncoderConfig.device)
  return device_.GetNoArena();
}
inline void EncoderConfig::set_device(const ::std::string& value) {
  
  device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:goldo.nucleo.hal.EncoderConfig.device)
}
#if LANG_CXX11
inline void EncoderConfig::set_device(::std::string&& value) {
  
  device_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:goldo.nucleo.hal.EncoderConfig.device)
}
#endif
inline void EncoderConfig::set_device(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:goldo.nucleo.hal.EncoderConfig.device)
}
inline void EncoderConfig::set_device(const char* value, size_t size) {
  
  device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:goldo.nucleo.hal.EncoderConfig.device)
}
inline ::std::string* EncoderConfig::mutable_device() {
  
  // @@protoc_insertion_point(field_mutable:goldo.nucleo.hal.EncoderConfig.device)
  return device_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EncoderConfig::release_device() {
  // @@protoc_insertion_point(field_release:goldo.nucleo.hal.EncoderConfig.device)
  
  return device_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EncoderConfig::set_allocated_device(::std::string* device) {
  if (device != NULL) {
    
  } else {
    
  }
  device_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device);
  // @@protoc_insertion_point(field_set_allocated:goldo.nucleo.hal.EncoderConfig.device)
}

// uint32 id = 2;
inline void EncoderConfig::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 EncoderConfig::id() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.hal.EncoderConfig.id)
  return id_;
}
inline void EncoderConfig::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:goldo.nucleo.hal.EncoderConfig.id)
}

// string name = 3;
inline void EncoderConfig::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EncoderConfig::name() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.hal.EncoderConfig.name)
  return name_.GetNoArena();
}
inline void EncoderConfig::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:goldo.nucleo.hal.EncoderConfig.name)
}
#if LANG_CXX11
inline void EncoderConfig::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:goldo.nucleo.hal.EncoderConfig.name)
}
#endif
inline void EncoderConfig::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:goldo.nucleo.hal.EncoderConfig.name)
}
inline void EncoderConfig::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:goldo.nucleo.hal.EncoderConfig.name)
}
inline ::std::string* EncoderConfig::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:goldo.nucleo.hal.EncoderConfig.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EncoderConfig::release_name() {
  // @@protoc_insertion_point(field_release:goldo.nucleo.hal.EncoderConfig.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EncoderConfig::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:goldo.nucleo.hal.EncoderConfig.name)
}

// .goldo.nucleo.hal.EncoderMode mode = 4;
inline void EncoderConfig::clear_mode() {
  mode_ = 0;
}
inline ::goldo::nucleo::hal::EncoderMode EncoderConfig::mode() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.hal.EncoderConfig.mode)
  return static_cast< ::goldo::nucleo::hal::EncoderMode >(mode_);
}
inline void EncoderConfig::set_mode(::goldo::nucleo::hal::EncoderMode value) {
  
  mode_ = value;
  // @@protoc_insertion_point(field_set:goldo.nucleo.hal.EncoderConfig.mode)
}

// .goldo.nucleo.hal.EncoderDirection dir = 5;
inline void EncoderConfig::clear_dir() {
  dir_ = 0;
}
inline ::goldo::nucleo::hal::EncoderDirection EncoderConfig::dir() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.hal.EncoderConfig.dir)
  return static_cast< ::goldo::nucleo::hal::EncoderDirection >(dir_);
}
inline void EncoderConfig::set_dir(::goldo::nucleo::hal::EncoderDirection value) {
  
  dir_ = value;
  // @@protoc_insertion_point(field_set:goldo.nucleo.hal.EncoderConfig.dir)
}

// string ch1_pin = 6;
inline void EncoderConfig::clear_ch1_pin() {
  ch1_pin_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EncoderConfig::ch1_pin() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.hal.EncoderConfig.ch1_pin)
  return ch1_pin_.GetNoArena();
}
inline void EncoderConfig::set_ch1_pin(const ::std::string& value) {
  
  ch1_pin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:goldo.nucleo.hal.EncoderConfig.ch1_pin)
}
#if LANG_CXX11
inline void EncoderConfig::set_ch1_pin(::std::string&& value) {
  
  ch1_pin_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:goldo.nucleo.hal.EncoderConfig.ch1_pin)
}
#endif
inline void EncoderConfig::set_ch1_pin(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ch1_pin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:goldo.nucleo.hal.EncoderConfig.ch1_pin)
}
inline void EncoderConfig::set_ch1_pin(const char* value, size_t size) {
  
  ch1_pin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:goldo.nucleo.hal.EncoderConfig.ch1_pin)
}
inline ::std::string* EncoderConfig::mutable_ch1_pin() {
  
  // @@protoc_insertion_point(field_mutable:goldo.nucleo.hal.EncoderConfig.ch1_pin)
  return ch1_pin_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EncoderConfig::release_ch1_pin() {
  // @@protoc_insertion_point(field_release:goldo.nucleo.hal.EncoderConfig.ch1_pin)
  
  return ch1_pin_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EncoderConfig::set_allocated_ch1_pin(::std::string* ch1_pin) {
  if (ch1_pin != NULL) {
    
  } else {
    
  }
  ch1_pin_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ch1_pin);
  // @@protoc_insertion_point(field_set_allocated:goldo.nucleo.hal.EncoderConfig.ch1_pin)
}

// string ch2_pin = 7;
inline void EncoderConfig::clear_ch2_pin() {
  ch2_pin_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EncoderConfig::ch2_pin() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.hal.EncoderConfig.ch2_pin)
  return ch2_pin_.GetNoArena();
}
inline void EncoderConfig::set_ch2_pin(const ::std::string& value) {
  
  ch2_pin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:goldo.nucleo.hal.EncoderConfig.ch2_pin)
}
#if LANG_CXX11
inline void EncoderConfig::set_ch2_pin(::std::string&& value) {
  
  ch2_pin_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:goldo.nucleo.hal.EncoderConfig.ch2_pin)
}
#endif
inline void EncoderConfig::set_ch2_pin(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ch2_pin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:goldo.nucleo.hal.EncoderConfig.ch2_pin)
}
inline void EncoderConfig::set_ch2_pin(const char* value, size_t size) {
  
  ch2_pin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:goldo.nucleo.hal.EncoderConfig.ch2_pin)
}
inline ::std::string* EncoderConfig::mutable_ch2_pin() {
  
  // @@protoc_insertion_point(field_mutable:goldo.nucleo.hal.EncoderConfig.ch2_pin)
  return ch2_pin_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EncoderConfig::release_ch2_pin() {
  // @@protoc_insertion_point(field_release:goldo.nucleo.hal.EncoderConfig.ch2_pin)
  
  return ch2_pin_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EncoderConfig::set_allocated_ch2_pin(::std::string* ch2_pin) {
  if (ch2_pin != NULL) {
    
  } else {
    
  }
  ch2_pin_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ch2_pin);
  // @@protoc_insertion_point(field_set_allocated:goldo.nucleo.hal.EncoderConfig.ch2_pin)
}

// string ch3_pin = 8;
inline void EncoderConfig::clear_ch3_pin() {
  ch3_pin_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EncoderConfig::ch3_pin() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.hal.EncoderConfig.ch3_pin)
  return ch3_pin_.GetNoArena();
}
inline void EncoderConfig::set_ch3_pin(const ::std::string& value) {
  
  ch3_pin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:goldo.nucleo.hal.EncoderConfig.ch3_pin)
}
#if LANG_CXX11
inline void EncoderConfig::set_ch3_pin(::std::string&& value) {
  
  ch3_pin_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:goldo.nucleo.hal.EncoderConfig.ch3_pin)
}
#endif
inline void EncoderConfig::set_ch3_pin(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ch3_pin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:goldo.nucleo.hal.EncoderConfig.ch3_pin)
}
inline void EncoderConfig::set_ch3_pin(const char* value, size_t size) {
  
  ch3_pin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:goldo.nucleo.hal.EncoderConfig.ch3_pin)
}
inline ::std::string* EncoderConfig::mutable_ch3_pin() {
  
  // @@protoc_insertion_point(field_mutable:goldo.nucleo.hal.EncoderConfig.ch3_pin)
  return ch3_pin_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EncoderConfig::release_ch3_pin() {
  // @@protoc_insertion_point(field_release:goldo.nucleo.hal.EncoderConfig.ch3_pin)
  
  return ch3_pin_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EncoderConfig::set_allocated_ch3_pin(::std::string* ch3_pin) {
  if (ch3_pin != NULL) {
    
  } else {
    
  }
  ch3_pin_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ch3_pin);
  // @@protoc_insertion_point(field_set_allocated:goldo.nucleo.hal.EncoderConfig.ch3_pin)
}

// uint32 period = 9;
inline void EncoderConfig::clear_period() {
  period_ = 0u;
}
inline ::google::protobuf::uint32 EncoderConfig::period() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.hal.EncoderConfig.period)
  return period_;
}
inline void EncoderConfig::set_period(::google::protobuf::uint32 value) {
  
  period_ = value;
  // @@protoc_insertion_point(field_set:goldo.nucleo.hal.EncoderConfig.period)
}

// -------------------------------------------------------------------

// UartConfig

// string device = 1;
inline void UartConfig::clear_device() {
  device_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UartConfig::device() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.hal.UartConfig.device)
  return device_.GetNoArena();
}
inline void UartConfig::set_device(const ::std::string& value) {
  
  device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:goldo.nucleo.hal.UartConfig.device)
}
#if LANG_CXX11
inline void UartConfig::set_device(::std::string&& value) {
  
  device_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:goldo.nucleo.hal.UartConfig.device)
}
#endif
inline void UartConfig::set_device(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:goldo.nucleo.hal.UartConfig.device)
}
inline void UartConfig::set_device(const char* value, size_t size) {
  
  device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:goldo.nucleo.hal.UartConfig.device)
}
inline ::std::string* UartConfig::mutable_device() {
  
  // @@protoc_insertion_point(field_mutable:goldo.nucleo.hal.UartConfig.device)
  return device_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UartConfig::release_device() {
  // @@protoc_insertion_point(field_release:goldo.nucleo.hal.UartConfig.device)
  
  return device_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UartConfig::set_allocated_device(::std::string* device) {
  if (device != NULL) {
    
  } else {
    
  }
  device_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device);
  // @@protoc_insertion_point(field_set_allocated:goldo.nucleo.hal.UartConfig.device)
}

// uint32 id = 2;
inline void UartConfig::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 UartConfig::id() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.hal.UartConfig.id)
  return id_;
}
inline void UartConfig::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:goldo.nucleo.hal.UartConfig.id)
}

// string name = 3;
inline void UartConfig::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UartConfig::name() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.hal.UartConfig.name)
  return name_.GetNoArena();
}
inline void UartConfig::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:goldo.nucleo.hal.UartConfig.name)
}
#if LANG_CXX11
inline void UartConfig::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:goldo.nucleo.hal.UartConfig.name)
}
#endif
inline void UartConfig::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:goldo.nucleo.hal.UartConfig.name)
}
inline void UartConfig::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:goldo.nucleo.hal.UartConfig.name)
}
inline ::std::string* UartConfig::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:goldo.nucleo.hal.UartConfig.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UartConfig::release_name() {
  // @@protoc_insertion_point(field_release:goldo.nucleo.hal.UartConfig.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UartConfig::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:goldo.nucleo.hal.UartConfig.name)
}

// uint32 rx_buffer_size = 4;
inline void UartConfig::clear_rx_buffer_size() {
  rx_buffer_size_ = 0u;
}
inline ::google::protobuf::uint32 UartConfig::rx_buffer_size() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.hal.UartConfig.rx_buffer_size)
  return rx_buffer_size_;
}
inline void UartConfig::set_rx_buffer_size(::google::protobuf::uint32 value) {
  
  rx_buffer_size_ = value;
  // @@protoc_insertion_point(field_set:goldo.nucleo.hal.UartConfig.rx_buffer_size)
}

// uint32 tx_buffer_size = 5;
inline void UartConfig::clear_tx_buffer_size() {
  tx_buffer_size_ = 0u;
}
inline ::google::protobuf::uint32 UartConfig::tx_buffer_size() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.hal.UartConfig.tx_buffer_size)
  return tx_buffer_size_;
}
inline void UartConfig::set_tx_buffer_size(::google::protobuf::uint32 value) {
  
  tx_buffer_size_ = value;
  // @@protoc_insertion_point(field_set:goldo.nucleo.hal.UartConfig.tx_buffer_size)
}

// bool rx_blocking = 6;
inline void UartConfig::clear_rx_blocking() {
  rx_blocking_ = false;
}
inline bool UartConfig::rx_blocking() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.hal.UartConfig.rx_blocking)
  return rx_blocking_;
}
inline void UartConfig::set_rx_blocking(bool value) {
  
  rx_blocking_ = value;
  // @@protoc_insertion_point(field_set:goldo.nucleo.hal.UartConfig.rx_blocking)
}

// bool tx_blocking = 7;
inline void UartConfig::clear_tx_blocking() {
  tx_blocking_ = false;
}
inline bool UartConfig::tx_blocking() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.hal.UartConfig.tx_blocking)
  return tx_blocking_;
}
inline void UartConfig::set_tx_blocking(bool value) {
  
  tx_blocking_ = value;
  // @@protoc_insertion_point(field_set:goldo.nucleo.hal.UartConfig.tx_blocking)
}

// bool rx_dma = 8;
inline void UartConfig::clear_rx_dma() {
  rx_dma_ = false;
}
inline bool UartConfig::rx_dma() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.hal.UartConfig.rx_dma)
  return rx_dma_;
}
inline void UartConfig::set_rx_dma(bool value) {
  
  rx_dma_ = value;
  // @@protoc_insertion_point(field_set:goldo.nucleo.hal.UartConfig.rx_dma)
}

// bool tx_dma = 9;
inline void UartConfig::clear_tx_dma() {
  tx_dma_ = false;
}
inline bool UartConfig::tx_dma() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.hal.UartConfig.tx_dma)
  return tx_dma_;
}
inline void UartConfig::set_tx_dma(bool value) {
  
  tx_dma_ = value;
  // @@protoc_insertion_point(field_set:goldo.nucleo.hal.UartConfig.tx_dma)
}

// string rx_pin = 10;
inline void UartConfig::clear_rx_pin() {
  rx_pin_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UartConfig::rx_pin() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.hal.UartConfig.rx_pin)
  return rx_pin_.GetNoArena();
}
inline void UartConfig::set_rx_pin(const ::std::string& value) {
  
  rx_pin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:goldo.nucleo.hal.UartConfig.rx_pin)
}
#if LANG_CXX11
inline void UartConfig::set_rx_pin(::std::string&& value) {
  
  rx_pin_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:goldo.nucleo.hal.UartConfig.rx_pin)
}
#endif
inline void UartConfig::set_rx_pin(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  rx_pin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:goldo.nucleo.hal.UartConfig.rx_pin)
}
inline void UartConfig::set_rx_pin(const char* value, size_t size) {
  
  rx_pin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:goldo.nucleo.hal.UartConfig.rx_pin)
}
inline ::std::string* UartConfig::mutable_rx_pin() {
  
  // @@protoc_insertion_point(field_mutable:goldo.nucleo.hal.UartConfig.rx_pin)
  return rx_pin_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UartConfig::release_rx_pin() {
  // @@protoc_insertion_point(field_release:goldo.nucleo.hal.UartConfig.rx_pin)
  
  return rx_pin_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UartConfig::set_allocated_rx_pin(::std::string* rx_pin) {
  if (rx_pin != NULL) {
    
  } else {
    
  }
  rx_pin_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rx_pin);
  // @@protoc_insertion_point(field_set_allocated:goldo.nucleo.hal.UartConfig.rx_pin)
}

// string tx_pin = 11;
inline void UartConfig::clear_tx_pin() {
  tx_pin_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UartConfig::tx_pin() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.hal.UartConfig.tx_pin)
  return tx_pin_.GetNoArena();
}
inline void UartConfig::set_tx_pin(const ::std::string& value) {
  
  tx_pin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:goldo.nucleo.hal.UartConfig.tx_pin)
}
#if LANG_CXX11
inline void UartConfig::set_tx_pin(::std::string&& value) {
  
  tx_pin_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:goldo.nucleo.hal.UartConfig.tx_pin)
}
#endif
inline void UartConfig::set_tx_pin(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  tx_pin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:goldo.nucleo.hal.UartConfig.tx_pin)
}
inline void UartConfig::set_tx_pin(const char* value, size_t size) {
  
  tx_pin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:goldo.nucleo.hal.UartConfig.tx_pin)
}
inline ::std::string* UartConfig::mutable_tx_pin() {
  
  // @@protoc_insertion_point(field_mutable:goldo.nucleo.hal.UartConfig.tx_pin)
  return tx_pin_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UartConfig::release_tx_pin() {
  // @@protoc_insertion_point(field_release:goldo.nucleo.hal.UartConfig.tx_pin)
  
  return tx_pin_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UartConfig::set_allocated_tx_pin(::std::string* tx_pin) {
  if (tx_pin != NULL) {
    
  } else {
    
  }
  tx_pin_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tx_pin);
  // @@protoc_insertion_point(field_set_allocated:goldo.nucleo.hal.UartConfig.tx_pin)
}

// string txen_pin = 12;
inline void UartConfig::clear_txen_pin() {
  txen_pin_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UartConfig::txen_pin() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.hal.UartConfig.txen_pin)
  return txen_pin_.GetNoArena();
}
inline void UartConfig::set_txen_pin(const ::std::string& value) {
  
  txen_pin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:goldo.nucleo.hal.UartConfig.txen_pin)
}
#if LANG_CXX11
inline void UartConfig::set_txen_pin(::std::string&& value) {
  
  txen_pin_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:goldo.nucleo.hal.UartConfig.txen_pin)
}
#endif
inline void UartConfig::set_txen_pin(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  txen_pin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:goldo.nucleo.hal.UartConfig.txen_pin)
}
inline void UartConfig::set_txen_pin(const char* value, size_t size) {
  
  txen_pin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:goldo.nucleo.hal.UartConfig.txen_pin)
}
inline ::std::string* UartConfig::mutable_txen_pin() {
  
  // @@protoc_insertion_point(field_mutable:goldo.nucleo.hal.UartConfig.txen_pin)
  return txen_pin_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UartConfig::release_txen_pin() {
  // @@protoc_insertion_point(field_release:goldo.nucleo.hal.UartConfig.txen_pin)
  
  return txen_pin_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UartConfig::set_allocated_txen_pin(::std::string* txen_pin) {
  if (txen_pin != NULL) {
    
  } else {
    
  }
  txen_pin_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), txen_pin);
  // @@protoc_insertion_point(field_set_allocated:goldo.nucleo.hal.UartConfig.txen_pin)
}

// uint32 baudrate = 13;
inline void UartConfig::clear_baudrate() {
  baudrate_ = 0u;
}
inline ::google::protobuf::uint32 UartConfig::baudrate() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.hal.UartConfig.baudrate)
  return baudrate_;
}
inline void UartConfig::set_baudrate(::google::protobuf::uint32 value) {
  
  baudrate_ = value;
  // @@protoc_insertion_point(field_set:goldo.nucleo.hal.UartConfig.baudrate)
}

// -------------------------------------------------------------------

// I2cConfig

// string device = 1;
inline void I2cConfig::clear_device() {
  device_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& I2cConfig::device() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.hal.I2cConfig.device)
  return device_.GetNoArena();
}
inline void I2cConfig::set_device(const ::std::string& value) {
  
  device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:goldo.nucleo.hal.I2cConfig.device)
}
#if LANG_CXX11
inline void I2cConfig::set_device(::std::string&& value) {
  
  device_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:goldo.nucleo.hal.I2cConfig.device)
}
#endif
inline void I2cConfig::set_device(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:goldo.nucleo.hal.I2cConfig.device)
}
inline void I2cConfig::set_device(const char* value, size_t size) {
  
  device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:goldo.nucleo.hal.I2cConfig.device)
}
inline ::std::string* I2cConfig::mutable_device() {
  
  // @@protoc_insertion_point(field_mutable:goldo.nucleo.hal.I2cConfig.device)
  return device_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* I2cConfig::release_device() {
  // @@protoc_insertion_point(field_release:goldo.nucleo.hal.I2cConfig.device)
  
  return device_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void I2cConfig::set_allocated_device(::std::string* device) {
  if (device != NULL) {
    
  } else {
    
  }
  device_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device);
  // @@protoc_insertion_point(field_set_allocated:goldo.nucleo.hal.I2cConfig.device)
}

// uint32 id = 2;
inline void I2cConfig::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 I2cConfig::id() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.hal.I2cConfig.id)
  return id_;
}
inline void I2cConfig::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:goldo.nucleo.hal.I2cConfig.id)
}

// string name = 3;
inline void I2cConfig::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& I2cConfig::name() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.hal.I2cConfig.name)
  return name_.GetNoArena();
}
inline void I2cConfig::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:goldo.nucleo.hal.I2cConfig.name)
}
#if LANG_CXX11
inline void I2cConfig::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:goldo.nucleo.hal.I2cConfig.name)
}
#endif
inline void I2cConfig::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:goldo.nucleo.hal.I2cConfig.name)
}
inline void I2cConfig::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:goldo.nucleo.hal.I2cConfig.name)
}
inline ::std::string* I2cConfig::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:goldo.nucleo.hal.I2cConfig.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* I2cConfig::release_name() {
  // @@protoc_insertion_point(field_release:goldo.nucleo.hal.I2cConfig.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void I2cConfig::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:goldo.nucleo.hal.I2cConfig.name)
}

// uint32 rx_buffer_size = 4;
inline void I2cConfig::clear_rx_buffer_size() {
  rx_buffer_size_ = 0u;
}
inline ::google::protobuf::uint32 I2cConfig::rx_buffer_size() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.hal.I2cConfig.rx_buffer_size)
  return rx_buffer_size_;
}
inline void I2cConfig::set_rx_buffer_size(::google::protobuf::uint32 value) {
  
  rx_buffer_size_ = value;
  // @@protoc_insertion_point(field_set:goldo.nucleo.hal.I2cConfig.rx_buffer_size)
}

// uint32 tx_buffer_size = 5;
inline void I2cConfig::clear_tx_buffer_size() {
  tx_buffer_size_ = 0u;
}
inline ::google::protobuf::uint32 I2cConfig::tx_buffer_size() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.hal.I2cConfig.tx_buffer_size)
  return tx_buffer_size_;
}
inline void I2cConfig::set_tx_buffer_size(::google::protobuf::uint32 value) {
  
  tx_buffer_size_ = value;
  // @@protoc_insertion_point(field_set:goldo.nucleo.hal.I2cConfig.tx_buffer_size)
}

// bool rx_blocking = 6;
inline void I2cConfig::clear_rx_blocking() {
  rx_blocking_ = false;
}
inline bool I2cConfig::rx_blocking() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.hal.I2cConfig.rx_blocking)
  return rx_blocking_;
}
inline void I2cConfig::set_rx_blocking(bool value) {
  
  rx_blocking_ = value;
  // @@protoc_insertion_point(field_set:goldo.nucleo.hal.I2cConfig.rx_blocking)
}

// bool tx_blocking = 7;
inline void I2cConfig::clear_tx_blocking() {
  tx_blocking_ = false;
}
inline bool I2cConfig::tx_blocking() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.hal.I2cConfig.tx_blocking)
  return tx_blocking_;
}
inline void I2cConfig::set_tx_blocking(bool value) {
  
  tx_blocking_ = value;
  // @@protoc_insertion_point(field_set:goldo.nucleo.hal.I2cConfig.tx_blocking)
}

// bool rx_dma = 8;
inline void I2cConfig::clear_rx_dma() {
  rx_dma_ = false;
}
inline bool I2cConfig::rx_dma() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.hal.I2cConfig.rx_dma)
  return rx_dma_;
}
inline void I2cConfig::set_rx_dma(bool value) {
  
  rx_dma_ = value;
  // @@protoc_insertion_point(field_set:goldo.nucleo.hal.I2cConfig.rx_dma)
}

// bool tx_dma = 9;
inline void I2cConfig::clear_tx_dma() {
  tx_dma_ = false;
}
inline bool I2cConfig::tx_dma() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.hal.I2cConfig.tx_dma)
  return tx_dma_;
}
inline void I2cConfig::set_tx_dma(bool value) {
  
  tx_dma_ = value;
  // @@protoc_insertion_point(field_set:goldo.nucleo.hal.I2cConfig.tx_dma)
}

// string scl_pin = 10;
inline void I2cConfig::clear_scl_pin() {
  scl_pin_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& I2cConfig::scl_pin() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.hal.I2cConfig.scl_pin)
  return scl_pin_.GetNoArena();
}
inline void I2cConfig::set_scl_pin(const ::std::string& value) {
  
  scl_pin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:goldo.nucleo.hal.I2cConfig.scl_pin)
}
#if LANG_CXX11
inline void I2cConfig::set_scl_pin(::std::string&& value) {
  
  scl_pin_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:goldo.nucleo.hal.I2cConfig.scl_pin)
}
#endif
inline void I2cConfig::set_scl_pin(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  scl_pin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:goldo.nucleo.hal.I2cConfig.scl_pin)
}
inline void I2cConfig::set_scl_pin(const char* value, size_t size) {
  
  scl_pin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:goldo.nucleo.hal.I2cConfig.scl_pin)
}
inline ::std::string* I2cConfig::mutable_scl_pin() {
  
  // @@protoc_insertion_point(field_mutable:goldo.nucleo.hal.I2cConfig.scl_pin)
  return scl_pin_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* I2cConfig::release_scl_pin() {
  // @@protoc_insertion_point(field_release:goldo.nucleo.hal.I2cConfig.scl_pin)
  
  return scl_pin_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void I2cConfig::set_allocated_scl_pin(::std::string* scl_pin) {
  if (scl_pin != NULL) {
    
  } else {
    
  }
  scl_pin_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), scl_pin);
  // @@protoc_insertion_point(field_set_allocated:goldo.nucleo.hal.I2cConfig.scl_pin)
}

// string sda_pin = 11;
inline void I2cConfig::clear_sda_pin() {
  sda_pin_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& I2cConfig::sda_pin() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.hal.I2cConfig.sda_pin)
  return sda_pin_.GetNoArena();
}
inline void I2cConfig::set_sda_pin(const ::std::string& value) {
  
  sda_pin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:goldo.nucleo.hal.I2cConfig.sda_pin)
}
#if LANG_CXX11
inline void I2cConfig::set_sda_pin(::std::string&& value) {
  
  sda_pin_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:goldo.nucleo.hal.I2cConfig.sda_pin)
}
#endif
inline void I2cConfig::set_sda_pin(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sda_pin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:goldo.nucleo.hal.I2cConfig.sda_pin)
}
inline void I2cConfig::set_sda_pin(const char* value, size_t size) {
  
  sda_pin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:goldo.nucleo.hal.I2cConfig.sda_pin)
}
inline ::std::string* I2cConfig::mutable_sda_pin() {
  
  // @@protoc_insertion_point(field_mutable:goldo.nucleo.hal.I2cConfig.sda_pin)
  return sda_pin_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* I2cConfig::release_sda_pin() {
  // @@protoc_insertion_point(field_release:goldo.nucleo.hal.I2cConfig.sda_pin)
  
  return sda_pin_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void I2cConfig::set_allocated_sda_pin(::std::string* sda_pin) {
  if (sda_pin != NULL) {
    
  } else {
    
  }
  sda_pin_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sda_pin);
  // @@protoc_insertion_point(field_set_allocated:goldo.nucleo.hal.I2cConfig.sda_pin)
}

// uint32 timing = 12;
inline void I2cConfig::clear_timing() {
  timing_ = 0u;
}
inline ::google::protobuf::uint32 I2cConfig::timing() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.hal.I2cConfig.timing)
  return timing_;
}
inline void I2cConfig::set_timing(::google::protobuf::uint32 value) {
  
  timing_ = value;
  // @@protoc_insertion_point(field_set:goldo.nucleo.hal.I2cConfig.timing)
}

// -------------------------------------------------------------------

// SpiConfig

// string device = 1;
inline void SpiConfig::clear_device() {
  device_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SpiConfig::device() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.hal.SpiConfig.device)
  return device_.GetNoArena();
}
inline void SpiConfig::set_device(const ::std::string& value) {
  
  device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:goldo.nucleo.hal.SpiConfig.device)
}
#if LANG_CXX11
inline void SpiConfig::set_device(::std::string&& value) {
  
  device_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:goldo.nucleo.hal.SpiConfig.device)
}
#endif
inline void SpiConfig::set_device(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:goldo.nucleo.hal.SpiConfig.device)
}
inline void SpiConfig::set_device(const char* value, size_t size) {
  
  device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:goldo.nucleo.hal.SpiConfig.device)
}
inline ::std::string* SpiConfig::mutable_device() {
  
  // @@protoc_insertion_point(field_mutable:goldo.nucleo.hal.SpiConfig.device)
  return device_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SpiConfig::release_device() {
  // @@protoc_insertion_point(field_release:goldo.nucleo.hal.SpiConfig.device)
  
  return device_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SpiConfig::set_allocated_device(::std::string* device) {
  if (device != NULL) {
    
  } else {
    
  }
  device_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device);
  // @@protoc_insertion_point(field_set_allocated:goldo.nucleo.hal.SpiConfig.device)
}

// uint32 id = 2;
inline void SpiConfig::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 SpiConfig::id() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.hal.SpiConfig.id)
  return id_;
}
inline void SpiConfig::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:goldo.nucleo.hal.SpiConfig.id)
}

// string name = 3;
inline void SpiConfig::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SpiConfig::name() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.hal.SpiConfig.name)
  return name_.GetNoArena();
}
inline void SpiConfig::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:goldo.nucleo.hal.SpiConfig.name)
}
#if LANG_CXX11
inline void SpiConfig::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:goldo.nucleo.hal.SpiConfig.name)
}
#endif
inline void SpiConfig::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:goldo.nucleo.hal.SpiConfig.name)
}
inline void SpiConfig::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:goldo.nucleo.hal.SpiConfig.name)
}
inline ::std::string* SpiConfig::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:goldo.nucleo.hal.SpiConfig.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SpiConfig::release_name() {
  // @@protoc_insertion_point(field_release:goldo.nucleo.hal.SpiConfig.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SpiConfig::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:goldo.nucleo.hal.SpiConfig.name)
}

// uint32 rx_buffer_size = 4;
inline void SpiConfig::clear_rx_buffer_size() {
  rx_buffer_size_ = 0u;
}
inline ::google::protobuf::uint32 SpiConfig::rx_buffer_size() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.hal.SpiConfig.rx_buffer_size)
  return rx_buffer_size_;
}
inline void SpiConfig::set_rx_buffer_size(::google::protobuf::uint32 value) {
  
  rx_buffer_size_ = value;
  // @@protoc_insertion_point(field_set:goldo.nucleo.hal.SpiConfig.rx_buffer_size)
}

// uint32 tx_buffer_size = 5;
inline void SpiConfig::clear_tx_buffer_size() {
  tx_buffer_size_ = 0u;
}
inline ::google::protobuf::uint32 SpiConfig::tx_buffer_size() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.hal.SpiConfig.tx_buffer_size)
  return tx_buffer_size_;
}
inline void SpiConfig::set_tx_buffer_size(::google::protobuf::uint32 value) {
  
  tx_buffer_size_ = value;
  // @@protoc_insertion_point(field_set:goldo.nucleo.hal.SpiConfig.tx_buffer_size)
}

// bool rx_blocking = 6;
inline void SpiConfig::clear_rx_blocking() {
  rx_blocking_ = false;
}
inline bool SpiConfig::rx_blocking() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.hal.SpiConfig.rx_blocking)
  return rx_blocking_;
}
inline void SpiConfig::set_rx_blocking(bool value) {
  
  rx_blocking_ = value;
  // @@protoc_insertion_point(field_set:goldo.nucleo.hal.SpiConfig.rx_blocking)
}

// bool tx_blocking = 7;
inline void SpiConfig::clear_tx_blocking() {
  tx_blocking_ = false;
}
inline bool SpiConfig::tx_blocking() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.hal.SpiConfig.tx_blocking)
  return tx_blocking_;
}
inline void SpiConfig::set_tx_blocking(bool value) {
  
  tx_blocking_ = value;
  // @@protoc_insertion_point(field_set:goldo.nucleo.hal.SpiConfig.tx_blocking)
}

// bool rx_dma = 8;
inline void SpiConfig::clear_rx_dma() {
  rx_dma_ = false;
}
inline bool SpiConfig::rx_dma() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.hal.SpiConfig.rx_dma)
  return rx_dma_;
}
inline void SpiConfig::set_rx_dma(bool value) {
  
  rx_dma_ = value;
  // @@protoc_insertion_point(field_set:goldo.nucleo.hal.SpiConfig.rx_dma)
}

// bool tx_dma = 9;
inline void SpiConfig::clear_tx_dma() {
  tx_dma_ = false;
}
inline bool SpiConfig::tx_dma() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.hal.SpiConfig.tx_dma)
  return tx_dma_;
}
inline void SpiConfig::set_tx_dma(bool value) {
  
  tx_dma_ = value;
  // @@protoc_insertion_point(field_set:goldo.nucleo.hal.SpiConfig.tx_dma)
}

// string sck_pin = 10;
inline void SpiConfig::clear_sck_pin() {
  sck_pin_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SpiConfig::sck_pin() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.hal.SpiConfig.sck_pin)
  return sck_pin_.GetNoArena();
}
inline void SpiConfig::set_sck_pin(const ::std::string& value) {
  
  sck_pin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:goldo.nucleo.hal.SpiConfig.sck_pin)
}
#if LANG_CXX11
inline void SpiConfig::set_sck_pin(::std::string&& value) {
  
  sck_pin_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:goldo.nucleo.hal.SpiConfig.sck_pin)
}
#endif
inline void SpiConfig::set_sck_pin(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sck_pin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:goldo.nucleo.hal.SpiConfig.sck_pin)
}
inline void SpiConfig::set_sck_pin(const char* value, size_t size) {
  
  sck_pin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:goldo.nucleo.hal.SpiConfig.sck_pin)
}
inline ::std::string* SpiConfig::mutable_sck_pin() {
  
  // @@protoc_insertion_point(field_mutable:goldo.nucleo.hal.SpiConfig.sck_pin)
  return sck_pin_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SpiConfig::release_sck_pin() {
  // @@protoc_insertion_point(field_release:goldo.nucleo.hal.SpiConfig.sck_pin)
  
  return sck_pin_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SpiConfig::set_allocated_sck_pin(::std::string* sck_pin) {
  if (sck_pin != NULL) {
    
  } else {
    
  }
  sck_pin_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sck_pin);
  // @@protoc_insertion_point(field_set_allocated:goldo.nucleo.hal.SpiConfig.sck_pin)
}

// string mosi_pin = 11;
inline void SpiConfig::clear_mosi_pin() {
  mosi_pin_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SpiConfig::mosi_pin() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.hal.SpiConfig.mosi_pin)
  return mosi_pin_.GetNoArena();
}
inline void SpiConfig::set_mosi_pin(const ::std::string& value) {
  
  mosi_pin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:goldo.nucleo.hal.SpiConfig.mosi_pin)
}
#if LANG_CXX11
inline void SpiConfig::set_mosi_pin(::std::string&& value) {
  
  mosi_pin_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:goldo.nucleo.hal.SpiConfig.mosi_pin)
}
#endif
inline void SpiConfig::set_mosi_pin(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  mosi_pin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:goldo.nucleo.hal.SpiConfig.mosi_pin)
}
inline void SpiConfig::set_mosi_pin(const char* value, size_t size) {
  
  mosi_pin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:goldo.nucleo.hal.SpiConfig.mosi_pin)
}
inline ::std::string* SpiConfig::mutable_mosi_pin() {
  
  // @@protoc_insertion_point(field_mutable:goldo.nucleo.hal.SpiConfig.mosi_pin)
  return mosi_pin_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SpiConfig::release_mosi_pin() {
  // @@protoc_insertion_point(field_release:goldo.nucleo.hal.SpiConfig.mosi_pin)
  
  return mosi_pin_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SpiConfig::set_allocated_mosi_pin(::std::string* mosi_pin) {
  if (mosi_pin != NULL) {
    
  } else {
    
  }
  mosi_pin_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mosi_pin);
  // @@protoc_insertion_point(field_set_allocated:goldo.nucleo.hal.SpiConfig.mosi_pin)
}

// string miso_pin = 12;
inline void SpiConfig::clear_miso_pin() {
  miso_pin_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SpiConfig::miso_pin() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.hal.SpiConfig.miso_pin)
  return miso_pin_.GetNoArena();
}
inline void SpiConfig::set_miso_pin(const ::std::string& value) {
  
  miso_pin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:goldo.nucleo.hal.SpiConfig.miso_pin)
}
#if LANG_CXX11
inline void SpiConfig::set_miso_pin(::std::string&& value) {
  
  miso_pin_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:goldo.nucleo.hal.SpiConfig.miso_pin)
}
#endif
inline void SpiConfig::set_miso_pin(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  miso_pin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:goldo.nucleo.hal.SpiConfig.miso_pin)
}
inline void SpiConfig::set_miso_pin(const char* value, size_t size) {
  
  miso_pin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:goldo.nucleo.hal.SpiConfig.miso_pin)
}
inline ::std::string* SpiConfig::mutable_miso_pin() {
  
  // @@protoc_insertion_point(field_mutable:goldo.nucleo.hal.SpiConfig.miso_pin)
  return miso_pin_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SpiConfig::release_miso_pin() {
  // @@protoc_insertion_point(field_release:goldo.nucleo.hal.SpiConfig.miso_pin)
  
  return miso_pin_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SpiConfig::set_allocated_miso_pin(::std::string* miso_pin) {
  if (miso_pin != NULL) {
    
  } else {
    
  }
  miso_pin_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), miso_pin);
  // @@protoc_insertion_point(field_set_allocated:goldo.nucleo.hal.SpiConfig.miso_pin)
}

// string nss_pin = 13;
inline void SpiConfig::clear_nss_pin() {
  nss_pin_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SpiConfig::nss_pin() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.hal.SpiConfig.nss_pin)
  return nss_pin_.GetNoArena();
}
inline void SpiConfig::set_nss_pin(const ::std::string& value) {
  
  nss_pin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:goldo.nucleo.hal.SpiConfig.nss_pin)
}
#if LANG_CXX11
inline void SpiConfig::set_nss_pin(::std::string&& value) {
  
  nss_pin_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:goldo.nucleo.hal.SpiConfig.nss_pin)
}
#endif
inline void SpiConfig::set_nss_pin(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nss_pin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:goldo.nucleo.hal.SpiConfig.nss_pin)
}
inline void SpiConfig::set_nss_pin(const char* value, size_t size) {
  
  nss_pin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:goldo.nucleo.hal.SpiConfig.nss_pin)
}
inline ::std::string* SpiConfig::mutable_nss_pin() {
  
  // @@protoc_insertion_point(field_mutable:goldo.nucleo.hal.SpiConfig.nss_pin)
  return nss_pin_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SpiConfig::release_nss_pin() {
  // @@protoc_insertion_point(field_release:goldo.nucleo.hal.SpiConfig.nss_pin)
  
  return nss_pin_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SpiConfig::set_allocated_nss_pin(::std::string* nss_pin) {
  if (nss_pin != NULL) {
    
  } else {
    
  }
  nss_pin_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nss_pin);
  // @@protoc_insertion_point(field_set_allocated:goldo.nucleo.hal.SpiConfig.nss_pin)
}

// uint32 baudrate_prescaler = 14;
inline void SpiConfig::clear_baudrate_prescaler() {
  baudrate_prescaler_ = 0u;
}
inline ::google::protobuf::uint32 SpiConfig::baudrate_prescaler() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.hal.SpiConfig.baudrate_prescaler)
  return baudrate_prescaler_;
}
inline void SpiConfig::set_baudrate_prescaler(::google::protobuf::uint32 value) {
  
  baudrate_prescaler_ = value;
  // @@protoc_insertion_point(field_set:goldo.nucleo.hal.SpiConfig.baudrate_prescaler)
}

// -------------------------------------------------------------------

// HalConfig

// repeated .goldo.nucleo.hal.GpioConfig gpio = 1;
inline int HalConfig::gpio_size() const {
  return gpio_.size();
}
inline void HalConfig::clear_gpio() {
  gpio_.Clear();
}
inline ::goldo::nucleo::hal::GpioConfig* HalConfig::mutable_gpio(int index) {
  // @@protoc_insertion_point(field_mutable:goldo.nucleo.hal.HalConfig.gpio)
  return gpio_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::goldo::nucleo::hal::GpioConfig >*
HalConfig::mutable_gpio() {
  // @@protoc_insertion_point(field_mutable_list:goldo.nucleo.hal.HalConfig.gpio)
  return &gpio_;
}
inline const ::goldo::nucleo::hal::GpioConfig& HalConfig::gpio(int index) const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.hal.HalConfig.gpio)
  return gpio_.Get(index);
}
inline ::goldo::nucleo::hal::GpioConfig* HalConfig::add_gpio() {
  // @@protoc_insertion_point(field_add:goldo.nucleo.hal.HalConfig.gpio)
  return gpio_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::goldo::nucleo::hal::GpioConfig >&
HalConfig::gpio() const {
  // @@protoc_insertion_point(field_list:goldo.nucleo.hal.HalConfig.gpio)
  return gpio_;
}

// repeated .goldo.nucleo.hal.TimerConfig timer = 2;
inline int HalConfig::timer_size() const {
  return timer_.size();
}
inline void HalConfig::clear_timer() {
  timer_.Clear();
}
inline ::goldo::nucleo::hal::TimerConfig* HalConfig::mutable_timer(int index) {
  // @@protoc_insertion_point(field_mutable:goldo.nucleo.hal.HalConfig.timer)
  return timer_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::goldo::nucleo::hal::TimerConfig >*
HalConfig::mutable_timer() {
  // @@protoc_insertion_point(field_mutable_list:goldo.nucleo.hal.HalConfig.timer)
  return &timer_;
}
inline const ::goldo::nucleo::hal::TimerConfig& HalConfig::timer(int index) const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.hal.HalConfig.timer)
  return timer_.Get(index);
}
inline ::goldo::nucleo::hal::TimerConfig* HalConfig::add_timer() {
  // @@protoc_insertion_point(field_add:goldo.nucleo.hal.HalConfig.timer)
  return timer_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::goldo::nucleo::hal::TimerConfig >&
HalConfig::timer() const {
  // @@protoc_insertion_point(field_list:goldo.nucleo.hal.HalConfig.timer)
  return timer_;
}

// repeated .goldo.nucleo.hal.PwmConfig pwm = 3;
inline int HalConfig::pwm_size() const {
  return pwm_.size();
}
inline void HalConfig::clear_pwm() {
  pwm_.Clear();
}
inline ::goldo::nucleo::hal::PwmConfig* HalConfig::mutable_pwm(int index) {
  // @@protoc_insertion_point(field_mutable:goldo.nucleo.hal.HalConfig.pwm)
  return pwm_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::goldo::nucleo::hal::PwmConfig >*
HalConfig::mutable_pwm() {
  // @@protoc_insertion_point(field_mutable_list:goldo.nucleo.hal.HalConfig.pwm)
  return &pwm_;
}
inline const ::goldo::nucleo::hal::PwmConfig& HalConfig::pwm(int index) const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.hal.HalConfig.pwm)
  return pwm_.Get(index);
}
inline ::goldo::nucleo::hal::PwmConfig* HalConfig::add_pwm() {
  // @@protoc_insertion_point(field_add:goldo.nucleo.hal.HalConfig.pwm)
  return pwm_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::goldo::nucleo::hal::PwmConfig >&
HalConfig::pwm() const {
  // @@protoc_insertion_point(field_list:goldo.nucleo.hal.HalConfig.pwm)
  return pwm_;
}

// repeated .goldo.nucleo.hal.EncoderConfig encoder = 4;
inline int HalConfig::encoder_size() const {
  return encoder_.size();
}
inline void HalConfig::clear_encoder() {
  encoder_.Clear();
}
inline ::goldo::nucleo::hal::EncoderConfig* HalConfig::mutable_encoder(int index) {
  // @@protoc_insertion_point(field_mutable:goldo.nucleo.hal.HalConfig.encoder)
  return encoder_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::goldo::nucleo::hal::EncoderConfig >*
HalConfig::mutable_encoder() {
  // @@protoc_insertion_point(field_mutable_list:goldo.nucleo.hal.HalConfig.encoder)
  return &encoder_;
}
inline const ::goldo::nucleo::hal::EncoderConfig& HalConfig::encoder(int index) const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.hal.HalConfig.encoder)
  return encoder_.Get(index);
}
inline ::goldo::nucleo::hal::EncoderConfig* HalConfig::add_encoder() {
  // @@protoc_insertion_point(field_add:goldo.nucleo.hal.HalConfig.encoder)
  return encoder_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::goldo::nucleo::hal::EncoderConfig >&
HalConfig::encoder() const {
  // @@protoc_insertion_point(field_list:goldo.nucleo.hal.HalConfig.encoder)
  return encoder_;
}

// repeated .goldo.nucleo.hal.UartConfig uart = 5;
inline int HalConfig::uart_size() const {
  return uart_.size();
}
inline void HalConfig::clear_uart() {
  uart_.Clear();
}
inline ::goldo::nucleo::hal::UartConfig* HalConfig::mutable_uart(int index) {
  // @@protoc_insertion_point(field_mutable:goldo.nucleo.hal.HalConfig.uart)
  return uart_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::goldo::nucleo::hal::UartConfig >*
HalConfig::mutable_uart() {
  // @@protoc_insertion_point(field_mutable_list:goldo.nucleo.hal.HalConfig.uart)
  return &uart_;
}
inline const ::goldo::nucleo::hal::UartConfig& HalConfig::uart(int index) const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.hal.HalConfig.uart)
  return uart_.Get(index);
}
inline ::goldo::nucleo::hal::UartConfig* HalConfig::add_uart() {
  // @@protoc_insertion_point(field_add:goldo.nucleo.hal.HalConfig.uart)
  return uart_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::goldo::nucleo::hal::UartConfig >&
HalConfig::uart() const {
  // @@protoc_insertion_point(field_list:goldo.nucleo.hal.HalConfig.uart)
  return uart_;
}

// repeated .goldo.nucleo.hal.I2cConfig i2c = 6;
inline int HalConfig::i2c_size() const {
  return i2c_.size();
}
inline void HalConfig::clear_i2c() {
  i2c_.Clear();
}
inline ::goldo::nucleo::hal::I2cConfig* HalConfig::mutable_i2c(int index) {
  // @@protoc_insertion_point(field_mutable:goldo.nucleo.hal.HalConfig.i2c)
  return i2c_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::goldo::nucleo::hal::I2cConfig >*
HalConfig::mutable_i2c() {
  // @@protoc_insertion_point(field_mutable_list:goldo.nucleo.hal.HalConfig.i2c)
  return &i2c_;
}
inline const ::goldo::nucleo::hal::I2cConfig& HalConfig::i2c(int index) const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.hal.HalConfig.i2c)
  return i2c_.Get(index);
}
inline ::goldo::nucleo::hal::I2cConfig* HalConfig::add_i2c() {
  // @@protoc_insertion_point(field_add:goldo.nucleo.hal.HalConfig.i2c)
  return i2c_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::goldo::nucleo::hal::I2cConfig >&
HalConfig::i2c() const {
  // @@protoc_insertion_point(field_list:goldo.nucleo.hal.HalConfig.i2c)
  return i2c_;
}

// repeated .goldo.nucleo.hal.SpiConfig spi = 7;
inline int HalConfig::spi_size() const {
  return spi_.size();
}
inline void HalConfig::clear_spi() {
  spi_.Clear();
}
inline ::goldo::nucleo::hal::SpiConfig* HalConfig::mutable_spi(int index) {
  // @@protoc_insertion_point(field_mutable:goldo.nucleo.hal.HalConfig.spi)
  return spi_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::goldo::nucleo::hal::SpiConfig >*
HalConfig::mutable_spi() {
  // @@protoc_insertion_point(field_mutable_list:goldo.nucleo.hal.HalConfig.spi)
  return &spi_;
}
inline const ::goldo::nucleo::hal::SpiConfig& HalConfig::spi(int index) const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.hal.HalConfig.spi)
  return spi_.Get(index);
}
inline ::goldo::nucleo::hal::SpiConfig* HalConfig::add_spi() {
  // @@protoc_insertion_point(field_add:goldo.nucleo.hal.HalConfig.spi)
  return spi_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::goldo::nucleo::hal::SpiConfig >&
HalConfig::spi() const {
  // @@protoc_insertion_point(field_list:goldo.nucleo.hal.HalConfig.spi)
  return spi_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace hal
}  // namespace nucleo
}  // namespace goldo

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::goldo::nucleo::hal::GpioMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::goldo::nucleo::hal::GpioMode>() {
  return ::goldo::nucleo::hal::GpioMode_descriptor();
}
template <> struct is_proto_enum< ::goldo::nucleo::hal::GpioPull> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::goldo::nucleo::hal::GpioPull>() {
  return ::goldo::nucleo::hal::GpioPull_descriptor();
}
template <> struct is_proto_enum< ::goldo::nucleo::hal::EncoderDirection> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::goldo::nucleo::hal::EncoderDirection>() {
  return ::goldo::nucleo::hal::EncoderDirection_descriptor();
}
template <> struct is_proto_enum< ::goldo::nucleo::hal::EncoderMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::goldo::nucleo::hal::EncoderMode>() {
  return ::goldo::nucleo::hal::EncoderMode_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_goldo_2fnucleo_2fhal_2eproto
