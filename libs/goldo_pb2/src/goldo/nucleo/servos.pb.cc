// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: goldo/nucleo/servos.proto

#include "goldo/nucleo/servos.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_goldo_2fnucleo_2fservos_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_goldo_2fnucleo_2fservos_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ServoEnable;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_goldo_2fnucleo_2fservos_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ServoPosition;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_goldo_2fnucleo_2fservos_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ServoState;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_goldo_2fnucleo_2fservos_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ServoTorque;
}  // namespace protobuf_goldo_2fnucleo_2fservos_2eproto
namespace goldo {
namespace nucleo {
namespace servos {
class ServoConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ServoConfig>
      _instance;
} _ServoConfig_default_instance_;
class LiftConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LiftConfig>
      _instance;
} _LiftConfig_default_instance_;
class ServoStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ServoState>
      _instance;
} _ServoState_default_instance_;
class ServoStatesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ServoStates>
      _instance;
} _ServoStates_default_instance_;
class ServoPositionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ServoPosition>
      _instance;
} _ServoPosition_default_instance_;
class ServoTorqueDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ServoTorque>
      _instance;
} _ServoTorque_default_instance_;
class ServoEnableDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ServoEnable>
      _instance;
} _ServoEnable_default_instance_;
class CmdDisableAllDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CmdDisableAll>
      _instance;
} _CmdDisableAll_default_instance_;
class CmdSetEnableDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CmdSetEnable>
      _instance;
} _CmdSetEnable_default_instance_;
class CmdLiftDoHomingDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CmdLiftDoHoming>
      _instance;
} _CmdLiftDoHoming_default_instance_;
class CmdLiftsRawDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CmdLiftsRaw>
      _instance;
} _CmdLiftsRaw_default_instance_;
class CmdLiftSetEnableDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CmdLiftSetEnable>
      _instance;
} _CmdLiftSetEnable_default_instance_;
class CmdMoveMultipleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CmdMoveMultiple>
      _instance;
} _CmdMoveMultiple_default_instance_;
class CmdSetMaxTorquesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CmdSetMaxTorques>
      _instance;
} _CmdSetMaxTorques_default_instance_;
}  // namespace servos
}  // namespace nucleo
}  // namespace goldo
namespace protobuf_goldo_2fnucleo_2fservos_2eproto {
static void InitDefaultsServoConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::goldo::nucleo::servos::_ServoConfig_default_instance_;
    new (ptr) ::goldo::nucleo::servos::ServoConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::goldo::nucleo::servos::ServoConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ServoConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsServoConfig}, {}};

static void InitDefaultsLiftConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::goldo::nucleo::servos::_LiftConfig_default_instance_;
    new (ptr) ::goldo::nucleo::servos::LiftConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::goldo::nucleo::servos::LiftConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LiftConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLiftConfig}, {}};

static void InitDefaultsServoState() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::goldo::nucleo::servos::_ServoState_default_instance_;
    new (ptr) ::goldo::nucleo::servos::ServoState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::goldo::nucleo::servos::ServoState::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ServoState =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsServoState}, {}};

static void InitDefaultsServoStates() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::goldo::nucleo::servos::_ServoStates_default_instance_;
    new (ptr) ::goldo::nucleo::servos::ServoStates();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::goldo::nucleo::servos::ServoStates::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ServoStates =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsServoStates}, {
      &protobuf_goldo_2fnucleo_2fservos_2eproto::scc_info_ServoState.base,}};

static void InitDefaultsServoPosition() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::goldo::nucleo::servos::_ServoPosition_default_instance_;
    new (ptr) ::goldo::nucleo::servos::ServoPosition();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::goldo::nucleo::servos::ServoPosition::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ServoPosition =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsServoPosition}, {}};

static void InitDefaultsServoTorque() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::goldo::nucleo::servos::_ServoTorque_default_instance_;
    new (ptr) ::goldo::nucleo::servos::ServoTorque();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::goldo::nucleo::servos::ServoTorque::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ServoTorque =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsServoTorque}, {}};

static void InitDefaultsServoEnable() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::goldo::nucleo::servos::_ServoEnable_default_instance_;
    new (ptr) ::goldo::nucleo::servos::ServoEnable();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::goldo::nucleo::servos::ServoEnable::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ServoEnable =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsServoEnable}, {}};

static void InitDefaultsCmdDisableAll() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::goldo::nucleo::servos::_CmdDisableAll_default_instance_;
    new (ptr) ::goldo::nucleo::servos::CmdDisableAll();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::goldo::nucleo::servos::CmdDisableAll::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CmdDisableAll =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCmdDisableAll}, {}};

static void InitDefaultsCmdSetEnable() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::goldo::nucleo::servos::_CmdSetEnable_default_instance_;
    new (ptr) ::goldo::nucleo::servos::CmdSetEnable();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::goldo::nucleo::servos::CmdSetEnable::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CmdSetEnable =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCmdSetEnable}, {
      &protobuf_goldo_2fnucleo_2fservos_2eproto::scc_info_ServoEnable.base,}};

static void InitDefaultsCmdLiftDoHoming() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::goldo::nucleo::servos::_CmdLiftDoHoming_default_instance_;
    new (ptr) ::goldo::nucleo::servos::CmdLiftDoHoming();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::goldo::nucleo::servos::CmdLiftDoHoming::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CmdLiftDoHoming =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCmdLiftDoHoming}, {}};

static void InitDefaultsCmdLiftsRaw() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::goldo::nucleo::servos::_CmdLiftsRaw_default_instance_;
    new (ptr) ::goldo::nucleo::servos::CmdLiftsRaw();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::goldo::nucleo::servos::CmdLiftsRaw::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CmdLiftsRaw =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCmdLiftsRaw}, {}};

static void InitDefaultsCmdLiftSetEnable() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::goldo::nucleo::servos::_CmdLiftSetEnable_default_instance_;
    new (ptr) ::goldo::nucleo::servos::CmdLiftSetEnable();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::goldo::nucleo::servos::CmdLiftSetEnable::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CmdLiftSetEnable =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCmdLiftSetEnable}, {}};

static void InitDefaultsCmdMoveMultiple() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::goldo::nucleo::servos::_CmdMoveMultiple_default_instance_;
    new (ptr) ::goldo::nucleo::servos::CmdMoveMultiple();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::goldo::nucleo::servos::CmdMoveMultiple::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CmdMoveMultiple =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCmdMoveMultiple}, {
      &protobuf_goldo_2fnucleo_2fservos_2eproto::scc_info_ServoPosition.base,}};

static void InitDefaultsCmdSetMaxTorques() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::goldo::nucleo::servos::_CmdSetMaxTorques_default_instance_;
    new (ptr) ::goldo::nucleo::servos::CmdSetMaxTorques();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::goldo::nucleo::servos::CmdSetMaxTorques::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CmdSetMaxTorques =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCmdSetMaxTorques}, {
      &protobuf_goldo_2fnucleo_2fservos_2eproto::scc_info_ServoTorque.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_ServoConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LiftConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ServoState.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ServoStates.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ServoPosition.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ServoTorque.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ServoEnable.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CmdDisableAll.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CmdSetEnable.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CmdLiftDoHoming.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CmdLiftsRaw.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CmdLiftSetEnable.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CmdMoveMultiple.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CmdSetMaxTorques.base);
}

::google::protobuf::Metadata file_level_metadata[14];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::servos::ServoConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::servos::ServoConfig, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::servos::ServoConfig, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::servos::ServoConfig, cw_limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::servos::ServoConfig, ccw_limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::servos::ServoConfig, max_speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::servos::ServoConfig, max_torque_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::servos::ServoConfig, reserved_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::servos::ServoConfig, name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::servos::LiftConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::servos::LiftConfig, kp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::servos::LiftConfig, ki_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::servos::LiftConfig, kd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::servos::LiftConfig, range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::servos::LiftConfig, pwm_clamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::servos::LiftConfig, block_trig_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::servos::ServoState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::servos::ServoState, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::servos::ServoState, measured_position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::servos::ServoState, measured_load_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::servos::ServoStates, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::servos::ServoStates, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::servos::ServoStates, servos_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::servos::ServoPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::servos::ServoPosition, servo_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::servos::ServoPosition, position_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::servos::ServoTorque, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::servos::ServoTorque, servo_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::servos::ServoTorque, torque_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::servos::ServoEnable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::servos::ServoEnable, servo_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::servos::ServoEnable, enable_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::servos::CmdDisableAll, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::servos::CmdDisableAll, sequence_number_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::servos::CmdSetEnable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::servos::CmdSetEnable, sequence_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::servos::CmdSetEnable, enables_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::servos::CmdLiftDoHoming, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::servos::CmdLiftDoHoming, sequence_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::servos::CmdLiftDoHoming, lift_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::servos::CmdLiftsRaw, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::servos::CmdLiftsRaw, sequence_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::servos::CmdLiftsRaw, lift1_target_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::servos::CmdLiftsRaw, lift1_bltrig_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::servos::CmdLiftsRaw, lift1_speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::servos::CmdLiftsRaw, lift2_target_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::servos::CmdLiftsRaw, lift2_bltrig_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::servos::CmdLiftsRaw, lift2_speed_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::servos::CmdLiftSetEnable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::servos::CmdLiftSetEnable, sequence_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::servos::CmdLiftSetEnable, lift_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::servos::CmdLiftSetEnable, enable_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::servos::CmdMoveMultiple, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::servos::CmdMoveMultiple, sequence_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::servos::CmdMoveMultiple, speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::servos::CmdMoveMultiple, positions_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::servos::CmdSetMaxTorques, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::servos::CmdSetMaxTorques, sequence_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::servos::CmdSetMaxTorques, torques_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::goldo::nucleo::servos::ServoConfig)},
  { 13, -1, sizeof(::goldo::nucleo::servos::LiftConfig)},
  { 24, -1, sizeof(::goldo::nucleo::servos::ServoState)},
  { 32, -1, sizeof(::goldo::nucleo::servos::ServoStates)},
  { 39, -1, sizeof(::goldo::nucleo::servos::ServoPosition)},
  { 46, -1, sizeof(::goldo::nucleo::servos::ServoTorque)},
  { 53, -1, sizeof(::goldo::nucleo::servos::ServoEnable)},
  { 60, -1, sizeof(::goldo::nucleo::servos::CmdDisableAll)},
  { 66, -1, sizeof(::goldo::nucleo::servos::CmdSetEnable)},
  { 73, -1, sizeof(::goldo::nucleo::servos::CmdLiftDoHoming)},
  { 80, -1, sizeof(::goldo::nucleo::servos::CmdLiftsRaw)},
  { 92, -1, sizeof(::goldo::nucleo::servos::CmdLiftSetEnable)},
  { 100, -1, sizeof(::goldo::nucleo::servos::CmdMoveMultiple)},
  { 108, -1, sizeof(::goldo::nucleo::servos::CmdSetMaxTorques)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::goldo::nucleo::servos::_ServoConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::goldo::nucleo::servos::_LiftConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::goldo::nucleo::servos::_ServoState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::goldo::nucleo::servos::_ServoStates_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::goldo::nucleo::servos::_ServoPosition_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::goldo::nucleo::servos::_ServoTorque_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::goldo::nucleo::servos::_ServoEnable_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::goldo::nucleo::servos::_CmdDisableAll_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::goldo::nucleo::servos::_CmdSetEnable_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::goldo::nucleo::servos::_CmdLiftDoHoming_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::goldo::nucleo::servos::_CmdLiftsRaw_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::goldo::nucleo::servos::_CmdLiftSetEnable_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::goldo::nucleo::servos::_CmdMoveMultiple_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::goldo::nucleo::servos::_CmdSetMaxTorques_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "goldo/nucleo/servos.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 14);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\031goldo/nucleo/servos.proto\022\023goldo.nucle"
      "o.servos\032\027goldo/pb2_options.proto\"\343\001\n\013Se"
      "rvoConfig\0222\n\004type\030\001 \001(\0162\036.goldo.nucleo.s"
      "ervos.ServoTypeB\004\200\265\030\003\022\020\n\002id\030\002 \001(\005B\004\200\265\030\003\022"
      "\026\n\010cw_limit\030\003 \001(\005B\004\200\265\030\005\022\027\n\tccw_limit\030\004 \001"
      "(\005B\004\200\265\030\005\022\027\n\tmax_speed\030\005 \001(\005B\004\200\265\030\005\022\030\n\nmax"
      "_torque\030\006 \001(\005B\004\200\265\030\005\022\026\n\010reserved\030d \001(\005B\004\200"
      "\265\030\014\022\022\n\004name\030@ \001(\tB\004\200\265\030\014\"\212\001\n\nLiftConfig\022\020"
      "\n\002kp\030\001 \001(\005B\004\200\265\030\007\022\020\n\002ki\030\002 \001(\005B\004\200\265\030\007\022\020\n\002kd"
      "\030\003 \001(\005B\004\200\265\030\007\022\023\n\005range\030\004 \001(\005B\004\200\265\030\005\022\027\n\tpwm"
      "_clamp\030\005 \001(\005B\004\200\265\030\005\022\030\n\nblock_trig\030\006 \001(\005B\004"
      "\200\265\030\005\"b\n\nServoState\022\026\n\010position\030\002 \001(\rB\004\200\265"
      "\030\005\022\037\n\021measured_position\030\003 \001(\rB\004\200\265\030\005\022\033\n\rm"
      "easured_load\030\005 \001(\005B\004\200\265\030\004\"W\n\013ServoStates\022"
      "\027\n\ttimestamp\030\001 \001(\rB\004\200\265\030\007\022/\n\006servos\030\004 \003(\013"
      "2\037.goldo.nucleo.servos.ServoState\"\?\n\rSer"
      "voPosition\022\026\n\010servo_id\030\001 \001(\005B\004\200\265\030\003\022\026\n\010po"
      "sition\030\002 \001(\rB\004\200\265\030\005\";\n\013ServoTorque\022\026\n\010ser"
      "vo_id\030\001 \001(\005B\004\200\265\030\003\022\024\n\006torque\030\002 \001(\rB\004\200\265\030\003\""
      ";\n\013ServoEnable\022\026\n\010servo_id\030\001 \001(\005B\004\200\265\030\003\022\024"
      "\n\006enable\030\002 \001(\010B\004\200\265\030\003\".\n\rCmdDisableAll\022\035\n"
      "\017sequence_number\030\001 \001(\005B\004\200\265\030\005\"`\n\014CmdSetEn"
      "able\022\035\n\017sequence_number\030\001 \001(\005B\004\200\265\030\005\0221\n\007e"
      "nables\030\002 \003(\0132 .goldo.nucleo.servos.Servo"
      "Enable\"G\n\017CmdLiftDoHoming\022\035\n\017sequence_nu"
      "mber\030\001 \001(\005B\004\200\265\030\005\022\025\n\007lift_id\030\002 \001(\005B\004\200\265\030\003\""
      "\322\001\n\013CmdLiftsRaw\022\035\n\017sequence_number\030\001 \001(\005"
      "B\004\200\265\030\005\022\032\n\014lift1_target\030\002 \001(\005B\004\200\265\030\006\022\032\n\014li"
      "ft1_bltrig\030\003 \001(\005B\004\200\265\030\005\022\031\n\013lift1_speed\030\004 "
      "\001(\005B\004\200\265\030\005\022\032\n\014lift2_target\030\005 \001(\005B\004\200\265\030\006\022\032\n"
      "\014lift2_bltrig\030\006 \001(\005B\004\200\265\030\005\022\031\n\013lift2_speed"
      "\030\007 \001(\005B\004\200\265\030\005\"^\n\020CmdLiftSetEnable\022\035\n\017sequ"
      "ence_number\030\001 \001(\005B\004\200\265\030\005\022\025\n\007lift_id\030\002 \001(\005"
      "B\004\200\265\030\003\022\024\n\006enable\030\003 \001(\010B\004\200\265\030\003\"|\n\017CmdMoveM"
      "ultiple\022\035\n\017sequence_number\030\001 \001(\005B\004\200\265\030\005\022\023"
      "\n\005speed\030\002 \001(\005B\004\200\265\030\005\0225\n\tpositions\030\003 \003(\0132\""
      ".goldo.nucleo.servos.ServoPosition\"d\n\020Cm"
      "dSetMaxTorques\022\035\n\017sequence_number\030\001 \001(\005B"
      "\004\200\265\030\005\0221\n\007torques\030\002 \003(\0132 .goldo.nucleo.se"
      "rvos.ServoTorque*^\n\tServoType\022\013\n\007UNKNOWN"
      "\020\000\022\014\n\010STANDARD\020\001\022\022\n\016DYNAMIXEL_AX12\020\002\022\022\n\016"
      "DYNAMIXEL_MX28\020\003\022\016\n\nGOLDO_LIFT\020\004b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1680);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "goldo/nucleo/servos.proto", &protobuf_RegisterTypes);
  ::protobuf_goldo_2fpb2_5foptions_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_goldo_2fnucleo_2fservos_2eproto
namespace goldo {
namespace nucleo {
namespace servos {
const ::google::protobuf::EnumDescriptor* ServoType_descriptor() {
  protobuf_goldo_2fnucleo_2fservos_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_goldo_2fnucleo_2fservos_2eproto::file_level_enum_descriptors[0];
}
bool ServoType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void ServoConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServoConfig::kTypeFieldNumber;
const int ServoConfig::kIdFieldNumber;
const int ServoConfig::kCwLimitFieldNumber;
const int ServoConfig::kCcwLimitFieldNumber;
const int ServoConfig::kMaxSpeedFieldNumber;
const int ServoConfig::kMaxTorqueFieldNumber;
const int ServoConfig::kReservedFieldNumber;
const int ServoConfig::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServoConfig::ServoConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_goldo_2fnucleo_2fservos_2eproto::scc_info_ServoConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:goldo.nucleo.servos.ServoConfig)
}
ServoConfig::ServoConfig(const ServoConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&reserved_) -
    reinterpret_cast<char*>(&type_)) + sizeof(reserved_));
  // @@protoc_insertion_point(copy_constructor:goldo.nucleo.servos.ServoConfig)
}

void ServoConfig::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reserved_) -
      reinterpret_cast<char*>(&type_)) + sizeof(reserved_));
}

ServoConfig::~ServoConfig() {
  // @@protoc_insertion_point(destructor:goldo.nucleo.servos.ServoConfig)
  SharedDtor();
}

void ServoConfig::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ServoConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ServoConfig::descriptor() {
  ::protobuf_goldo_2fnucleo_2fservos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2fnucleo_2fservos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ServoConfig& ServoConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_goldo_2fnucleo_2fservos_2eproto::scc_info_ServoConfig.base);
  return *internal_default_instance();
}


void ServoConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:goldo.nucleo.servos.ServoConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reserved_) -
      reinterpret_cast<char*>(&type_)) + sizeof(reserved_));
  _internal_metadata_.Clear();
}

bool ServoConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:goldo.nucleo.servos.ServoConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .goldo.nucleo.servos.ServoType type = 1 [(.goldo.pb2_options.cpp_type) = UINT8];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::goldo::nucleo::servos::ServoType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 id = 2 [(.goldo.pb2_options.cpp_type) = UINT8];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 cw_limit = 3 [(.goldo.pb2_options.cpp_type) = UINT16];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cw_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ccw_limit = 4 [(.goldo.pb2_options.cpp_type) = UINT16];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ccw_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 max_speed = 5 [(.goldo.pb2_options.cpp_type) = UINT16];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 max_torque = 6 [(.goldo.pb2_options.cpp_type) = UINT16];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_torque_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 64 [(.goldo.pb2_options.cpp_type) = VOID];
      case 64: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(2u /* 514 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "goldo.nucleo.servos.ServoConfig.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 reserved = 100 [(.goldo.pb2_options.cpp_type) = VOID];
      case 100: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 800 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reserved_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:goldo.nucleo.servos.ServoConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:goldo.nucleo.servos.ServoConfig)
  return false;
#undef DO_
}

void ServoConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:goldo.nucleo.servos.ServoConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .goldo.nucleo.servos.ServoType type = 1 [(.goldo.pb2_options.cpp_type) = UINT8];
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // int32 id = 2 [(.goldo.pb2_options.cpp_type) = UINT8];
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // int32 cw_limit = 3 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->cw_limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cw_limit(), output);
  }

  // int32 ccw_limit = 4 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->ccw_limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ccw_limit(), output);
  }

  // int32 max_speed = 5 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->max_speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->max_speed(), output);
  }

  // int32 max_torque = 6 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->max_torque() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->max_torque(), output);
  }

  // string name = 64 [(.goldo.pb2_options.cpp_type) = VOID];
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "goldo.nucleo.servos.ServoConfig.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      64, this->name(), output);
  }

  // int32 reserved = 100 [(.goldo.pb2_options.cpp_type) = VOID];
  if (this->reserved() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(100, this->reserved(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:goldo.nucleo.servos.ServoConfig)
}

::google::protobuf::uint8* ServoConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:goldo.nucleo.servos.ServoConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .goldo.nucleo.servos.ServoType type = 1 [(.goldo.pb2_options.cpp_type) = UINT8];
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // int32 id = 2 [(.goldo.pb2_options.cpp_type) = UINT8];
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // int32 cw_limit = 3 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->cw_limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cw_limit(), target);
  }

  // int32 ccw_limit = 4 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->ccw_limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ccw_limit(), target);
  }

  // int32 max_speed = 5 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->max_speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->max_speed(), target);
  }

  // int32 max_torque = 6 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->max_torque() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->max_torque(), target);
  }

  // string name = 64 [(.goldo.pb2_options.cpp_type) = VOID];
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "goldo.nucleo.servos.ServoConfig.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        64, this->name(), target);
  }

  // int32 reserved = 100 [(.goldo.pb2_options.cpp_type) = VOID];
  if (this->reserved() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(100, this->reserved(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:goldo.nucleo.servos.ServoConfig)
  return target;
}

size_t ServoConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:goldo.nucleo.servos.ServoConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 64 [(.goldo.pb2_options.cpp_type) = VOID];
  if (this->name().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .goldo.nucleo.servos.ServoType type = 1 [(.goldo.pb2_options.cpp_type) = UINT8];
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // int32 id = 2 [(.goldo.pb2_options.cpp_type) = UINT8];
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // int32 cw_limit = 3 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->cw_limit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cw_limit());
  }

  // int32 ccw_limit = 4 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->ccw_limit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ccw_limit());
  }

  // int32 max_speed = 5 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->max_speed() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_speed());
  }

  // int32 max_torque = 6 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->max_torque() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_torque());
  }

  // int32 reserved = 100 [(.goldo.pb2_options.cpp_type) = VOID];
  if (this->reserved() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->reserved());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServoConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:goldo.nucleo.servos.ServoConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ServoConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServoConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:goldo.nucleo.servos.ServoConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:goldo.nucleo.servos.ServoConfig)
    MergeFrom(*source);
  }
}

void ServoConfig::MergeFrom(const ServoConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:goldo.nucleo.servos.ServoConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.cw_limit() != 0) {
    set_cw_limit(from.cw_limit());
  }
  if (from.ccw_limit() != 0) {
    set_ccw_limit(from.ccw_limit());
  }
  if (from.max_speed() != 0) {
    set_max_speed(from.max_speed());
  }
  if (from.max_torque() != 0) {
    set_max_torque(from.max_torque());
  }
  if (from.reserved() != 0) {
    set_reserved(from.reserved());
  }
}

void ServoConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:goldo.nucleo.servos.ServoConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServoConfig::CopyFrom(const ServoConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:goldo.nucleo.servos.ServoConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServoConfig::IsInitialized() const {
  return true;
}

void ServoConfig::Swap(ServoConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServoConfig::InternalSwap(ServoConfig* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
  swap(id_, other->id_);
  swap(cw_limit_, other->cw_limit_);
  swap(ccw_limit_, other->ccw_limit_);
  swap(max_speed_, other->max_speed_);
  swap(max_torque_, other->max_torque_);
  swap(reserved_, other->reserved_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ServoConfig::GetMetadata() const {
  protobuf_goldo_2fnucleo_2fservos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2fnucleo_2fservos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LiftConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LiftConfig::kKpFieldNumber;
const int LiftConfig::kKiFieldNumber;
const int LiftConfig::kKdFieldNumber;
const int LiftConfig::kRangeFieldNumber;
const int LiftConfig::kPwmClampFieldNumber;
const int LiftConfig::kBlockTrigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LiftConfig::LiftConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_goldo_2fnucleo_2fservos_2eproto::scc_info_LiftConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:goldo.nucleo.servos.LiftConfig)
}
LiftConfig::LiftConfig(const LiftConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&kp_, &from.kp_,
    static_cast<size_t>(reinterpret_cast<char*>(&block_trig_) -
    reinterpret_cast<char*>(&kp_)) + sizeof(block_trig_));
  // @@protoc_insertion_point(copy_constructor:goldo.nucleo.servos.LiftConfig)
}

void LiftConfig::SharedCtor() {
  ::memset(&kp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&block_trig_) -
      reinterpret_cast<char*>(&kp_)) + sizeof(block_trig_));
}

LiftConfig::~LiftConfig() {
  // @@protoc_insertion_point(destructor:goldo.nucleo.servos.LiftConfig)
  SharedDtor();
}

void LiftConfig::SharedDtor() {
}

void LiftConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LiftConfig::descriptor() {
  ::protobuf_goldo_2fnucleo_2fservos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2fnucleo_2fservos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LiftConfig& LiftConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_goldo_2fnucleo_2fservos_2eproto::scc_info_LiftConfig.base);
  return *internal_default_instance();
}


void LiftConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:goldo.nucleo.servos.LiftConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&kp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&block_trig_) -
      reinterpret_cast<char*>(&kp_)) + sizeof(block_trig_));
  _internal_metadata_.Clear();
}

bool LiftConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:goldo.nucleo.servos.LiftConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 kp = 1 [(.goldo.pb2_options.cpp_type) = UINT32];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ki = 2 [(.goldo.pb2_options.cpp_type) = UINT32];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ki_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 kd = 3 [(.goldo.pb2_options.cpp_type) = UINT32];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 range = 4 [(.goldo.pb2_options.cpp_type) = UINT16];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &range_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 pwm_clamp = 5 [(.goldo.pb2_options.cpp_type) = UINT16];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pwm_clamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 block_trig = 6 [(.goldo.pb2_options.cpp_type) = UINT16];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &block_trig_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:goldo.nucleo.servos.LiftConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:goldo.nucleo.servos.LiftConfig)
  return false;
#undef DO_
}

void LiftConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:goldo.nucleo.servos.LiftConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 kp = 1 [(.goldo.pb2_options.cpp_type) = UINT32];
  if (this->kp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->kp(), output);
  }

  // int32 ki = 2 [(.goldo.pb2_options.cpp_type) = UINT32];
  if (this->ki() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ki(), output);
  }

  // int32 kd = 3 [(.goldo.pb2_options.cpp_type) = UINT32];
  if (this->kd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->kd(), output);
  }

  // int32 range = 4 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->range() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->range(), output);
  }

  // int32 pwm_clamp = 5 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->pwm_clamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->pwm_clamp(), output);
  }

  // int32 block_trig = 6 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->block_trig() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->block_trig(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:goldo.nucleo.servos.LiftConfig)
}

::google::protobuf::uint8* LiftConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:goldo.nucleo.servos.LiftConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 kp = 1 [(.goldo.pb2_options.cpp_type) = UINT32];
  if (this->kp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->kp(), target);
  }

  // int32 ki = 2 [(.goldo.pb2_options.cpp_type) = UINT32];
  if (this->ki() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ki(), target);
  }

  // int32 kd = 3 [(.goldo.pb2_options.cpp_type) = UINT32];
  if (this->kd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->kd(), target);
  }

  // int32 range = 4 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->range() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->range(), target);
  }

  // int32 pwm_clamp = 5 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->pwm_clamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->pwm_clamp(), target);
  }

  // int32 block_trig = 6 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->block_trig() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->block_trig(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:goldo.nucleo.servos.LiftConfig)
  return target;
}

size_t LiftConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:goldo.nucleo.servos.LiftConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 kp = 1 [(.goldo.pb2_options.cpp_type) = UINT32];
  if (this->kp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->kp());
  }

  // int32 ki = 2 [(.goldo.pb2_options.cpp_type) = UINT32];
  if (this->ki() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ki());
  }

  // int32 kd = 3 [(.goldo.pb2_options.cpp_type) = UINT32];
  if (this->kd() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->kd());
  }

  // int32 range = 4 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->range() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->range());
  }

  // int32 pwm_clamp = 5 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->pwm_clamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pwm_clamp());
  }

  // int32 block_trig = 6 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->block_trig() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->block_trig());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LiftConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:goldo.nucleo.servos.LiftConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const LiftConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LiftConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:goldo.nucleo.servos.LiftConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:goldo.nucleo.servos.LiftConfig)
    MergeFrom(*source);
  }
}

void LiftConfig::MergeFrom(const LiftConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:goldo.nucleo.servos.LiftConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.kp() != 0) {
    set_kp(from.kp());
  }
  if (from.ki() != 0) {
    set_ki(from.ki());
  }
  if (from.kd() != 0) {
    set_kd(from.kd());
  }
  if (from.range() != 0) {
    set_range(from.range());
  }
  if (from.pwm_clamp() != 0) {
    set_pwm_clamp(from.pwm_clamp());
  }
  if (from.block_trig() != 0) {
    set_block_trig(from.block_trig());
  }
}

void LiftConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:goldo.nucleo.servos.LiftConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LiftConfig::CopyFrom(const LiftConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:goldo.nucleo.servos.LiftConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LiftConfig::IsInitialized() const {
  return true;
}

void LiftConfig::Swap(LiftConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LiftConfig::InternalSwap(LiftConfig* other) {
  using std::swap;
  swap(kp_, other->kp_);
  swap(ki_, other->ki_);
  swap(kd_, other->kd_);
  swap(range_, other->range_);
  swap(pwm_clamp_, other->pwm_clamp_);
  swap(block_trig_, other->block_trig_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LiftConfig::GetMetadata() const {
  protobuf_goldo_2fnucleo_2fservos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2fnucleo_2fservos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ServoState::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServoState::kPositionFieldNumber;
const int ServoState::kMeasuredPositionFieldNumber;
const int ServoState::kMeasuredLoadFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServoState::ServoState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_goldo_2fnucleo_2fservos_2eproto::scc_info_ServoState.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:goldo.nucleo.servos.ServoState)
}
ServoState::ServoState(const ServoState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&position_, &from.position_,
    static_cast<size_t>(reinterpret_cast<char*>(&measured_load_) -
    reinterpret_cast<char*>(&position_)) + sizeof(measured_load_));
  // @@protoc_insertion_point(copy_constructor:goldo.nucleo.servos.ServoState)
}

void ServoState::SharedCtor() {
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&measured_load_) -
      reinterpret_cast<char*>(&position_)) + sizeof(measured_load_));
}

ServoState::~ServoState() {
  // @@protoc_insertion_point(destructor:goldo.nucleo.servos.ServoState)
  SharedDtor();
}

void ServoState::SharedDtor() {
}

void ServoState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ServoState::descriptor() {
  ::protobuf_goldo_2fnucleo_2fservos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2fnucleo_2fservos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ServoState& ServoState::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_goldo_2fnucleo_2fservos_2eproto::scc_info_ServoState.base);
  return *internal_default_instance();
}


void ServoState::Clear() {
// @@protoc_insertion_point(message_clear_start:goldo.nucleo.servos.ServoState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&measured_load_) -
      reinterpret_cast<char*>(&position_)) + sizeof(measured_load_));
  _internal_metadata_.Clear();
}

bool ServoState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:goldo.nucleo.servos.ServoState)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 position = 2 [(.goldo.pb2_options.cpp_type) = UINT16];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 measured_position = 3 [(.goldo.pb2_options.cpp_type) = UINT16];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &measured_position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 measured_load = 5 [(.goldo.pb2_options.cpp_type) = INT16];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &measured_load_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:goldo.nucleo.servos.ServoState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:goldo.nucleo.servos.ServoState)
  return false;
#undef DO_
}

void ServoState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:goldo.nucleo.servos.ServoState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 position = 2 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->position() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->position(), output);
  }

  // uint32 measured_position = 3 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->measured_position() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->measured_position(), output);
  }

  // int32 measured_load = 5 [(.goldo.pb2_options.cpp_type) = INT16];
  if (this->measured_load() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->measured_load(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:goldo.nucleo.servos.ServoState)
}

::google::protobuf::uint8* ServoState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:goldo.nucleo.servos.ServoState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 position = 2 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->position() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->position(), target);
  }

  // uint32 measured_position = 3 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->measured_position() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->measured_position(), target);
  }

  // int32 measured_load = 5 [(.goldo.pb2_options.cpp_type) = INT16];
  if (this->measured_load() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->measured_load(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:goldo.nucleo.servos.ServoState)
  return target;
}

size_t ServoState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:goldo.nucleo.servos.ServoState)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 position = 2 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->position() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->position());
  }

  // uint32 measured_position = 3 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->measured_position() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->measured_position());
  }

  // int32 measured_load = 5 [(.goldo.pb2_options.cpp_type) = INT16];
  if (this->measured_load() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->measured_load());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServoState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:goldo.nucleo.servos.ServoState)
  GOOGLE_DCHECK_NE(&from, this);
  const ServoState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServoState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:goldo.nucleo.servos.ServoState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:goldo.nucleo.servos.ServoState)
    MergeFrom(*source);
  }
}

void ServoState::MergeFrom(const ServoState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:goldo.nucleo.servos.ServoState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.position() != 0) {
    set_position(from.position());
  }
  if (from.measured_position() != 0) {
    set_measured_position(from.measured_position());
  }
  if (from.measured_load() != 0) {
    set_measured_load(from.measured_load());
  }
}

void ServoState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:goldo.nucleo.servos.ServoState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServoState::CopyFrom(const ServoState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:goldo.nucleo.servos.ServoState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServoState::IsInitialized() const {
  return true;
}

void ServoState::Swap(ServoState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServoState::InternalSwap(ServoState* other) {
  using std::swap;
  swap(position_, other->position_);
  swap(measured_position_, other->measured_position_);
  swap(measured_load_, other->measured_load_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ServoState::GetMetadata() const {
  protobuf_goldo_2fnucleo_2fservos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2fnucleo_2fservos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ServoStates::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServoStates::kTimestampFieldNumber;
const int ServoStates::kServosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServoStates::ServoStates()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_goldo_2fnucleo_2fservos_2eproto::scc_info_ServoStates.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:goldo.nucleo.servos.ServoStates)
}
ServoStates::ServoStates(const ServoStates& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      servos_(from.servos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:goldo.nucleo.servos.ServoStates)
}

void ServoStates::SharedCtor() {
  timestamp_ = 0u;
}

ServoStates::~ServoStates() {
  // @@protoc_insertion_point(destructor:goldo.nucleo.servos.ServoStates)
  SharedDtor();
}

void ServoStates::SharedDtor() {
}

void ServoStates::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ServoStates::descriptor() {
  ::protobuf_goldo_2fnucleo_2fservos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2fnucleo_2fservos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ServoStates& ServoStates::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_goldo_2fnucleo_2fservos_2eproto::scc_info_ServoStates.base);
  return *internal_default_instance();
}


void ServoStates::Clear() {
// @@protoc_insertion_point(message_clear_start:goldo.nucleo.servos.ServoStates)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  servos_.Clear();
  timestamp_ = 0u;
  _internal_metadata_.Clear();
}

bool ServoStates::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:goldo.nucleo.servos.ServoStates)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 timestamp = 1 [(.goldo.pb2_options.cpp_type) = UINT32];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .goldo.nucleo.servos.ServoState servos = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_servos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:goldo.nucleo.servos.ServoStates)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:goldo.nucleo.servos.ServoStates)
  return false;
#undef DO_
}

void ServoStates::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:goldo.nucleo.servos.ServoStates)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 timestamp = 1 [(.goldo.pb2_options.cpp_type) = UINT32];
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->timestamp(), output);
  }

  // repeated .goldo.nucleo.servos.ServoState servos = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->servos_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->servos(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:goldo.nucleo.servos.ServoStates)
}

::google::protobuf::uint8* ServoStates::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:goldo.nucleo.servos.ServoStates)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 timestamp = 1 [(.goldo.pb2_options.cpp_type) = UINT32];
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->timestamp(), target);
  }

  // repeated .goldo.nucleo.servos.ServoState servos = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->servos_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->servos(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:goldo.nucleo.servos.ServoStates)
  return target;
}

size_t ServoStates::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:goldo.nucleo.servos.ServoStates)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .goldo.nucleo.servos.ServoState servos = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->servos_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->servos(static_cast<int>(i)));
    }
  }

  // uint32 timestamp = 1 [(.goldo.pb2_options.cpp_type) = UINT32];
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServoStates::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:goldo.nucleo.servos.ServoStates)
  GOOGLE_DCHECK_NE(&from, this);
  const ServoStates* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServoStates>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:goldo.nucleo.servos.ServoStates)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:goldo.nucleo.servos.ServoStates)
    MergeFrom(*source);
  }
}

void ServoStates::MergeFrom(const ServoStates& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:goldo.nucleo.servos.ServoStates)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  servos_.MergeFrom(from.servos_);
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
}

void ServoStates::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:goldo.nucleo.servos.ServoStates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServoStates::CopyFrom(const ServoStates& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:goldo.nucleo.servos.ServoStates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServoStates::IsInitialized() const {
  return true;
}

void ServoStates::Swap(ServoStates* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServoStates::InternalSwap(ServoStates* other) {
  using std::swap;
  CastToBase(&servos_)->InternalSwap(CastToBase(&other->servos_));
  swap(timestamp_, other->timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ServoStates::GetMetadata() const {
  protobuf_goldo_2fnucleo_2fservos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2fnucleo_2fservos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ServoPosition::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServoPosition::kServoIdFieldNumber;
const int ServoPosition::kPositionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServoPosition::ServoPosition()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_goldo_2fnucleo_2fservos_2eproto::scc_info_ServoPosition.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:goldo.nucleo.servos.ServoPosition)
}
ServoPosition::ServoPosition(const ServoPosition& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&servo_id_, &from.servo_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&position_) -
    reinterpret_cast<char*>(&servo_id_)) + sizeof(position_));
  // @@protoc_insertion_point(copy_constructor:goldo.nucleo.servos.ServoPosition)
}

void ServoPosition::SharedCtor() {
  ::memset(&servo_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&position_) -
      reinterpret_cast<char*>(&servo_id_)) + sizeof(position_));
}

ServoPosition::~ServoPosition() {
  // @@protoc_insertion_point(destructor:goldo.nucleo.servos.ServoPosition)
  SharedDtor();
}

void ServoPosition::SharedDtor() {
}

void ServoPosition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ServoPosition::descriptor() {
  ::protobuf_goldo_2fnucleo_2fservos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2fnucleo_2fservos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ServoPosition& ServoPosition::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_goldo_2fnucleo_2fservos_2eproto::scc_info_ServoPosition.base);
  return *internal_default_instance();
}


void ServoPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:goldo.nucleo.servos.ServoPosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&servo_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&position_) -
      reinterpret_cast<char*>(&servo_id_)) + sizeof(position_));
  _internal_metadata_.Clear();
}

bool ServoPosition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:goldo.nucleo.servos.ServoPosition)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 servo_id = 1 [(.goldo.pb2_options.cpp_type) = UINT8];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &servo_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 position = 2 [(.goldo.pb2_options.cpp_type) = UINT16];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:goldo.nucleo.servos.ServoPosition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:goldo.nucleo.servos.ServoPosition)
  return false;
#undef DO_
}

void ServoPosition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:goldo.nucleo.servos.ServoPosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 servo_id = 1 [(.goldo.pb2_options.cpp_type) = UINT8];
  if (this->servo_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->servo_id(), output);
  }

  // uint32 position = 2 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->position() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->position(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:goldo.nucleo.servos.ServoPosition)
}

::google::protobuf::uint8* ServoPosition::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:goldo.nucleo.servos.ServoPosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 servo_id = 1 [(.goldo.pb2_options.cpp_type) = UINT8];
  if (this->servo_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->servo_id(), target);
  }

  // uint32 position = 2 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->position() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->position(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:goldo.nucleo.servos.ServoPosition)
  return target;
}

size_t ServoPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:goldo.nucleo.servos.ServoPosition)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 servo_id = 1 [(.goldo.pb2_options.cpp_type) = UINT8];
  if (this->servo_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->servo_id());
  }

  // uint32 position = 2 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->position() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->position());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServoPosition::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:goldo.nucleo.servos.ServoPosition)
  GOOGLE_DCHECK_NE(&from, this);
  const ServoPosition* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServoPosition>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:goldo.nucleo.servos.ServoPosition)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:goldo.nucleo.servos.ServoPosition)
    MergeFrom(*source);
  }
}

void ServoPosition::MergeFrom(const ServoPosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:goldo.nucleo.servos.ServoPosition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.servo_id() != 0) {
    set_servo_id(from.servo_id());
  }
  if (from.position() != 0) {
    set_position(from.position());
  }
}

void ServoPosition::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:goldo.nucleo.servos.ServoPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServoPosition::CopyFrom(const ServoPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:goldo.nucleo.servos.ServoPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServoPosition::IsInitialized() const {
  return true;
}

void ServoPosition::Swap(ServoPosition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServoPosition::InternalSwap(ServoPosition* other) {
  using std::swap;
  swap(servo_id_, other->servo_id_);
  swap(position_, other->position_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ServoPosition::GetMetadata() const {
  protobuf_goldo_2fnucleo_2fservos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2fnucleo_2fservos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ServoTorque::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServoTorque::kServoIdFieldNumber;
const int ServoTorque::kTorqueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServoTorque::ServoTorque()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_goldo_2fnucleo_2fservos_2eproto::scc_info_ServoTorque.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:goldo.nucleo.servos.ServoTorque)
}
ServoTorque::ServoTorque(const ServoTorque& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&servo_id_, &from.servo_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&torque_) -
    reinterpret_cast<char*>(&servo_id_)) + sizeof(torque_));
  // @@protoc_insertion_point(copy_constructor:goldo.nucleo.servos.ServoTorque)
}

void ServoTorque::SharedCtor() {
  ::memset(&servo_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&torque_) -
      reinterpret_cast<char*>(&servo_id_)) + sizeof(torque_));
}

ServoTorque::~ServoTorque() {
  // @@protoc_insertion_point(destructor:goldo.nucleo.servos.ServoTorque)
  SharedDtor();
}

void ServoTorque::SharedDtor() {
}

void ServoTorque::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ServoTorque::descriptor() {
  ::protobuf_goldo_2fnucleo_2fservos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2fnucleo_2fservos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ServoTorque& ServoTorque::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_goldo_2fnucleo_2fservos_2eproto::scc_info_ServoTorque.base);
  return *internal_default_instance();
}


void ServoTorque::Clear() {
// @@protoc_insertion_point(message_clear_start:goldo.nucleo.servos.ServoTorque)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&servo_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&torque_) -
      reinterpret_cast<char*>(&servo_id_)) + sizeof(torque_));
  _internal_metadata_.Clear();
}

bool ServoTorque::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:goldo.nucleo.servos.ServoTorque)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 servo_id = 1 [(.goldo.pb2_options.cpp_type) = UINT8];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &servo_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 torque = 2 [(.goldo.pb2_options.cpp_type) = UINT8];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &torque_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:goldo.nucleo.servos.ServoTorque)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:goldo.nucleo.servos.ServoTorque)
  return false;
#undef DO_
}

void ServoTorque::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:goldo.nucleo.servos.ServoTorque)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 servo_id = 1 [(.goldo.pb2_options.cpp_type) = UINT8];
  if (this->servo_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->servo_id(), output);
  }

  // uint32 torque = 2 [(.goldo.pb2_options.cpp_type) = UINT8];
  if (this->torque() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->torque(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:goldo.nucleo.servos.ServoTorque)
}

::google::protobuf::uint8* ServoTorque::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:goldo.nucleo.servos.ServoTorque)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 servo_id = 1 [(.goldo.pb2_options.cpp_type) = UINT8];
  if (this->servo_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->servo_id(), target);
  }

  // uint32 torque = 2 [(.goldo.pb2_options.cpp_type) = UINT8];
  if (this->torque() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->torque(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:goldo.nucleo.servos.ServoTorque)
  return target;
}

size_t ServoTorque::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:goldo.nucleo.servos.ServoTorque)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 servo_id = 1 [(.goldo.pb2_options.cpp_type) = UINT8];
  if (this->servo_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->servo_id());
  }

  // uint32 torque = 2 [(.goldo.pb2_options.cpp_type) = UINT8];
  if (this->torque() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->torque());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServoTorque::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:goldo.nucleo.servos.ServoTorque)
  GOOGLE_DCHECK_NE(&from, this);
  const ServoTorque* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServoTorque>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:goldo.nucleo.servos.ServoTorque)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:goldo.nucleo.servos.ServoTorque)
    MergeFrom(*source);
  }
}

void ServoTorque::MergeFrom(const ServoTorque& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:goldo.nucleo.servos.ServoTorque)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.servo_id() != 0) {
    set_servo_id(from.servo_id());
  }
  if (from.torque() != 0) {
    set_torque(from.torque());
  }
}

void ServoTorque::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:goldo.nucleo.servos.ServoTorque)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServoTorque::CopyFrom(const ServoTorque& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:goldo.nucleo.servos.ServoTorque)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServoTorque::IsInitialized() const {
  return true;
}

void ServoTorque::Swap(ServoTorque* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServoTorque::InternalSwap(ServoTorque* other) {
  using std::swap;
  swap(servo_id_, other->servo_id_);
  swap(torque_, other->torque_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ServoTorque::GetMetadata() const {
  protobuf_goldo_2fnucleo_2fservos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2fnucleo_2fservos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ServoEnable::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServoEnable::kServoIdFieldNumber;
const int ServoEnable::kEnableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServoEnable::ServoEnable()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_goldo_2fnucleo_2fservos_2eproto::scc_info_ServoEnable.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:goldo.nucleo.servos.ServoEnable)
}
ServoEnable::ServoEnable(const ServoEnable& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&servo_id_, &from.servo_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&enable_) -
    reinterpret_cast<char*>(&servo_id_)) + sizeof(enable_));
  // @@protoc_insertion_point(copy_constructor:goldo.nucleo.servos.ServoEnable)
}

void ServoEnable::SharedCtor() {
  ::memset(&servo_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enable_) -
      reinterpret_cast<char*>(&servo_id_)) + sizeof(enable_));
}

ServoEnable::~ServoEnable() {
  // @@protoc_insertion_point(destructor:goldo.nucleo.servos.ServoEnable)
  SharedDtor();
}

void ServoEnable::SharedDtor() {
}

void ServoEnable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ServoEnable::descriptor() {
  ::protobuf_goldo_2fnucleo_2fservos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2fnucleo_2fservos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ServoEnable& ServoEnable::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_goldo_2fnucleo_2fservos_2eproto::scc_info_ServoEnable.base);
  return *internal_default_instance();
}


void ServoEnable::Clear() {
// @@protoc_insertion_point(message_clear_start:goldo.nucleo.servos.ServoEnable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&servo_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enable_) -
      reinterpret_cast<char*>(&servo_id_)) + sizeof(enable_));
  _internal_metadata_.Clear();
}

bool ServoEnable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:goldo.nucleo.servos.ServoEnable)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 servo_id = 1 [(.goldo.pb2_options.cpp_type) = UINT8];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &servo_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool enable = 2 [(.goldo.pb2_options.cpp_type) = UINT8];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:goldo.nucleo.servos.ServoEnable)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:goldo.nucleo.servos.ServoEnable)
  return false;
#undef DO_
}

void ServoEnable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:goldo.nucleo.servos.ServoEnable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 servo_id = 1 [(.goldo.pb2_options.cpp_type) = UINT8];
  if (this->servo_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->servo_id(), output);
  }

  // bool enable = 2 [(.goldo.pb2_options.cpp_type) = UINT8];
  if (this->enable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->enable(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:goldo.nucleo.servos.ServoEnable)
}

::google::protobuf::uint8* ServoEnable::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:goldo.nucleo.servos.ServoEnable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 servo_id = 1 [(.goldo.pb2_options.cpp_type) = UINT8];
  if (this->servo_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->servo_id(), target);
  }

  // bool enable = 2 [(.goldo.pb2_options.cpp_type) = UINT8];
  if (this->enable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->enable(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:goldo.nucleo.servos.ServoEnable)
  return target;
}

size_t ServoEnable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:goldo.nucleo.servos.ServoEnable)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 servo_id = 1 [(.goldo.pb2_options.cpp_type) = UINT8];
  if (this->servo_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->servo_id());
  }

  // bool enable = 2 [(.goldo.pb2_options.cpp_type) = UINT8];
  if (this->enable() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServoEnable::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:goldo.nucleo.servos.ServoEnable)
  GOOGLE_DCHECK_NE(&from, this);
  const ServoEnable* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServoEnable>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:goldo.nucleo.servos.ServoEnable)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:goldo.nucleo.servos.ServoEnable)
    MergeFrom(*source);
  }
}

void ServoEnable::MergeFrom(const ServoEnable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:goldo.nucleo.servos.ServoEnable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.servo_id() != 0) {
    set_servo_id(from.servo_id());
  }
  if (from.enable() != 0) {
    set_enable(from.enable());
  }
}

void ServoEnable::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:goldo.nucleo.servos.ServoEnable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServoEnable::CopyFrom(const ServoEnable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:goldo.nucleo.servos.ServoEnable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServoEnable::IsInitialized() const {
  return true;
}

void ServoEnable::Swap(ServoEnable* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServoEnable::InternalSwap(ServoEnable* other) {
  using std::swap;
  swap(servo_id_, other->servo_id_);
  swap(enable_, other->enable_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ServoEnable::GetMetadata() const {
  protobuf_goldo_2fnucleo_2fservos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2fnucleo_2fservos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CmdDisableAll::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CmdDisableAll::kSequenceNumberFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CmdDisableAll::CmdDisableAll()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_goldo_2fnucleo_2fservos_2eproto::scc_info_CmdDisableAll.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:goldo.nucleo.servos.CmdDisableAll)
}
CmdDisableAll::CmdDisableAll(const CmdDisableAll& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sequence_number_ = from.sequence_number_;
  // @@protoc_insertion_point(copy_constructor:goldo.nucleo.servos.CmdDisableAll)
}

void CmdDisableAll::SharedCtor() {
  sequence_number_ = 0;
}

CmdDisableAll::~CmdDisableAll() {
  // @@protoc_insertion_point(destructor:goldo.nucleo.servos.CmdDisableAll)
  SharedDtor();
}

void CmdDisableAll::SharedDtor() {
}

void CmdDisableAll::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CmdDisableAll::descriptor() {
  ::protobuf_goldo_2fnucleo_2fservos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2fnucleo_2fservos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CmdDisableAll& CmdDisableAll::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_goldo_2fnucleo_2fservos_2eproto::scc_info_CmdDisableAll.base);
  return *internal_default_instance();
}


void CmdDisableAll::Clear() {
// @@protoc_insertion_point(message_clear_start:goldo.nucleo.servos.CmdDisableAll)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sequence_number_ = 0;
  _internal_metadata_.Clear();
}

bool CmdDisableAll::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:goldo.nucleo.servos.CmdDisableAll)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 sequence_number = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sequence_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:goldo.nucleo.servos.CmdDisableAll)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:goldo.nucleo.servos.CmdDisableAll)
  return false;
#undef DO_
}

void CmdDisableAll::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:goldo.nucleo.servos.CmdDisableAll)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sequence_number = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->sequence_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sequence_number(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:goldo.nucleo.servos.CmdDisableAll)
}

::google::protobuf::uint8* CmdDisableAll::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:goldo.nucleo.servos.CmdDisableAll)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sequence_number = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->sequence_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sequence_number(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:goldo.nucleo.servos.CmdDisableAll)
  return target;
}

size_t CmdDisableAll::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:goldo.nucleo.servos.CmdDisableAll)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 sequence_number = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->sequence_number() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sequence_number());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CmdDisableAll::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:goldo.nucleo.servos.CmdDisableAll)
  GOOGLE_DCHECK_NE(&from, this);
  const CmdDisableAll* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CmdDisableAll>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:goldo.nucleo.servos.CmdDisableAll)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:goldo.nucleo.servos.CmdDisableAll)
    MergeFrom(*source);
  }
}

void CmdDisableAll::MergeFrom(const CmdDisableAll& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:goldo.nucleo.servos.CmdDisableAll)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sequence_number() != 0) {
    set_sequence_number(from.sequence_number());
  }
}

void CmdDisableAll::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:goldo.nucleo.servos.CmdDisableAll)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdDisableAll::CopyFrom(const CmdDisableAll& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:goldo.nucleo.servos.CmdDisableAll)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdDisableAll::IsInitialized() const {
  return true;
}

void CmdDisableAll::Swap(CmdDisableAll* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CmdDisableAll::InternalSwap(CmdDisableAll* other) {
  using std::swap;
  swap(sequence_number_, other->sequence_number_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CmdDisableAll::GetMetadata() const {
  protobuf_goldo_2fnucleo_2fservos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2fnucleo_2fservos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CmdSetEnable::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CmdSetEnable::kSequenceNumberFieldNumber;
const int CmdSetEnable::kEnablesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CmdSetEnable::CmdSetEnable()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_goldo_2fnucleo_2fservos_2eproto::scc_info_CmdSetEnable.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:goldo.nucleo.servos.CmdSetEnable)
}
CmdSetEnable::CmdSetEnable(const CmdSetEnable& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      enables_(from.enables_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sequence_number_ = from.sequence_number_;
  // @@protoc_insertion_point(copy_constructor:goldo.nucleo.servos.CmdSetEnable)
}

void CmdSetEnable::SharedCtor() {
  sequence_number_ = 0;
}

CmdSetEnable::~CmdSetEnable() {
  // @@protoc_insertion_point(destructor:goldo.nucleo.servos.CmdSetEnable)
  SharedDtor();
}

void CmdSetEnable::SharedDtor() {
}

void CmdSetEnable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CmdSetEnable::descriptor() {
  ::protobuf_goldo_2fnucleo_2fservos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2fnucleo_2fservos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CmdSetEnable& CmdSetEnable::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_goldo_2fnucleo_2fservos_2eproto::scc_info_CmdSetEnable.base);
  return *internal_default_instance();
}


void CmdSetEnable::Clear() {
// @@protoc_insertion_point(message_clear_start:goldo.nucleo.servos.CmdSetEnable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  enables_.Clear();
  sequence_number_ = 0;
  _internal_metadata_.Clear();
}

bool CmdSetEnable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:goldo.nucleo.servos.CmdSetEnable)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 sequence_number = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sequence_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .goldo.nucleo.servos.ServoEnable enables = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_enables()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:goldo.nucleo.servos.CmdSetEnable)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:goldo.nucleo.servos.CmdSetEnable)
  return false;
#undef DO_
}

void CmdSetEnable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:goldo.nucleo.servos.CmdSetEnable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sequence_number = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->sequence_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sequence_number(), output);
  }

  // repeated .goldo.nucleo.servos.ServoEnable enables = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->enables_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->enables(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:goldo.nucleo.servos.CmdSetEnable)
}

::google::protobuf::uint8* CmdSetEnable::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:goldo.nucleo.servos.CmdSetEnable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sequence_number = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->sequence_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sequence_number(), target);
  }

  // repeated .goldo.nucleo.servos.ServoEnable enables = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->enables_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->enables(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:goldo.nucleo.servos.CmdSetEnable)
  return target;
}

size_t CmdSetEnable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:goldo.nucleo.servos.CmdSetEnable)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .goldo.nucleo.servos.ServoEnable enables = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->enables_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->enables(static_cast<int>(i)));
    }
  }

  // int32 sequence_number = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->sequence_number() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sequence_number());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CmdSetEnable::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:goldo.nucleo.servos.CmdSetEnable)
  GOOGLE_DCHECK_NE(&from, this);
  const CmdSetEnable* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CmdSetEnable>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:goldo.nucleo.servos.CmdSetEnable)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:goldo.nucleo.servos.CmdSetEnable)
    MergeFrom(*source);
  }
}

void CmdSetEnable::MergeFrom(const CmdSetEnable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:goldo.nucleo.servos.CmdSetEnable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  enables_.MergeFrom(from.enables_);
  if (from.sequence_number() != 0) {
    set_sequence_number(from.sequence_number());
  }
}

void CmdSetEnable::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:goldo.nucleo.servos.CmdSetEnable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdSetEnable::CopyFrom(const CmdSetEnable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:goldo.nucleo.servos.CmdSetEnable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdSetEnable::IsInitialized() const {
  return true;
}

void CmdSetEnable::Swap(CmdSetEnable* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CmdSetEnable::InternalSwap(CmdSetEnable* other) {
  using std::swap;
  CastToBase(&enables_)->InternalSwap(CastToBase(&other->enables_));
  swap(sequence_number_, other->sequence_number_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CmdSetEnable::GetMetadata() const {
  protobuf_goldo_2fnucleo_2fservos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2fnucleo_2fservos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CmdLiftDoHoming::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CmdLiftDoHoming::kSequenceNumberFieldNumber;
const int CmdLiftDoHoming::kLiftIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CmdLiftDoHoming::CmdLiftDoHoming()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_goldo_2fnucleo_2fservos_2eproto::scc_info_CmdLiftDoHoming.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:goldo.nucleo.servos.CmdLiftDoHoming)
}
CmdLiftDoHoming::CmdLiftDoHoming(const CmdLiftDoHoming& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&sequence_number_, &from.sequence_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&lift_id_) -
    reinterpret_cast<char*>(&sequence_number_)) + sizeof(lift_id_));
  // @@protoc_insertion_point(copy_constructor:goldo.nucleo.servos.CmdLiftDoHoming)
}

void CmdLiftDoHoming::SharedCtor() {
  ::memset(&sequence_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lift_id_) -
      reinterpret_cast<char*>(&sequence_number_)) + sizeof(lift_id_));
}

CmdLiftDoHoming::~CmdLiftDoHoming() {
  // @@protoc_insertion_point(destructor:goldo.nucleo.servos.CmdLiftDoHoming)
  SharedDtor();
}

void CmdLiftDoHoming::SharedDtor() {
}

void CmdLiftDoHoming::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CmdLiftDoHoming::descriptor() {
  ::protobuf_goldo_2fnucleo_2fservos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2fnucleo_2fservos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CmdLiftDoHoming& CmdLiftDoHoming::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_goldo_2fnucleo_2fservos_2eproto::scc_info_CmdLiftDoHoming.base);
  return *internal_default_instance();
}


void CmdLiftDoHoming::Clear() {
// @@protoc_insertion_point(message_clear_start:goldo.nucleo.servos.CmdLiftDoHoming)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&sequence_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lift_id_) -
      reinterpret_cast<char*>(&sequence_number_)) + sizeof(lift_id_));
  _internal_metadata_.Clear();
}

bool CmdLiftDoHoming::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:goldo.nucleo.servos.CmdLiftDoHoming)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 sequence_number = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sequence_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 lift_id = 2 [(.goldo.pb2_options.cpp_type) = UINT8];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lift_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:goldo.nucleo.servos.CmdLiftDoHoming)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:goldo.nucleo.servos.CmdLiftDoHoming)
  return false;
#undef DO_
}

void CmdLiftDoHoming::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:goldo.nucleo.servos.CmdLiftDoHoming)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sequence_number = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->sequence_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sequence_number(), output);
  }

  // int32 lift_id = 2 [(.goldo.pb2_options.cpp_type) = UINT8];
  if (this->lift_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lift_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:goldo.nucleo.servos.CmdLiftDoHoming)
}

::google::protobuf::uint8* CmdLiftDoHoming::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:goldo.nucleo.servos.CmdLiftDoHoming)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sequence_number = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->sequence_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sequence_number(), target);
  }

  // int32 lift_id = 2 [(.goldo.pb2_options.cpp_type) = UINT8];
  if (this->lift_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lift_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:goldo.nucleo.servos.CmdLiftDoHoming)
  return target;
}

size_t CmdLiftDoHoming::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:goldo.nucleo.servos.CmdLiftDoHoming)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 sequence_number = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->sequence_number() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sequence_number());
  }

  // int32 lift_id = 2 [(.goldo.pb2_options.cpp_type) = UINT8];
  if (this->lift_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lift_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CmdLiftDoHoming::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:goldo.nucleo.servos.CmdLiftDoHoming)
  GOOGLE_DCHECK_NE(&from, this);
  const CmdLiftDoHoming* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CmdLiftDoHoming>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:goldo.nucleo.servos.CmdLiftDoHoming)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:goldo.nucleo.servos.CmdLiftDoHoming)
    MergeFrom(*source);
  }
}

void CmdLiftDoHoming::MergeFrom(const CmdLiftDoHoming& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:goldo.nucleo.servos.CmdLiftDoHoming)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sequence_number() != 0) {
    set_sequence_number(from.sequence_number());
  }
  if (from.lift_id() != 0) {
    set_lift_id(from.lift_id());
  }
}

void CmdLiftDoHoming::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:goldo.nucleo.servos.CmdLiftDoHoming)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdLiftDoHoming::CopyFrom(const CmdLiftDoHoming& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:goldo.nucleo.servos.CmdLiftDoHoming)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdLiftDoHoming::IsInitialized() const {
  return true;
}

void CmdLiftDoHoming::Swap(CmdLiftDoHoming* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CmdLiftDoHoming::InternalSwap(CmdLiftDoHoming* other) {
  using std::swap;
  swap(sequence_number_, other->sequence_number_);
  swap(lift_id_, other->lift_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CmdLiftDoHoming::GetMetadata() const {
  protobuf_goldo_2fnucleo_2fservos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2fnucleo_2fservos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CmdLiftsRaw::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CmdLiftsRaw::kSequenceNumberFieldNumber;
const int CmdLiftsRaw::kLift1TargetFieldNumber;
const int CmdLiftsRaw::kLift1BltrigFieldNumber;
const int CmdLiftsRaw::kLift1SpeedFieldNumber;
const int CmdLiftsRaw::kLift2TargetFieldNumber;
const int CmdLiftsRaw::kLift2BltrigFieldNumber;
const int CmdLiftsRaw::kLift2SpeedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CmdLiftsRaw::CmdLiftsRaw()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_goldo_2fnucleo_2fservos_2eproto::scc_info_CmdLiftsRaw.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:goldo.nucleo.servos.CmdLiftsRaw)
}
CmdLiftsRaw::CmdLiftsRaw(const CmdLiftsRaw& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&sequence_number_, &from.sequence_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&lift2_speed_) -
    reinterpret_cast<char*>(&sequence_number_)) + sizeof(lift2_speed_));
  // @@protoc_insertion_point(copy_constructor:goldo.nucleo.servos.CmdLiftsRaw)
}

void CmdLiftsRaw::SharedCtor() {
  ::memset(&sequence_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lift2_speed_) -
      reinterpret_cast<char*>(&sequence_number_)) + sizeof(lift2_speed_));
}

CmdLiftsRaw::~CmdLiftsRaw() {
  // @@protoc_insertion_point(destructor:goldo.nucleo.servos.CmdLiftsRaw)
  SharedDtor();
}

void CmdLiftsRaw::SharedDtor() {
}

void CmdLiftsRaw::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CmdLiftsRaw::descriptor() {
  ::protobuf_goldo_2fnucleo_2fservos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2fnucleo_2fservos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CmdLiftsRaw& CmdLiftsRaw::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_goldo_2fnucleo_2fservos_2eproto::scc_info_CmdLiftsRaw.base);
  return *internal_default_instance();
}


void CmdLiftsRaw::Clear() {
// @@protoc_insertion_point(message_clear_start:goldo.nucleo.servos.CmdLiftsRaw)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&sequence_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lift2_speed_) -
      reinterpret_cast<char*>(&sequence_number_)) + sizeof(lift2_speed_));
  _internal_metadata_.Clear();
}

bool CmdLiftsRaw::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:goldo.nucleo.servos.CmdLiftsRaw)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 sequence_number = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sequence_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 lift1_target = 2 [(.goldo.pb2_options.cpp_type) = INT32];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lift1_target_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 lift1_bltrig = 3 [(.goldo.pb2_options.cpp_type) = UINT16];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lift1_bltrig_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 lift1_speed = 4 [(.goldo.pb2_options.cpp_type) = UINT16];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lift1_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 lift2_target = 5 [(.goldo.pb2_options.cpp_type) = INT32];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lift2_target_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 lift2_bltrig = 6 [(.goldo.pb2_options.cpp_type) = UINT16];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lift2_bltrig_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 lift2_speed = 7 [(.goldo.pb2_options.cpp_type) = UINT16];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lift2_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:goldo.nucleo.servos.CmdLiftsRaw)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:goldo.nucleo.servos.CmdLiftsRaw)
  return false;
#undef DO_
}

void CmdLiftsRaw::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:goldo.nucleo.servos.CmdLiftsRaw)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sequence_number = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->sequence_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sequence_number(), output);
  }

  // int32 lift1_target = 2 [(.goldo.pb2_options.cpp_type) = INT32];
  if (this->lift1_target() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lift1_target(), output);
  }

  // int32 lift1_bltrig = 3 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->lift1_bltrig() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->lift1_bltrig(), output);
  }

  // int32 lift1_speed = 4 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->lift1_speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->lift1_speed(), output);
  }

  // int32 lift2_target = 5 [(.goldo.pb2_options.cpp_type) = INT32];
  if (this->lift2_target() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->lift2_target(), output);
  }

  // int32 lift2_bltrig = 6 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->lift2_bltrig() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->lift2_bltrig(), output);
  }

  // int32 lift2_speed = 7 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->lift2_speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->lift2_speed(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:goldo.nucleo.servos.CmdLiftsRaw)
}

::google::protobuf::uint8* CmdLiftsRaw::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:goldo.nucleo.servos.CmdLiftsRaw)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sequence_number = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->sequence_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sequence_number(), target);
  }

  // int32 lift1_target = 2 [(.goldo.pb2_options.cpp_type) = INT32];
  if (this->lift1_target() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lift1_target(), target);
  }

  // int32 lift1_bltrig = 3 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->lift1_bltrig() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->lift1_bltrig(), target);
  }

  // int32 lift1_speed = 4 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->lift1_speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->lift1_speed(), target);
  }

  // int32 lift2_target = 5 [(.goldo.pb2_options.cpp_type) = INT32];
  if (this->lift2_target() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->lift2_target(), target);
  }

  // int32 lift2_bltrig = 6 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->lift2_bltrig() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->lift2_bltrig(), target);
  }

  // int32 lift2_speed = 7 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->lift2_speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->lift2_speed(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:goldo.nucleo.servos.CmdLiftsRaw)
  return target;
}

size_t CmdLiftsRaw::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:goldo.nucleo.servos.CmdLiftsRaw)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 sequence_number = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->sequence_number() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sequence_number());
  }

  // int32 lift1_target = 2 [(.goldo.pb2_options.cpp_type) = INT32];
  if (this->lift1_target() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lift1_target());
  }

  // int32 lift1_bltrig = 3 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->lift1_bltrig() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lift1_bltrig());
  }

  // int32 lift1_speed = 4 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->lift1_speed() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lift1_speed());
  }

  // int32 lift2_target = 5 [(.goldo.pb2_options.cpp_type) = INT32];
  if (this->lift2_target() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lift2_target());
  }

  // int32 lift2_bltrig = 6 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->lift2_bltrig() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lift2_bltrig());
  }

  // int32 lift2_speed = 7 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->lift2_speed() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lift2_speed());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CmdLiftsRaw::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:goldo.nucleo.servos.CmdLiftsRaw)
  GOOGLE_DCHECK_NE(&from, this);
  const CmdLiftsRaw* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CmdLiftsRaw>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:goldo.nucleo.servos.CmdLiftsRaw)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:goldo.nucleo.servos.CmdLiftsRaw)
    MergeFrom(*source);
  }
}

void CmdLiftsRaw::MergeFrom(const CmdLiftsRaw& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:goldo.nucleo.servos.CmdLiftsRaw)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sequence_number() != 0) {
    set_sequence_number(from.sequence_number());
  }
  if (from.lift1_target() != 0) {
    set_lift1_target(from.lift1_target());
  }
  if (from.lift1_bltrig() != 0) {
    set_lift1_bltrig(from.lift1_bltrig());
  }
  if (from.lift1_speed() != 0) {
    set_lift1_speed(from.lift1_speed());
  }
  if (from.lift2_target() != 0) {
    set_lift2_target(from.lift2_target());
  }
  if (from.lift2_bltrig() != 0) {
    set_lift2_bltrig(from.lift2_bltrig());
  }
  if (from.lift2_speed() != 0) {
    set_lift2_speed(from.lift2_speed());
  }
}

void CmdLiftsRaw::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:goldo.nucleo.servos.CmdLiftsRaw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdLiftsRaw::CopyFrom(const CmdLiftsRaw& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:goldo.nucleo.servos.CmdLiftsRaw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdLiftsRaw::IsInitialized() const {
  return true;
}

void CmdLiftsRaw::Swap(CmdLiftsRaw* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CmdLiftsRaw::InternalSwap(CmdLiftsRaw* other) {
  using std::swap;
  swap(sequence_number_, other->sequence_number_);
  swap(lift1_target_, other->lift1_target_);
  swap(lift1_bltrig_, other->lift1_bltrig_);
  swap(lift1_speed_, other->lift1_speed_);
  swap(lift2_target_, other->lift2_target_);
  swap(lift2_bltrig_, other->lift2_bltrig_);
  swap(lift2_speed_, other->lift2_speed_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CmdLiftsRaw::GetMetadata() const {
  protobuf_goldo_2fnucleo_2fservos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2fnucleo_2fservos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CmdLiftSetEnable::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CmdLiftSetEnable::kSequenceNumberFieldNumber;
const int CmdLiftSetEnable::kLiftIdFieldNumber;
const int CmdLiftSetEnable::kEnableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CmdLiftSetEnable::CmdLiftSetEnable()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_goldo_2fnucleo_2fservos_2eproto::scc_info_CmdLiftSetEnable.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:goldo.nucleo.servos.CmdLiftSetEnable)
}
CmdLiftSetEnable::CmdLiftSetEnable(const CmdLiftSetEnable& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&sequence_number_, &from.sequence_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&enable_) -
    reinterpret_cast<char*>(&sequence_number_)) + sizeof(enable_));
  // @@protoc_insertion_point(copy_constructor:goldo.nucleo.servos.CmdLiftSetEnable)
}

void CmdLiftSetEnable::SharedCtor() {
  ::memset(&sequence_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enable_) -
      reinterpret_cast<char*>(&sequence_number_)) + sizeof(enable_));
}

CmdLiftSetEnable::~CmdLiftSetEnable() {
  // @@protoc_insertion_point(destructor:goldo.nucleo.servos.CmdLiftSetEnable)
  SharedDtor();
}

void CmdLiftSetEnable::SharedDtor() {
}

void CmdLiftSetEnable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CmdLiftSetEnable::descriptor() {
  ::protobuf_goldo_2fnucleo_2fservos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2fnucleo_2fservos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CmdLiftSetEnable& CmdLiftSetEnable::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_goldo_2fnucleo_2fservos_2eproto::scc_info_CmdLiftSetEnable.base);
  return *internal_default_instance();
}


void CmdLiftSetEnable::Clear() {
// @@protoc_insertion_point(message_clear_start:goldo.nucleo.servos.CmdLiftSetEnable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&sequence_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enable_) -
      reinterpret_cast<char*>(&sequence_number_)) + sizeof(enable_));
  _internal_metadata_.Clear();
}

bool CmdLiftSetEnable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:goldo.nucleo.servos.CmdLiftSetEnable)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 sequence_number = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sequence_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 lift_id = 2 [(.goldo.pb2_options.cpp_type) = UINT8];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lift_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool enable = 3 [(.goldo.pb2_options.cpp_type) = UINT8];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:goldo.nucleo.servos.CmdLiftSetEnable)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:goldo.nucleo.servos.CmdLiftSetEnable)
  return false;
#undef DO_
}

void CmdLiftSetEnable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:goldo.nucleo.servos.CmdLiftSetEnable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sequence_number = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->sequence_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sequence_number(), output);
  }

  // int32 lift_id = 2 [(.goldo.pb2_options.cpp_type) = UINT8];
  if (this->lift_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lift_id(), output);
  }

  // bool enable = 3 [(.goldo.pb2_options.cpp_type) = UINT8];
  if (this->enable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->enable(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:goldo.nucleo.servos.CmdLiftSetEnable)
}

::google::protobuf::uint8* CmdLiftSetEnable::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:goldo.nucleo.servos.CmdLiftSetEnable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sequence_number = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->sequence_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sequence_number(), target);
  }

  // int32 lift_id = 2 [(.goldo.pb2_options.cpp_type) = UINT8];
  if (this->lift_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lift_id(), target);
  }

  // bool enable = 3 [(.goldo.pb2_options.cpp_type) = UINT8];
  if (this->enable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->enable(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:goldo.nucleo.servos.CmdLiftSetEnable)
  return target;
}

size_t CmdLiftSetEnable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:goldo.nucleo.servos.CmdLiftSetEnable)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 sequence_number = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->sequence_number() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sequence_number());
  }

  // int32 lift_id = 2 [(.goldo.pb2_options.cpp_type) = UINT8];
  if (this->lift_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lift_id());
  }

  // bool enable = 3 [(.goldo.pb2_options.cpp_type) = UINT8];
  if (this->enable() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CmdLiftSetEnable::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:goldo.nucleo.servos.CmdLiftSetEnable)
  GOOGLE_DCHECK_NE(&from, this);
  const CmdLiftSetEnable* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CmdLiftSetEnable>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:goldo.nucleo.servos.CmdLiftSetEnable)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:goldo.nucleo.servos.CmdLiftSetEnable)
    MergeFrom(*source);
  }
}

void CmdLiftSetEnable::MergeFrom(const CmdLiftSetEnable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:goldo.nucleo.servos.CmdLiftSetEnable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sequence_number() != 0) {
    set_sequence_number(from.sequence_number());
  }
  if (from.lift_id() != 0) {
    set_lift_id(from.lift_id());
  }
  if (from.enable() != 0) {
    set_enable(from.enable());
  }
}

void CmdLiftSetEnable::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:goldo.nucleo.servos.CmdLiftSetEnable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdLiftSetEnable::CopyFrom(const CmdLiftSetEnable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:goldo.nucleo.servos.CmdLiftSetEnable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdLiftSetEnable::IsInitialized() const {
  return true;
}

void CmdLiftSetEnable::Swap(CmdLiftSetEnable* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CmdLiftSetEnable::InternalSwap(CmdLiftSetEnable* other) {
  using std::swap;
  swap(sequence_number_, other->sequence_number_);
  swap(lift_id_, other->lift_id_);
  swap(enable_, other->enable_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CmdLiftSetEnable::GetMetadata() const {
  protobuf_goldo_2fnucleo_2fservos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2fnucleo_2fservos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CmdMoveMultiple::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CmdMoveMultiple::kSequenceNumberFieldNumber;
const int CmdMoveMultiple::kSpeedFieldNumber;
const int CmdMoveMultiple::kPositionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CmdMoveMultiple::CmdMoveMultiple()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_goldo_2fnucleo_2fservos_2eproto::scc_info_CmdMoveMultiple.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:goldo.nucleo.servos.CmdMoveMultiple)
}
CmdMoveMultiple::CmdMoveMultiple(const CmdMoveMultiple& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      positions_(from.positions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&sequence_number_, &from.sequence_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&speed_) -
    reinterpret_cast<char*>(&sequence_number_)) + sizeof(speed_));
  // @@protoc_insertion_point(copy_constructor:goldo.nucleo.servos.CmdMoveMultiple)
}

void CmdMoveMultiple::SharedCtor() {
  ::memset(&sequence_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&speed_) -
      reinterpret_cast<char*>(&sequence_number_)) + sizeof(speed_));
}

CmdMoveMultiple::~CmdMoveMultiple() {
  // @@protoc_insertion_point(destructor:goldo.nucleo.servos.CmdMoveMultiple)
  SharedDtor();
}

void CmdMoveMultiple::SharedDtor() {
}

void CmdMoveMultiple::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CmdMoveMultiple::descriptor() {
  ::protobuf_goldo_2fnucleo_2fservos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2fnucleo_2fservos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CmdMoveMultiple& CmdMoveMultiple::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_goldo_2fnucleo_2fservos_2eproto::scc_info_CmdMoveMultiple.base);
  return *internal_default_instance();
}


void CmdMoveMultiple::Clear() {
// @@protoc_insertion_point(message_clear_start:goldo.nucleo.servos.CmdMoveMultiple)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  positions_.Clear();
  ::memset(&sequence_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&speed_) -
      reinterpret_cast<char*>(&sequence_number_)) + sizeof(speed_));
  _internal_metadata_.Clear();
}

bool CmdMoveMultiple::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:goldo.nucleo.servos.CmdMoveMultiple)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 sequence_number = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sequence_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 speed = 2 [(.goldo.pb2_options.cpp_type) = UINT16];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .goldo.nucleo.servos.ServoPosition positions = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_positions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:goldo.nucleo.servos.CmdMoveMultiple)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:goldo.nucleo.servos.CmdMoveMultiple)
  return false;
#undef DO_
}

void CmdMoveMultiple::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:goldo.nucleo.servos.CmdMoveMultiple)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sequence_number = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->sequence_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sequence_number(), output);
  }

  // int32 speed = 2 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->speed(), output);
  }

  // repeated .goldo.nucleo.servos.ServoPosition positions = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->positions_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->positions(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:goldo.nucleo.servos.CmdMoveMultiple)
}

::google::protobuf::uint8* CmdMoveMultiple::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:goldo.nucleo.servos.CmdMoveMultiple)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sequence_number = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->sequence_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sequence_number(), target);
  }

  // int32 speed = 2 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->speed(), target);
  }

  // repeated .goldo.nucleo.servos.ServoPosition positions = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->positions_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->positions(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:goldo.nucleo.servos.CmdMoveMultiple)
  return target;
}

size_t CmdMoveMultiple::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:goldo.nucleo.servos.CmdMoveMultiple)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .goldo.nucleo.servos.ServoPosition positions = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->positions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->positions(static_cast<int>(i)));
    }
  }

  // int32 sequence_number = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->sequence_number() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sequence_number());
  }

  // int32 speed = 2 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->speed() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->speed());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CmdMoveMultiple::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:goldo.nucleo.servos.CmdMoveMultiple)
  GOOGLE_DCHECK_NE(&from, this);
  const CmdMoveMultiple* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CmdMoveMultiple>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:goldo.nucleo.servos.CmdMoveMultiple)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:goldo.nucleo.servos.CmdMoveMultiple)
    MergeFrom(*source);
  }
}

void CmdMoveMultiple::MergeFrom(const CmdMoveMultiple& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:goldo.nucleo.servos.CmdMoveMultiple)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  positions_.MergeFrom(from.positions_);
  if (from.sequence_number() != 0) {
    set_sequence_number(from.sequence_number());
  }
  if (from.speed() != 0) {
    set_speed(from.speed());
  }
}

void CmdMoveMultiple::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:goldo.nucleo.servos.CmdMoveMultiple)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdMoveMultiple::CopyFrom(const CmdMoveMultiple& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:goldo.nucleo.servos.CmdMoveMultiple)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdMoveMultiple::IsInitialized() const {
  return true;
}

void CmdMoveMultiple::Swap(CmdMoveMultiple* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CmdMoveMultiple::InternalSwap(CmdMoveMultiple* other) {
  using std::swap;
  CastToBase(&positions_)->InternalSwap(CastToBase(&other->positions_));
  swap(sequence_number_, other->sequence_number_);
  swap(speed_, other->speed_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CmdMoveMultiple::GetMetadata() const {
  protobuf_goldo_2fnucleo_2fservos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2fnucleo_2fservos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CmdSetMaxTorques::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CmdSetMaxTorques::kSequenceNumberFieldNumber;
const int CmdSetMaxTorques::kTorquesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CmdSetMaxTorques::CmdSetMaxTorques()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_goldo_2fnucleo_2fservos_2eproto::scc_info_CmdSetMaxTorques.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:goldo.nucleo.servos.CmdSetMaxTorques)
}
CmdSetMaxTorques::CmdSetMaxTorques(const CmdSetMaxTorques& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      torques_(from.torques_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sequence_number_ = from.sequence_number_;
  // @@protoc_insertion_point(copy_constructor:goldo.nucleo.servos.CmdSetMaxTorques)
}

void CmdSetMaxTorques::SharedCtor() {
  sequence_number_ = 0;
}

CmdSetMaxTorques::~CmdSetMaxTorques() {
  // @@protoc_insertion_point(destructor:goldo.nucleo.servos.CmdSetMaxTorques)
  SharedDtor();
}

void CmdSetMaxTorques::SharedDtor() {
}

void CmdSetMaxTorques::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CmdSetMaxTorques::descriptor() {
  ::protobuf_goldo_2fnucleo_2fservos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2fnucleo_2fservos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CmdSetMaxTorques& CmdSetMaxTorques::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_goldo_2fnucleo_2fservos_2eproto::scc_info_CmdSetMaxTorques.base);
  return *internal_default_instance();
}


void CmdSetMaxTorques::Clear() {
// @@protoc_insertion_point(message_clear_start:goldo.nucleo.servos.CmdSetMaxTorques)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  torques_.Clear();
  sequence_number_ = 0;
  _internal_metadata_.Clear();
}

bool CmdSetMaxTorques::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:goldo.nucleo.servos.CmdSetMaxTorques)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 sequence_number = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sequence_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .goldo.nucleo.servos.ServoTorque torques = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_torques()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:goldo.nucleo.servos.CmdSetMaxTorques)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:goldo.nucleo.servos.CmdSetMaxTorques)
  return false;
#undef DO_
}

void CmdSetMaxTorques::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:goldo.nucleo.servos.CmdSetMaxTorques)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sequence_number = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->sequence_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sequence_number(), output);
  }

  // repeated .goldo.nucleo.servos.ServoTorque torques = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->torques_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->torques(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:goldo.nucleo.servos.CmdSetMaxTorques)
}

::google::protobuf::uint8* CmdSetMaxTorques::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:goldo.nucleo.servos.CmdSetMaxTorques)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sequence_number = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->sequence_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sequence_number(), target);
  }

  // repeated .goldo.nucleo.servos.ServoTorque torques = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->torques_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->torques(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:goldo.nucleo.servos.CmdSetMaxTorques)
  return target;
}

size_t CmdSetMaxTorques::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:goldo.nucleo.servos.CmdSetMaxTorques)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .goldo.nucleo.servos.ServoTorque torques = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->torques_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->torques(static_cast<int>(i)));
    }
  }

  // int32 sequence_number = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->sequence_number() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sequence_number());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CmdSetMaxTorques::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:goldo.nucleo.servos.CmdSetMaxTorques)
  GOOGLE_DCHECK_NE(&from, this);
  const CmdSetMaxTorques* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CmdSetMaxTorques>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:goldo.nucleo.servos.CmdSetMaxTorques)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:goldo.nucleo.servos.CmdSetMaxTorques)
    MergeFrom(*source);
  }
}

void CmdSetMaxTorques::MergeFrom(const CmdSetMaxTorques& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:goldo.nucleo.servos.CmdSetMaxTorques)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  torques_.MergeFrom(from.torques_);
  if (from.sequence_number() != 0) {
    set_sequence_number(from.sequence_number());
  }
}

void CmdSetMaxTorques::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:goldo.nucleo.servos.CmdSetMaxTorques)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdSetMaxTorques::CopyFrom(const CmdSetMaxTorques& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:goldo.nucleo.servos.CmdSetMaxTorques)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdSetMaxTorques::IsInitialized() const {
  return true;
}

void CmdSetMaxTorques::Swap(CmdSetMaxTorques* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CmdSetMaxTorques::InternalSwap(CmdSetMaxTorques* other) {
  using std::swap;
  CastToBase(&torques_)->InternalSwap(CastToBase(&other->torques_));
  swap(sequence_number_, other->sequence_number_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CmdSetMaxTorques::GetMetadata() const {
  protobuf_goldo_2fnucleo_2fservos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2fnucleo_2fservos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace servos
}  // namespace nucleo
}  // namespace goldo
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::goldo::nucleo::servos::ServoConfig* Arena::CreateMaybeMessage< ::goldo::nucleo::servos::ServoConfig >(Arena* arena) {
  return Arena::CreateInternal< ::goldo::nucleo::servos::ServoConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::goldo::nucleo::servos::LiftConfig* Arena::CreateMaybeMessage< ::goldo::nucleo::servos::LiftConfig >(Arena* arena) {
  return Arena::CreateInternal< ::goldo::nucleo::servos::LiftConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::goldo::nucleo::servos::ServoState* Arena::CreateMaybeMessage< ::goldo::nucleo::servos::ServoState >(Arena* arena) {
  return Arena::CreateInternal< ::goldo::nucleo::servos::ServoState >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::goldo::nucleo::servos::ServoStates* Arena::CreateMaybeMessage< ::goldo::nucleo::servos::ServoStates >(Arena* arena) {
  return Arena::CreateInternal< ::goldo::nucleo::servos::ServoStates >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::goldo::nucleo::servos::ServoPosition* Arena::CreateMaybeMessage< ::goldo::nucleo::servos::ServoPosition >(Arena* arena) {
  return Arena::CreateInternal< ::goldo::nucleo::servos::ServoPosition >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::goldo::nucleo::servos::ServoTorque* Arena::CreateMaybeMessage< ::goldo::nucleo::servos::ServoTorque >(Arena* arena) {
  return Arena::CreateInternal< ::goldo::nucleo::servos::ServoTorque >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::goldo::nucleo::servos::ServoEnable* Arena::CreateMaybeMessage< ::goldo::nucleo::servos::ServoEnable >(Arena* arena) {
  return Arena::CreateInternal< ::goldo::nucleo::servos::ServoEnable >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::goldo::nucleo::servos::CmdDisableAll* Arena::CreateMaybeMessage< ::goldo::nucleo::servos::CmdDisableAll >(Arena* arena) {
  return Arena::CreateInternal< ::goldo::nucleo::servos::CmdDisableAll >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::goldo::nucleo::servos::CmdSetEnable* Arena::CreateMaybeMessage< ::goldo::nucleo::servos::CmdSetEnable >(Arena* arena) {
  return Arena::CreateInternal< ::goldo::nucleo::servos::CmdSetEnable >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::goldo::nucleo::servos::CmdLiftDoHoming* Arena::CreateMaybeMessage< ::goldo::nucleo::servos::CmdLiftDoHoming >(Arena* arena) {
  return Arena::CreateInternal< ::goldo::nucleo::servos::CmdLiftDoHoming >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::goldo::nucleo::servos::CmdLiftsRaw* Arena::CreateMaybeMessage< ::goldo::nucleo::servos::CmdLiftsRaw >(Arena* arena) {
  return Arena::CreateInternal< ::goldo::nucleo::servos::CmdLiftsRaw >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::goldo::nucleo::servos::CmdLiftSetEnable* Arena::CreateMaybeMessage< ::goldo::nucleo::servos::CmdLiftSetEnable >(Arena* arena) {
  return Arena::CreateInternal< ::goldo::nucleo::servos::CmdLiftSetEnable >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::goldo::nucleo::servos::CmdMoveMultiple* Arena::CreateMaybeMessage< ::goldo::nucleo::servos::CmdMoveMultiple >(Arena* arena) {
  return Arena::CreateInternal< ::goldo::nucleo::servos::CmdMoveMultiple >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::goldo::nucleo::servos::CmdSetMaxTorques* Arena::CreateMaybeMessage< ::goldo::nucleo::servos::CmdSetMaxTorques >(Arena* arena) {
  return Arena::CreateInternal< ::goldo::nucleo::servos::CmdSetMaxTorques >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
