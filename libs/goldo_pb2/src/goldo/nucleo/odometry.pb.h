// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: goldo/nucleo/odometry.proto

#ifndef PROTOBUF_INCLUDED_goldo_2fnucleo_2fodometry_2eproto
#define PROTOBUF_INCLUDED_goldo_2fnucleo_2fodometry_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "goldo/pb2_options.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_goldo_2fnucleo_2fodometry_2eproto 

namespace protobuf_goldo_2fnucleo_2fodometry_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_goldo_2fnucleo_2fodometry_2eproto
namespace goldo {
namespace nucleo {
namespace odometry {
class OdometryConfig;
class OdometryConfigDefaultTypeInternal;
extern OdometryConfigDefaultTypeInternal _OdometryConfig_default_instance_;
}  // namespace odometry
}  // namespace nucleo
}  // namespace goldo
namespace google {
namespace protobuf {
template<> ::goldo::nucleo::odometry::OdometryConfig* Arena::CreateMaybeMessage<::goldo::nucleo::odometry::OdometryConfig>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace goldo {
namespace nucleo {
namespace odometry {

// ===================================================================

class OdometryConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:goldo.nucleo.odometry.OdometryConfig) */ {
 public:
  OdometryConfig();
  virtual ~OdometryConfig();

  OdometryConfig(const OdometryConfig& from);

  inline OdometryConfig& operator=(const OdometryConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OdometryConfig(OdometryConfig&& from) noexcept
    : OdometryConfig() {
    *this = ::std::move(from);
  }

  inline OdometryConfig& operator=(OdometryConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const OdometryConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OdometryConfig* internal_default_instance() {
    return reinterpret_cast<const OdometryConfig*>(
               &_OdometryConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(OdometryConfig* other);
  friend void swap(OdometryConfig& a, OdometryConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OdometryConfig* New() const final {
    return CreateMaybeMessage<OdometryConfig>(NULL);
  }

  OdometryConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OdometryConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OdometryConfig& from);
  void MergeFrom(const OdometryConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OdometryConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float dist_per_count_left = 1;
  void clear_dist_per_count_left();
  static const int kDistPerCountLeftFieldNumber = 1;
  float dist_per_count_left() const;
  void set_dist_per_count_left(float value);

  // float dist_per_count_right = 2;
  void clear_dist_per_count_right();
  static const int kDistPerCountRightFieldNumber = 2;
  float dist_per_count_right() const;
  void set_dist_per_count_right(float value);

  // float wheel_distance_left = 3;
  void clear_wheel_distance_left();
  static const int kWheelDistanceLeftFieldNumber = 3;
  float wheel_distance_left() const;
  void set_wheel_distance_left(float value);

  // float wheel_distance_right = 4;
  void clear_wheel_distance_right();
  static const int kWheelDistanceRightFieldNumber = 4;
  float wheel_distance_right() const;
  void set_wheel_distance_right(float value);

  // float speed_filter_frequency = 5;
  void clear_speed_filter_frequency();
  static const int kSpeedFilterFrequencyFieldNumber = 5;
  float speed_filter_frequency() const;
  void set_speed_filter_frequency(float value);

  // float accel_filter_frequency = 6;
  void clear_accel_filter_frequency();
  static const int kAccelFilterFrequencyFieldNumber = 6;
  float accel_filter_frequency() const;
  void set_accel_filter_frequency(float value);

  // @@protoc_insertion_point(class_scope:goldo.nucleo.odometry.OdometryConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float dist_per_count_left_;
  float dist_per_count_right_;
  float wheel_distance_left_;
  float wheel_distance_right_;
  float speed_filter_frequency_;
  float accel_filter_frequency_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_goldo_2fnucleo_2fodometry_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// OdometryConfig

// float dist_per_count_left = 1;
inline void OdometryConfig::clear_dist_per_count_left() {
  dist_per_count_left_ = 0;
}
inline float OdometryConfig::dist_per_count_left() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.odometry.OdometryConfig.dist_per_count_left)
  return dist_per_count_left_;
}
inline void OdometryConfig::set_dist_per_count_left(float value) {
  
  dist_per_count_left_ = value;
  // @@protoc_insertion_point(field_set:goldo.nucleo.odometry.OdometryConfig.dist_per_count_left)
}

// float dist_per_count_right = 2;
inline void OdometryConfig::clear_dist_per_count_right() {
  dist_per_count_right_ = 0;
}
inline float OdometryConfig::dist_per_count_right() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.odometry.OdometryConfig.dist_per_count_right)
  return dist_per_count_right_;
}
inline void OdometryConfig::set_dist_per_count_right(float value) {
  
  dist_per_count_right_ = value;
  // @@protoc_insertion_point(field_set:goldo.nucleo.odometry.OdometryConfig.dist_per_count_right)
}

// float wheel_distance_left = 3;
inline void OdometryConfig::clear_wheel_distance_left() {
  wheel_distance_left_ = 0;
}
inline float OdometryConfig::wheel_distance_left() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.odometry.OdometryConfig.wheel_distance_left)
  return wheel_distance_left_;
}
inline void OdometryConfig::set_wheel_distance_left(float value) {
  
  wheel_distance_left_ = value;
  // @@protoc_insertion_point(field_set:goldo.nucleo.odometry.OdometryConfig.wheel_distance_left)
}

// float wheel_distance_right = 4;
inline void OdometryConfig::clear_wheel_distance_right() {
  wheel_distance_right_ = 0;
}
inline float OdometryConfig::wheel_distance_right() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.odometry.OdometryConfig.wheel_distance_right)
  return wheel_distance_right_;
}
inline void OdometryConfig::set_wheel_distance_right(float value) {
  
  wheel_distance_right_ = value;
  // @@protoc_insertion_point(field_set:goldo.nucleo.odometry.OdometryConfig.wheel_distance_right)
}

// float speed_filter_frequency = 5;
inline void OdometryConfig::clear_speed_filter_frequency() {
  speed_filter_frequency_ = 0;
}
inline float OdometryConfig::speed_filter_frequency() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.odometry.OdometryConfig.speed_filter_frequency)
  return speed_filter_frequency_;
}
inline void OdometryConfig::set_speed_filter_frequency(float value) {
  
  speed_filter_frequency_ = value;
  // @@protoc_insertion_point(field_set:goldo.nucleo.odometry.OdometryConfig.speed_filter_frequency)
}

// float accel_filter_frequency = 6;
inline void OdometryConfig::clear_accel_filter_frequency() {
  accel_filter_frequency_ = 0;
}
inline float OdometryConfig::accel_filter_frequency() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.odometry.OdometryConfig.accel_filter_frequency)
  return accel_filter_frequency_;
}
inline void OdometryConfig::set_accel_filter_frequency(float value) {
  
  accel_filter_frequency_ = value;
  // @@protoc_insertion_point(field_set:goldo.nucleo.odometry.OdometryConfig.accel_filter_frequency)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace odometry
}  // namespace nucleo
}  // namespace goldo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_goldo_2fnucleo_2fodometry_2eproto
