// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: goldo/nucleo/robot.proto

#ifndef PROTOBUF_INCLUDED_goldo_2fnucleo_2frobot_2eproto
#define PROTOBUF_INCLUDED_goldo_2fnucleo_2frobot_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "goldo/pb2_options.pb.h"
#include "goldo/rplidar.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_goldo_2fnucleo_2frobot_2eproto 

namespace protobuf_goldo_2fnucleo_2frobot_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[7];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_goldo_2fnucleo_2frobot_2eproto
namespace goldo {
namespace nucleo {
namespace robot {
class ConfigLoadBegin;
class ConfigLoadBeginDefaultTypeInternal;
extern ConfigLoadBeginDefaultTypeInternal _ConfigLoadBegin_default_instance_;
class ConfigLoadChunk;
class ConfigLoadChunkDefaultTypeInternal;
extern ConfigLoadChunkDefaultTypeInternal _ConfigLoadChunk_default_instance_;
class ConfigLoadEnd;
class ConfigLoadEndDefaultTypeInternal;
extern ConfigLoadEndDefaultTypeInternal _ConfigLoadEnd_default_instance_;
class ConfigLoadStatus;
class ConfigLoadStatusDefaultTypeInternal;
extern ConfigLoadStatusDefaultTypeInternal _ConfigLoadStatus_default_instance_;
class RPLidarConfig;
class RPLidarConfigDefaultTypeInternal;
extern RPLidarConfigDefaultTypeInternal _RPLidarConfig_default_instance_;
class ServoConfig;
class ServoConfigDefaultTypeInternal;
extern ServoConfigDefaultTypeInternal _ServoConfig_default_instance_;
class ServosConfig;
class ServosConfigDefaultTypeInternal;
extern ServosConfigDefaultTypeInternal _ServosConfig_default_instance_;
}  // namespace robot
}  // namespace nucleo
}  // namespace goldo
namespace google {
namespace protobuf {
template<> ::goldo::nucleo::robot::ConfigLoadBegin* Arena::CreateMaybeMessage<::goldo::nucleo::robot::ConfigLoadBegin>(Arena*);
template<> ::goldo::nucleo::robot::ConfigLoadChunk* Arena::CreateMaybeMessage<::goldo::nucleo::robot::ConfigLoadChunk>(Arena*);
template<> ::goldo::nucleo::robot::ConfigLoadEnd* Arena::CreateMaybeMessage<::goldo::nucleo::robot::ConfigLoadEnd>(Arena*);
template<> ::goldo::nucleo::robot::ConfigLoadStatus* Arena::CreateMaybeMessage<::goldo::nucleo::robot::ConfigLoadStatus>(Arena*);
template<> ::goldo::nucleo::robot::RPLidarConfig* Arena::CreateMaybeMessage<::goldo::nucleo::robot::RPLidarConfig>(Arena*);
template<> ::goldo::nucleo::robot::ServoConfig* Arena::CreateMaybeMessage<::goldo::nucleo::robot::ServoConfig>(Arena*);
template<> ::goldo::nucleo::robot::ServosConfig* Arena::CreateMaybeMessage<::goldo::nucleo::robot::ServosConfig>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace goldo {
namespace nucleo {
namespace robot {

enum ConfigLoadStatus_Status {
  ConfigLoadStatus_Status_OK = 0,
  ConfigLoadStatus_Status_CRC_ERROR = 1,
  ConfigLoadStatus_Status_ConfigLoadStatus_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ConfigLoadStatus_Status_ConfigLoadStatus_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ConfigLoadStatus_Status_IsValid(int value);
const ConfigLoadStatus_Status ConfigLoadStatus_Status_Status_MIN = ConfigLoadStatus_Status_OK;
const ConfigLoadStatus_Status ConfigLoadStatus_Status_Status_MAX = ConfigLoadStatus_Status_CRC_ERROR;
const int ConfigLoadStatus_Status_Status_ARRAYSIZE = ConfigLoadStatus_Status_Status_MAX + 1;

const ::google::protobuf::EnumDescriptor* ConfigLoadStatus_Status_descriptor();
inline const ::std::string& ConfigLoadStatus_Status_Name(ConfigLoadStatus_Status value) {
  return ::google::protobuf::internal::NameOfEnum(
    ConfigLoadStatus_Status_descriptor(), value);
}
inline bool ConfigLoadStatus_Status_Parse(
    const ::std::string& name, ConfigLoadStatus_Status* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ConfigLoadStatus_Status>(
    ConfigLoadStatus_Status_descriptor(), name, value);
}
enum ServoType {
  UNKNOWN = 0,
  STANDARD = 1,
  DYNAMIXEL_AX12 = 2,
  DYNAMIXEL_MX28 = 3,
  ServoType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ServoType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ServoType_IsValid(int value);
const ServoType ServoType_MIN = UNKNOWN;
const ServoType ServoType_MAX = DYNAMIXEL_MX28;
const int ServoType_ARRAYSIZE = ServoType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ServoType_descriptor();
inline const ::std::string& ServoType_Name(ServoType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ServoType_descriptor(), value);
}
inline bool ServoType_Parse(
    const ::std::string& name, ServoType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ServoType>(
    ServoType_descriptor(), name, value);
}
// ===================================================================

class ConfigLoadBegin : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:goldo.nucleo.robot.ConfigLoadBegin) */ {
 public:
  ConfigLoadBegin();
  virtual ~ConfigLoadBegin();

  ConfigLoadBegin(const ConfigLoadBegin& from);

  inline ConfigLoadBegin& operator=(const ConfigLoadBegin& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigLoadBegin(ConfigLoadBegin&& from) noexcept
    : ConfigLoadBegin() {
    *this = ::std::move(from);
  }

  inline ConfigLoadBegin& operator=(ConfigLoadBegin&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigLoadBegin& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigLoadBegin* internal_default_instance() {
    return reinterpret_cast<const ConfigLoadBegin*>(
               &_ConfigLoadBegin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ConfigLoadBegin* other);
  friend void swap(ConfigLoadBegin& a, ConfigLoadBegin& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigLoadBegin* New() const final {
    return CreateMaybeMessage<ConfigLoadBegin>(NULL);
  }

  ConfigLoadBegin* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfigLoadBegin>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfigLoadBegin& from);
  void MergeFrom(const ConfigLoadBegin& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigLoadBegin* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 size = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
  void clear_size();
  static const int kSizeFieldNumber = 1;
  ::google::protobuf::uint32 size() const;
  void set_size(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:goldo.nucleo.robot.ConfigLoadBegin)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_goldo_2fnucleo_2frobot_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfigLoadChunk : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:goldo.nucleo.robot.ConfigLoadChunk) */ {
 public:
  ConfigLoadChunk();
  virtual ~ConfigLoadChunk();

  ConfigLoadChunk(const ConfigLoadChunk& from);

  inline ConfigLoadChunk& operator=(const ConfigLoadChunk& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigLoadChunk(ConfigLoadChunk&& from) noexcept
    : ConfigLoadChunk() {
    *this = ::std::move(from);
  }

  inline ConfigLoadChunk& operator=(ConfigLoadChunk&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigLoadChunk& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigLoadChunk* internal_default_instance() {
    return reinterpret_cast<const ConfigLoadChunk*>(
               &_ConfigLoadChunk_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ConfigLoadChunk* other);
  friend void swap(ConfigLoadChunk& a, ConfigLoadChunk& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigLoadChunk* New() const final {
    return CreateMaybeMessage<ConfigLoadChunk>(NULL);
  }

  ConfigLoadChunk* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfigLoadChunk>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfigLoadChunk& from);
  void MergeFrom(const ConfigLoadChunk& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigLoadChunk* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes data = 1;
  void clear_data();
  static const int kDataFieldNumber = 1;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:goldo.nucleo.robot.ConfigLoadChunk)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_goldo_2fnucleo_2frobot_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfigLoadEnd : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:goldo.nucleo.robot.ConfigLoadEnd) */ {
 public:
  ConfigLoadEnd();
  virtual ~ConfigLoadEnd();

  ConfigLoadEnd(const ConfigLoadEnd& from);

  inline ConfigLoadEnd& operator=(const ConfigLoadEnd& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigLoadEnd(ConfigLoadEnd&& from) noexcept
    : ConfigLoadEnd() {
    *this = ::std::move(from);
  }

  inline ConfigLoadEnd& operator=(ConfigLoadEnd&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigLoadEnd& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigLoadEnd* internal_default_instance() {
    return reinterpret_cast<const ConfigLoadEnd*>(
               &_ConfigLoadEnd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ConfigLoadEnd* other);
  friend void swap(ConfigLoadEnd& a, ConfigLoadEnd& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigLoadEnd* New() const final {
    return CreateMaybeMessage<ConfigLoadEnd>(NULL);
  }

  ConfigLoadEnd* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfigLoadEnd>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfigLoadEnd& from);
  void MergeFrom(const ConfigLoadEnd& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigLoadEnd* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 crc = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
  void clear_crc();
  static const int kCrcFieldNumber = 1;
  ::google::protobuf::uint32 crc() const;
  void set_crc(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:goldo.nucleo.robot.ConfigLoadEnd)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 crc_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_goldo_2fnucleo_2frobot_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfigLoadStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:goldo.nucleo.robot.ConfigLoadStatus) */ {
 public:
  ConfigLoadStatus();
  virtual ~ConfigLoadStatus();

  ConfigLoadStatus(const ConfigLoadStatus& from);

  inline ConfigLoadStatus& operator=(const ConfigLoadStatus& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigLoadStatus(ConfigLoadStatus&& from) noexcept
    : ConfigLoadStatus() {
    *this = ::std::move(from);
  }

  inline ConfigLoadStatus& operator=(ConfigLoadStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigLoadStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigLoadStatus* internal_default_instance() {
    return reinterpret_cast<const ConfigLoadStatus*>(
               &_ConfigLoadStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(ConfigLoadStatus* other);
  friend void swap(ConfigLoadStatus& a, ConfigLoadStatus& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigLoadStatus* New() const final {
    return CreateMaybeMessage<ConfigLoadStatus>(NULL);
  }

  ConfigLoadStatus* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfigLoadStatus>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfigLoadStatus& from);
  void MergeFrom(const ConfigLoadStatus& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigLoadStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ConfigLoadStatus_Status Status;
  static const Status OK =
    ConfigLoadStatus_Status_OK;
  static const Status CRC_ERROR =
    ConfigLoadStatus_Status_CRC_ERROR;
  static inline bool Status_IsValid(int value) {
    return ConfigLoadStatus_Status_IsValid(value);
  }
  static const Status Status_MIN =
    ConfigLoadStatus_Status_Status_MIN;
  static const Status Status_MAX =
    ConfigLoadStatus_Status_Status_MAX;
  static const int Status_ARRAYSIZE =
    ConfigLoadStatus_Status_Status_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Status_descriptor() {
    return ConfigLoadStatus_Status_descriptor();
  }
  static inline const ::std::string& Status_Name(Status value) {
    return ConfigLoadStatus_Status_Name(value);
  }
  static inline bool Status_Parse(const ::std::string& name,
      Status* value) {
    return ConfigLoadStatus_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .goldo.nucleo.robot.ConfigLoadStatus.Status status = 1 [(.goldo.pb2_options.cpp_type) = UINT8];
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::goldo::nucleo::robot::ConfigLoadStatus_Status status() const;
  void set_status(::goldo::nucleo::robot::ConfigLoadStatus_Status value);

  // @@protoc_insertion_point(class_scope:goldo.nucleo.robot.ConfigLoadStatus)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int status_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_goldo_2fnucleo_2frobot_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ServoConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:goldo.nucleo.robot.ServoConfig) */ {
 public:
  ServoConfig();
  virtual ~ServoConfig();

  ServoConfig(const ServoConfig& from);

  inline ServoConfig& operator=(const ServoConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServoConfig(ServoConfig&& from) noexcept
    : ServoConfig() {
    *this = ::std::move(from);
  }

  inline ServoConfig& operator=(ServoConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServoConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServoConfig* internal_default_instance() {
    return reinterpret_cast<const ServoConfig*>(
               &_ServoConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(ServoConfig* other);
  friend void swap(ServoConfig& a, ServoConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServoConfig* New() const final {
    return CreateMaybeMessage<ServoConfig>(NULL);
  }

  ServoConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ServoConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ServoConfig& from);
  void MergeFrom(const ServoConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServoConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 64 [(.goldo.pb2_options.cpp_type) = VOID];
  void clear_name();
  static const int kNameFieldNumber = 64;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .goldo.nucleo.robot.ServoType type = 1 [(.goldo.pb2_options.cpp_type) = UINT8];
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::goldo::nucleo::robot::ServoType type() const;
  void set_type(::goldo::nucleo::robot::ServoType value);

  // int32 id = 2 [(.goldo.pb2_options.cpp_type) = UINT8];
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // int32 cw_limit = 3 [(.goldo.pb2_options.cpp_type) = UINT16];
  void clear_cw_limit();
  static const int kCwLimitFieldNumber = 3;
  ::google::protobuf::int32 cw_limit() const;
  void set_cw_limit(::google::protobuf::int32 value);

  // int32 ccw_limit = 4 [(.goldo.pb2_options.cpp_type) = UINT16];
  void clear_ccw_limit();
  static const int kCcwLimitFieldNumber = 4;
  ::google::protobuf::int32 ccw_limit() const;
  void set_ccw_limit(::google::protobuf::int32 value);

  // int32 max_speed = 5 [(.goldo.pb2_options.cpp_type) = UINT16];
  void clear_max_speed();
  static const int kMaxSpeedFieldNumber = 5;
  ::google::protobuf::int32 max_speed() const;
  void set_max_speed(::google::protobuf::int32 value);

  // int32 max_torque = 6 [(.goldo.pb2_options.cpp_type) = UINT16];
  void clear_max_torque();
  static const int kMaxTorqueFieldNumber = 6;
  ::google::protobuf::int32 max_torque() const;
  void set_max_torque(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:goldo.nucleo.robot.ServoConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  int type_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 cw_limit_;
  ::google::protobuf::int32 ccw_limit_;
  ::google::protobuf::int32 max_speed_;
  ::google::protobuf::int32 max_torque_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_goldo_2fnucleo_2frobot_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ServosConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:goldo.nucleo.robot.ServosConfig) */ {
 public:
  ServosConfig();
  virtual ~ServosConfig();

  ServosConfig(const ServosConfig& from);

  inline ServosConfig& operator=(const ServosConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServosConfig(ServosConfig&& from) noexcept
    : ServosConfig() {
    *this = ::std::move(from);
  }

  inline ServosConfig& operator=(ServosConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServosConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServosConfig* internal_default_instance() {
    return reinterpret_cast<const ServosConfig*>(
               &_ServosConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(ServosConfig* other);
  friend void swap(ServosConfig& a, ServosConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServosConfig* New() const final {
    return CreateMaybeMessage<ServosConfig>(NULL);
  }

  ServosConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ServosConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ServosConfig& from);
  void MergeFrom(const ServosConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServosConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .goldo.nucleo.robot.ServoConfig servos = 1;
  int servos_size() const;
  void clear_servos();
  static const int kServosFieldNumber = 1;
  ::goldo::nucleo::robot::ServoConfig* mutable_servos(int index);
  ::google::protobuf::RepeatedPtrField< ::goldo::nucleo::robot::ServoConfig >*
      mutable_servos();
  const ::goldo::nucleo::robot::ServoConfig& servos(int index) const;
  ::goldo::nucleo::robot::ServoConfig* add_servos();
  const ::google::protobuf::RepeatedPtrField< ::goldo::nucleo::robot::ServoConfig >&
      servos() const;

  // @@protoc_insertion_point(class_scope:goldo.nucleo.robot.ServosConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::goldo::nucleo::robot::ServoConfig > servos_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_goldo_2fnucleo_2frobot_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RPLidarConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:goldo.nucleo.robot.RPLidarConfig) */ {
 public:
  RPLidarConfig();
  virtual ~RPLidarConfig();

  RPLidarConfig(const RPLidarConfig& from);

  inline RPLidarConfig& operator=(const RPLidarConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RPLidarConfig(RPLidarConfig&& from) noexcept
    : RPLidarConfig() {
    *this = ::std::move(from);
  }

  inline RPLidarConfig& operator=(RPLidarConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RPLidarConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RPLidarConfig* internal_default_instance() {
    return reinterpret_cast<const RPLidarConfig*>(
               &_RPLidarConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(RPLidarConfig* other);
  friend void swap(RPLidarConfig& a, RPLidarConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RPLidarConfig* New() const final {
    return CreateMaybeMessage<RPLidarConfig>(NULL);
  }

  RPLidarConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RPLidarConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RPLidarConfig& from);
  void MergeFrom(const RPLidarConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RPLidarConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .goldo.rplidar.Tresholds tresholds = 2;
  bool has_tresholds() const;
  void clear_tresholds();
  static const int kTresholdsFieldNumber = 2;
  private:
  const ::goldo::rplidar::Tresholds& _internal_tresholds() const;
  public:
  const ::goldo::rplidar::Tresholds& tresholds() const;
  ::goldo::rplidar::Tresholds* release_tresholds();
  ::goldo::rplidar::Tresholds* mutable_tresholds();
  void set_allocated_tresholds(::goldo::rplidar::Tresholds* tresholds);

  // float theta_offset = 1;
  void clear_theta_offset();
  static const int kThetaOffsetFieldNumber = 1;
  float theta_offset() const;
  void set_theta_offset(float value);

  // @@protoc_insertion_point(class_scope:goldo.nucleo.robot.RPLidarConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::goldo::rplidar::Tresholds* tresholds_;
  float theta_offset_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_goldo_2fnucleo_2frobot_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ConfigLoadBegin

// uint32 size = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
inline void ConfigLoadBegin::clear_size() {
  size_ = 0u;
}
inline ::google::protobuf::uint32 ConfigLoadBegin::size() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.robot.ConfigLoadBegin.size)
  return size_;
}
inline void ConfigLoadBegin::set_size(::google::protobuf::uint32 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:goldo.nucleo.robot.ConfigLoadBegin.size)
}

// -------------------------------------------------------------------

// ConfigLoadChunk

// bytes data = 1;
inline void ConfigLoadChunk::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConfigLoadChunk::data() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.robot.ConfigLoadChunk.data)
  return data_.GetNoArena();
}
inline void ConfigLoadChunk::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:goldo.nucleo.robot.ConfigLoadChunk.data)
}
#if LANG_CXX11
inline void ConfigLoadChunk::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:goldo.nucleo.robot.ConfigLoadChunk.data)
}
#endif
inline void ConfigLoadChunk::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:goldo.nucleo.robot.ConfigLoadChunk.data)
}
inline void ConfigLoadChunk::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:goldo.nucleo.robot.ConfigLoadChunk.data)
}
inline ::std::string* ConfigLoadChunk::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:goldo.nucleo.robot.ConfigLoadChunk.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConfigLoadChunk::release_data() {
  // @@protoc_insertion_point(field_release:goldo.nucleo.robot.ConfigLoadChunk.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConfigLoadChunk::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:goldo.nucleo.robot.ConfigLoadChunk.data)
}

// -------------------------------------------------------------------

// ConfigLoadEnd

// uint32 crc = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
inline void ConfigLoadEnd::clear_crc() {
  crc_ = 0u;
}
inline ::google::protobuf::uint32 ConfigLoadEnd::crc() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.robot.ConfigLoadEnd.crc)
  return crc_;
}
inline void ConfigLoadEnd::set_crc(::google::protobuf::uint32 value) {
  
  crc_ = value;
  // @@protoc_insertion_point(field_set:goldo.nucleo.robot.ConfigLoadEnd.crc)
}

// -------------------------------------------------------------------

// ConfigLoadStatus

// .goldo.nucleo.robot.ConfigLoadStatus.Status status = 1 [(.goldo.pb2_options.cpp_type) = UINT8];
inline void ConfigLoadStatus::clear_status() {
  status_ = 0;
}
inline ::goldo::nucleo::robot::ConfigLoadStatus_Status ConfigLoadStatus::status() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.robot.ConfigLoadStatus.status)
  return static_cast< ::goldo::nucleo::robot::ConfigLoadStatus_Status >(status_);
}
inline void ConfigLoadStatus::set_status(::goldo::nucleo::robot::ConfigLoadStatus_Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:goldo.nucleo.robot.ConfigLoadStatus.status)
}

// -------------------------------------------------------------------

// ServoConfig

// .goldo.nucleo.robot.ServoType type = 1 [(.goldo.pb2_options.cpp_type) = UINT8];
inline void ServoConfig::clear_type() {
  type_ = 0;
}
inline ::goldo::nucleo::robot::ServoType ServoConfig::type() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.robot.ServoConfig.type)
  return static_cast< ::goldo::nucleo::robot::ServoType >(type_);
}
inline void ServoConfig::set_type(::goldo::nucleo::robot::ServoType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:goldo.nucleo.robot.ServoConfig.type)
}

// int32 id = 2 [(.goldo.pb2_options.cpp_type) = UINT8];
inline void ServoConfig::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 ServoConfig::id() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.robot.ServoConfig.id)
  return id_;
}
inline void ServoConfig::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:goldo.nucleo.robot.ServoConfig.id)
}

// int32 cw_limit = 3 [(.goldo.pb2_options.cpp_type) = UINT16];
inline void ServoConfig::clear_cw_limit() {
  cw_limit_ = 0;
}
inline ::google::protobuf::int32 ServoConfig::cw_limit() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.robot.ServoConfig.cw_limit)
  return cw_limit_;
}
inline void ServoConfig::set_cw_limit(::google::protobuf::int32 value) {
  
  cw_limit_ = value;
  // @@protoc_insertion_point(field_set:goldo.nucleo.robot.ServoConfig.cw_limit)
}

// int32 ccw_limit = 4 [(.goldo.pb2_options.cpp_type) = UINT16];
inline void ServoConfig::clear_ccw_limit() {
  ccw_limit_ = 0;
}
inline ::google::protobuf::int32 ServoConfig::ccw_limit() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.robot.ServoConfig.ccw_limit)
  return ccw_limit_;
}
inline void ServoConfig::set_ccw_limit(::google::protobuf::int32 value) {
  
  ccw_limit_ = value;
  // @@protoc_insertion_point(field_set:goldo.nucleo.robot.ServoConfig.ccw_limit)
}

// int32 max_speed = 5 [(.goldo.pb2_options.cpp_type) = UINT16];
inline void ServoConfig::clear_max_speed() {
  max_speed_ = 0;
}
inline ::google::protobuf::int32 ServoConfig::max_speed() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.robot.ServoConfig.max_speed)
  return max_speed_;
}
inline void ServoConfig::set_max_speed(::google::protobuf::int32 value) {
  
  max_speed_ = value;
  // @@protoc_insertion_point(field_set:goldo.nucleo.robot.ServoConfig.max_speed)
}

// int32 max_torque = 6 [(.goldo.pb2_options.cpp_type) = UINT16];
inline void ServoConfig::clear_max_torque() {
  max_torque_ = 0;
}
inline ::google::protobuf::int32 ServoConfig::max_torque() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.robot.ServoConfig.max_torque)
  return max_torque_;
}
inline void ServoConfig::set_max_torque(::google::protobuf::int32 value) {
  
  max_torque_ = value;
  // @@protoc_insertion_point(field_set:goldo.nucleo.robot.ServoConfig.max_torque)
}

// string name = 64 [(.goldo.pb2_options.cpp_type) = VOID];
inline void ServoConfig::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServoConfig::name() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.robot.ServoConfig.name)
  return name_.GetNoArena();
}
inline void ServoConfig::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:goldo.nucleo.robot.ServoConfig.name)
}
#if LANG_CXX11
inline void ServoConfig::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:goldo.nucleo.robot.ServoConfig.name)
}
#endif
inline void ServoConfig::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:goldo.nucleo.robot.ServoConfig.name)
}
inline void ServoConfig::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:goldo.nucleo.robot.ServoConfig.name)
}
inline ::std::string* ServoConfig::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:goldo.nucleo.robot.ServoConfig.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServoConfig::release_name() {
  // @@protoc_insertion_point(field_release:goldo.nucleo.robot.ServoConfig.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServoConfig::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:goldo.nucleo.robot.ServoConfig.name)
}

// -------------------------------------------------------------------

// ServosConfig

// repeated .goldo.nucleo.robot.ServoConfig servos = 1;
inline int ServosConfig::servos_size() const {
  return servos_.size();
}
inline void ServosConfig::clear_servos() {
  servos_.Clear();
}
inline ::goldo::nucleo::robot::ServoConfig* ServosConfig::mutable_servos(int index) {
  // @@protoc_insertion_point(field_mutable:goldo.nucleo.robot.ServosConfig.servos)
  return servos_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::goldo::nucleo::robot::ServoConfig >*
ServosConfig::mutable_servos() {
  // @@protoc_insertion_point(field_mutable_list:goldo.nucleo.robot.ServosConfig.servos)
  return &servos_;
}
inline const ::goldo::nucleo::robot::ServoConfig& ServosConfig::servos(int index) const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.robot.ServosConfig.servos)
  return servos_.Get(index);
}
inline ::goldo::nucleo::robot::ServoConfig* ServosConfig::add_servos() {
  // @@protoc_insertion_point(field_add:goldo.nucleo.robot.ServosConfig.servos)
  return servos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::goldo::nucleo::robot::ServoConfig >&
ServosConfig::servos() const {
  // @@protoc_insertion_point(field_list:goldo.nucleo.robot.ServosConfig.servos)
  return servos_;
}

// -------------------------------------------------------------------

// RPLidarConfig

// float theta_offset = 1;
inline void RPLidarConfig::clear_theta_offset() {
  theta_offset_ = 0;
}
inline float RPLidarConfig::theta_offset() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.robot.RPLidarConfig.theta_offset)
  return theta_offset_;
}
inline void RPLidarConfig::set_theta_offset(float value) {
  
  theta_offset_ = value;
  // @@protoc_insertion_point(field_set:goldo.nucleo.robot.RPLidarConfig.theta_offset)
}

// .goldo.rplidar.Tresholds tresholds = 2;
inline bool RPLidarConfig::has_tresholds() const {
  return this != internal_default_instance() && tresholds_ != NULL;
}
inline const ::goldo::rplidar::Tresholds& RPLidarConfig::_internal_tresholds() const {
  return *tresholds_;
}
inline const ::goldo::rplidar::Tresholds& RPLidarConfig::tresholds() const {
  const ::goldo::rplidar::Tresholds* p = tresholds_;
  // @@protoc_insertion_point(field_get:goldo.nucleo.robot.RPLidarConfig.tresholds)
  return p != NULL ? *p : *reinterpret_cast<const ::goldo::rplidar::Tresholds*>(
      &::goldo::rplidar::_Tresholds_default_instance_);
}
inline ::goldo::rplidar::Tresholds* RPLidarConfig::release_tresholds() {
  // @@protoc_insertion_point(field_release:goldo.nucleo.robot.RPLidarConfig.tresholds)
  
  ::goldo::rplidar::Tresholds* temp = tresholds_;
  tresholds_ = NULL;
  return temp;
}
inline ::goldo::rplidar::Tresholds* RPLidarConfig::mutable_tresholds() {
  
  if (tresholds_ == NULL) {
    auto* p = CreateMaybeMessage<::goldo::rplidar::Tresholds>(GetArenaNoVirtual());
    tresholds_ = p;
  }
  // @@protoc_insertion_point(field_mutable:goldo.nucleo.robot.RPLidarConfig.tresholds)
  return tresholds_;
}
inline void RPLidarConfig::set_allocated_tresholds(::goldo::rplidar::Tresholds* tresholds) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(tresholds_);
  }
  if (tresholds) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tresholds = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tresholds, submessage_arena);
    }
    
  } else {
    
  }
  tresholds_ = tresholds;
  // @@protoc_insertion_point(field_set_allocated:goldo.nucleo.robot.RPLidarConfig.tresholds)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace robot
}  // namespace nucleo
}  // namespace goldo

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::goldo::nucleo::robot::ConfigLoadStatus_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::goldo::nucleo::robot::ConfigLoadStatus_Status>() {
  return ::goldo::nucleo::robot::ConfigLoadStatus_Status_descriptor();
}
template <> struct is_proto_enum< ::goldo::nucleo::robot::ServoType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::goldo::nucleo::robot::ServoType>() {
  return ::goldo::nucleo::robot::ServoType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_goldo_2fnucleo_2frobot_2eproto
