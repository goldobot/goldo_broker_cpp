// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: goldo/nucleo/odometry.proto

#include "goldo/nucleo/odometry.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace goldo {
namespace nucleo {
namespace odometry {
class OdometryConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OdometryConfig>
      _instance;
} _OdometryConfig_default_instance_;
}  // namespace odometry
}  // namespace nucleo
}  // namespace goldo
namespace protobuf_goldo_2fnucleo_2fodometry_2eproto {
static void InitDefaultsOdometryConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::goldo::nucleo::odometry::_OdometryConfig_default_instance_;
    new (ptr) ::goldo::nucleo::odometry::OdometryConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::goldo::nucleo::odometry::OdometryConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_OdometryConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOdometryConfig}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_OdometryConfig.base);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::odometry::OdometryConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::odometry::OdometryConfig, dist_per_count_left_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::odometry::OdometryConfig, dist_per_count_right_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::odometry::OdometryConfig, wheel_distance_left_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::odometry::OdometryConfig, wheel_distance_right_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::odometry::OdometryConfig, speed_filter_frequency_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::odometry::OdometryConfig, accel_filter_frequency_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::goldo::nucleo::odometry::OdometryConfig)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::goldo::nucleo::odometry::_OdometryConfig_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "goldo/nucleo/odometry.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\033goldo/nucleo/odometry.proto\022\025goldo.nuc"
      "leo.odometry\032\027goldo/pb2_options.proto\"\306\001"
      "\n\016OdometryConfig\022\033\n\023dist_per_count_left\030"
      "\001 \001(\002\022\034\n\024dist_per_count_right\030\002 \001(\002\022\033\n\023w"
      "heel_distance_left\030\003 \001(\002\022\034\n\024wheel_distan"
      "ce_right\030\004 \001(\002\022\036\n\026speed_filter_frequency"
      "\030\005 \001(\002\022\036\n\026accel_filter_frequency\030\006 \001(\002b\006"
      "proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 286);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "goldo/nucleo/odometry.proto", &protobuf_RegisterTypes);
  ::protobuf_goldo_2fpb2_5foptions_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_goldo_2fnucleo_2fodometry_2eproto
namespace goldo {
namespace nucleo {
namespace odometry {

// ===================================================================

void OdometryConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OdometryConfig::kDistPerCountLeftFieldNumber;
const int OdometryConfig::kDistPerCountRightFieldNumber;
const int OdometryConfig::kWheelDistanceLeftFieldNumber;
const int OdometryConfig::kWheelDistanceRightFieldNumber;
const int OdometryConfig::kSpeedFilterFrequencyFieldNumber;
const int OdometryConfig::kAccelFilterFrequencyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OdometryConfig::OdometryConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_goldo_2fnucleo_2fodometry_2eproto::scc_info_OdometryConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:goldo.nucleo.odometry.OdometryConfig)
}
OdometryConfig::OdometryConfig(const OdometryConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&dist_per_count_left_, &from.dist_per_count_left_,
    static_cast<size_t>(reinterpret_cast<char*>(&accel_filter_frequency_) -
    reinterpret_cast<char*>(&dist_per_count_left_)) + sizeof(accel_filter_frequency_));
  // @@protoc_insertion_point(copy_constructor:goldo.nucleo.odometry.OdometryConfig)
}

void OdometryConfig::SharedCtor() {
  ::memset(&dist_per_count_left_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&accel_filter_frequency_) -
      reinterpret_cast<char*>(&dist_per_count_left_)) + sizeof(accel_filter_frequency_));
}

OdometryConfig::~OdometryConfig() {
  // @@protoc_insertion_point(destructor:goldo.nucleo.odometry.OdometryConfig)
  SharedDtor();
}

void OdometryConfig::SharedDtor() {
}

void OdometryConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OdometryConfig::descriptor() {
  ::protobuf_goldo_2fnucleo_2fodometry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2fnucleo_2fodometry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OdometryConfig& OdometryConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_goldo_2fnucleo_2fodometry_2eproto::scc_info_OdometryConfig.base);
  return *internal_default_instance();
}


void OdometryConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:goldo.nucleo.odometry.OdometryConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&dist_per_count_left_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&accel_filter_frequency_) -
      reinterpret_cast<char*>(&dist_per_count_left_)) + sizeof(accel_filter_frequency_));
  _internal_metadata_.Clear();
}

bool OdometryConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:goldo.nucleo.odometry.OdometryConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float dist_per_count_left = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dist_per_count_left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float dist_per_count_right = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dist_per_count_right_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float wheel_distance_left = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &wheel_distance_left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float wheel_distance_right = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &wheel_distance_right_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float speed_filter_frequency = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_filter_frequency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float accel_filter_frequency = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &accel_filter_frequency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:goldo.nucleo.odometry.OdometryConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:goldo.nucleo.odometry.OdometryConfig)
  return false;
#undef DO_
}

void OdometryConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:goldo.nucleo.odometry.OdometryConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float dist_per_count_left = 1;
  if (this->dist_per_count_left() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->dist_per_count_left(), output);
  }

  // float dist_per_count_right = 2;
  if (this->dist_per_count_right() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->dist_per_count_right(), output);
  }

  // float wheel_distance_left = 3;
  if (this->wheel_distance_left() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->wheel_distance_left(), output);
  }

  // float wheel_distance_right = 4;
  if (this->wheel_distance_right() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->wheel_distance_right(), output);
  }

  // float speed_filter_frequency = 5;
  if (this->speed_filter_frequency() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->speed_filter_frequency(), output);
  }

  // float accel_filter_frequency = 6;
  if (this->accel_filter_frequency() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->accel_filter_frequency(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:goldo.nucleo.odometry.OdometryConfig)
}

::google::protobuf::uint8* OdometryConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:goldo.nucleo.odometry.OdometryConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float dist_per_count_left = 1;
  if (this->dist_per_count_left() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->dist_per_count_left(), target);
  }

  // float dist_per_count_right = 2;
  if (this->dist_per_count_right() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->dist_per_count_right(), target);
  }

  // float wheel_distance_left = 3;
  if (this->wheel_distance_left() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->wheel_distance_left(), target);
  }

  // float wheel_distance_right = 4;
  if (this->wheel_distance_right() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->wheel_distance_right(), target);
  }

  // float speed_filter_frequency = 5;
  if (this->speed_filter_frequency() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->speed_filter_frequency(), target);
  }

  // float accel_filter_frequency = 6;
  if (this->accel_filter_frequency() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->accel_filter_frequency(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:goldo.nucleo.odometry.OdometryConfig)
  return target;
}

size_t OdometryConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:goldo.nucleo.odometry.OdometryConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float dist_per_count_left = 1;
  if (this->dist_per_count_left() != 0) {
    total_size += 1 + 4;
  }

  // float dist_per_count_right = 2;
  if (this->dist_per_count_right() != 0) {
    total_size += 1 + 4;
  }

  // float wheel_distance_left = 3;
  if (this->wheel_distance_left() != 0) {
    total_size += 1 + 4;
  }

  // float wheel_distance_right = 4;
  if (this->wheel_distance_right() != 0) {
    total_size += 1 + 4;
  }

  // float speed_filter_frequency = 5;
  if (this->speed_filter_frequency() != 0) {
    total_size += 1 + 4;
  }

  // float accel_filter_frequency = 6;
  if (this->accel_filter_frequency() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OdometryConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:goldo.nucleo.odometry.OdometryConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const OdometryConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OdometryConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:goldo.nucleo.odometry.OdometryConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:goldo.nucleo.odometry.OdometryConfig)
    MergeFrom(*source);
  }
}

void OdometryConfig::MergeFrom(const OdometryConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:goldo.nucleo.odometry.OdometryConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dist_per_count_left() != 0) {
    set_dist_per_count_left(from.dist_per_count_left());
  }
  if (from.dist_per_count_right() != 0) {
    set_dist_per_count_right(from.dist_per_count_right());
  }
  if (from.wheel_distance_left() != 0) {
    set_wheel_distance_left(from.wheel_distance_left());
  }
  if (from.wheel_distance_right() != 0) {
    set_wheel_distance_right(from.wheel_distance_right());
  }
  if (from.speed_filter_frequency() != 0) {
    set_speed_filter_frequency(from.speed_filter_frequency());
  }
  if (from.accel_filter_frequency() != 0) {
    set_accel_filter_frequency(from.accel_filter_frequency());
  }
}

void OdometryConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:goldo.nucleo.odometry.OdometryConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OdometryConfig::CopyFrom(const OdometryConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:goldo.nucleo.odometry.OdometryConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OdometryConfig::IsInitialized() const {
  return true;
}

void OdometryConfig::Swap(OdometryConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OdometryConfig::InternalSwap(OdometryConfig* other) {
  using std::swap;
  swap(dist_per_count_left_, other->dist_per_count_left_);
  swap(dist_per_count_right_, other->dist_per_count_right_);
  swap(wheel_distance_left_, other->wheel_distance_left_);
  swap(wheel_distance_right_, other->wheel_distance_right_);
  swap(speed_filter_frequency_, other->speed_filter_frequency_);
  swap(accel_filter_frequency_, other->accel_filter_frequency_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OdometryConfig::GetMetadata() const {
  protobuf_goldo_2fnucleo_2fodometry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2fnucleo_2fodometry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace odometry
}  // namespace nucleo
}  // namespace goldo
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::goldo::nucleo::odometry::OdometryConfig* Arena::CreateMaybeMessage< ::goldo::nucleo::odometry::OdometryConfig >(Arena* arena) {
  return Arena::CreateInternal< ::goldo::nucleo::odometry::OdometryConfig >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
