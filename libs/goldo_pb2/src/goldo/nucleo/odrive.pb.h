// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: goldo/nucleo/odrive.proto

#ifndef PROTOBUF_INCLUDED_goldo_2fnucleo_2fodrive_2eproto
#define PROTOBUF_INCLUDED_goldo_2fnucleo_2fodrive_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "goldo/pb2_options.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_goldo_2fnucleo_2fodrive_2eproto 

namespace protobuf_goldo_2fnucleo_2fodrive_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[11];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_goldo_2fnucleo_2fodrive_2eproto
namespace goldo {
namespace nucleo {
namespace odrive {
class AxisErrorState;
class AxisErrorStateDefaultTypeInternal;
extern AxisErrorStateDefaultTypeInternal _AxisErrorState_default_instance_;
class AxisErrorStates;
class AxisErrorStatesDefaultTypeInternal;
extern AxisErrorStatesDefaultTypeInternal _AxisErrorStates_default_instance_;
class AxisState_;
class AxisState_DefaultTypeInternal;
extern AxisState_DefaultTypeInternal _AxisState__default_instance_;
class AxisStates;
class AxisStatesDefaultTypeInternal;
extern AxisStatesDefaultTypeInternal _AxisStates_default_instance_;
class AxisStatus;
class AxisStatusDefaultTypeInternal;
extern AxisStatusDefaultTypeInternal _AxisStatus_default_instance_;
class AxisTelemetry;
class AxisTelemetryDefaultTypeInternal;
extern AxisTelemetryDefaultTypeInternal _AxisTelemetry_default_instance_;
class ClientStatistics;
class ClientStatisticsDefaultTypeInternal;
extern ClientStatisticsDefaultTypeInternal _ClientStatistics_default_instance_;
class ODriveStatus;
class ODriveStatusDefaultTypeInternal;
extern ODriveStatusDefaultTypeInternal _ODriveStatus_default_instance_;
class RequestPacket;
class RequestPacketDefaultTypeInternal;
extern RequestPacketDefaultTypeInternal _RequestPacket_default_instance_;
class ResponsePacket;
class ResponsePacketDefaultTypeInternal;
extern ResponsePacketDefaultTypeInternal _ResponsePacket_default_instance_;
class Telemetry;
class TelemetryDefaultTypeInternal;
extern TelemetryDefaultTypeInternal _Telemetry_default_instance_;
}  // namespace odrive
}  // namespace nucleo
}  // namespace goldo
namespace google {
namespace protobuf {
template<> ::goldo::nucleo::odrive::AxisErrorState* Arena::CreateMaybeMessage<::goldo::nucleo::odrive::AxisErrorState>(Arena*);
template<> ::goldo::nucleo::odrive::AxisErrorStates* Arena::CreateMaybeMessage<::goldo::nucleo::odrive::AxisErrorStates>(Arena*);
template<> ::goldo::nucleo::odrive::AxisState_* Arena::CreateMaybeMessage<::goldo::nucleo::odrive::AxisState_>(Arena*);
template<> ::goldo::nucleo::odrive::AxisStates* Arena::CreateMaybeMessage<::goldo::nucleo::odrive::AxisStates>(Arena*);
template<> ::goldo::nucleo::odrive::AxisStatus* Arena::CreateMaybeMessage<::goldo::nucleo::odrive::AxisStatus>(Arena*);
template<> ::goldo::nucleo::odrive::AxisTelemetry* Arena::CreateMaybeMessage<::goldo::nucleo::odrive::AxisTelemetry>(Arena*);
template<> ::goldo::nucleo::odrive::ClientStatistics* Arena::CreateMaybeMessage<::goldo::nucleo::odrive::ClientStatistics>(Arena*);
template<> ::goldo::nucleo::odrive::ODriveStatus* Arena::CreateMaybeMessage<::goldo::nucleo::odrive::ODriveStatus>(Arena*);
template<> ::goldo::nucleo::odrive::RequestPacket* Arena::CreateMaybeMessage<::goldo::nucleo::odrive::RequestPacket>(Arena*);
template<> ::goldo::nucleo::odrive::ResponsePacket* Arena::CreateMaybeMessage<::goldo::nucleo::odrive::ResponsePacket>(Arena*);
template<> ::goldo::nucleo::odrive::Telemetry* Arena::CreateMaybeMessage<::goldo::nucleo::odrive::Telemetry>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace goldo {
namespace nucleo {
namespace odrive {

enum AxisState {
  UNDEFINED = 0,
  IDLE = 1,
  STARTUP_SEQUENCE = 2,
  FULL_CALIBRATION_SEQUENCE = 3,
  MOTOR_CALIBRATION = 4,
  SENSORLESS_CONTROL = 5,
  ENCODER_INDEX_SEARCH = 6,
  ENCODER_OFFSET_CALIBRATION = 7,
  CLOSED_LOOP_CONTROL = 8,
  LOCKIN_SPIN = 9,
  ENCODER_DIR_FIND = 10,
  HOMING = 11,
  AxisState_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  AxisState_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool AxisState_IsValid(int value);
const AxisState AxisState_MIN = UNDEFINED;
const AxisState AxisState_MAX = HOMING;
const int AxisState_ARRAYSIZE = AxisState_MAX + 1;

const ::google::protobuf::EnumDescriptor* AxisState_descriptor();
inline const ::std::string& AxisState_Name(AxisState value) {
  return ::google::protobuf::internal::NameOfEnum(
    AxisState_descriptor(), value);
}
inline bool AxisState_Parse(
    const ::std::string& name, AxisState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AxisState>(
    AxisState_descriptor(), name, value);
}
enum ControlMode {
  VOLTAGE_CONTROL = 0,
  TORQUE_CONTROL = 1,
  VELOCITY_CONTROL = 2,
  POSITION_CONTROL = 3,
  ControlMode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ControlMode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ControlMode_IsValid(int value);
const ControlMode ControlMode_MIN = VOLTAGE_CONTROL;
const ControlMode ControlMode_MAX = POSITION_CONTROL;
const int ControlMode_ARRAYSIZE = ControlMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ControlMode_descriptor();
inline const ::std::string& ControlMode_Name(ControlMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ControlMode_descriptor(), value);
}
inline bool ControlMode_Parse(
    const ::std::string& name, ControlMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ControlMode>(
    ControlMode_descriptor(), name, value);
}
// ===================================================================

class RequestPacket : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:goldo.nucleo.odrive.RequestPacket) */ {
 public:
  RequestPacket();
  virtual ~RequestPacket();

  RequestPacket(const RequestPacket& from);

  inline RequestPacket& operator=(const RequestPacket& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RequestPacket(RequestPacket&& from) noexcept
    : RequestPacket() {
    *this = ::std::move(from);
  }

  inline RequestPacket& operator=(RequestPacket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestPacket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestPacket* internal_default_instance() {
    return reinterpret_cast<const RequestPacket*>(
               &_RequestPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(RequestPacket* other);
  friend void swap(RequestPacket& a, RequestPacket& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RequestPacket* New() const final {
    return CreateMaybeMessage<RequestPacket>(NULL);
  }

  RequestPacket* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RequestPacket>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RequestPacket& from);
  void MergeFrom(const RequestPacket& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestPacket* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes payload = 4;
  void clear_payload();
  static const int kPayloadFieldNumber = 4;
  const ::std::string& payload() const;
  void set_payload(const ::std::string& value);
  #if LANG_CXX11
  void set_payload(::std::string&& value);
  #endif
  void set_payload(const char* value);
  void set_payload(const void* value, size_t size);
  ::std::string* mutable_payload();
  ::std::string* release_payload();
  void set_allocated_payload(::std::string* payload);

  // uint32 sequence_number = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
  void clear_sequence_number();
  static const int kSequenceNumberFieldNumber = 1;
  ::google::protobuf::uint32 sequence_number() const;
  void set_sequence_number(::google::protobuf::uint32 value);

  // uint32 endpoint_id = 2 [(.goldo.pb2_options.cpp_type) = UINT16];
  void clear_endpoint_id();
  static const int kEndpointIdFieldNumber = 2;
  ::google::protobuf::uint32 endpoint_id() const;
  void set_endpoint_id(::google::protobuf::uint32 value);

  // uint32 expected_response_size = 3 [(.goldo.pb2_options.cpp_type) = UINT16];
  void clear_expected_response_size();
  static const int kExpectedResponseSizeFieldNumber = 3;
  ::google::protobuf::uint32 expected_response_size() const;
  void set_expected_response_size(::google::protobuf::uint32 value);

  // uint32 protocol_version = 5 [(.goldo.pb2_options.cpp_type) = UINT16];
  void clear_protocol_version();
  static const int kProtocolVersionFieldNumber = 5;
  ::google::protobuf::uint32 protocol_version() const;
  void set_protocol_version(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:goldo.nucleo.odrive.RequestPacket)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr payload_;
  ::google::protobuf::uint32 sequence_number_;
  ::google::protobuf::uint32 endpoint_id_;
  ::google::protobuf::uint32 expected_response_size_;
  ::google::protobuf::uint32 protocol_version_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_goldo_2fnucleo_2fodrive_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResponsePacket : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:goldo.nucleo.odrive.ResponsePacket) */ {
 public:
  ResponsePacket();
  virtual ~ResponsePacket();

  ResponsePacket(const ResponsePacket& from);

  inline ResponsePacket& operator=(const ResponsePacket& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResponsePacket(ResponsePacket&& from) noexcept
    : ResponsePacket() {
    *this = ::std::move(from);
  }

  inline ResponsePacket& operator=(ResponsePacket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ResponsePacket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResponsePacket* internal_default_instance() {
    return reinterpret_cast<const ResponsePacket*>(
               &_ResponsePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ResponsePacket* other);
  friend void swap(ResponsePacket& a, ResponsePacket& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResponsePacket* New() const final {
    return CreateMaybeMessage<ResponsePacket>(NULL);
  }

  ResponsePacket* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResponsePacket>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ResponsePacket& from);
  void MergeFrom(const ResponsePacket& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponsePacket* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes payload = 4;
  void clear_payload();
  static const int kPayloadFieldNumber = 4;
  const ::std::string& payload() const;
  void set_payload(const ::std::string& value);
  #if LANG_CXX11
  void set_payload(::std::string&& value);
  #endif
  void set_payload(const char* value);
  void set_payload(const void* value, size_t size);
  ::std::string* mutable_payload();
  ::std::string* release_payload();
  void set_allocated_payload(::std::string* payload);

  // uint32 sequence_number = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
  void clear_sequence_number();
  static const int kSequenceNumberFieldNumber = 1;
  ::google::protobuf::uint32 sequence_number() const;
  void set_sequence_number(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:goldo.nucleo.odrive.ResponsePacket)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr payload_;
  ::google::protobuf::uint32 sequence_number_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_goldo_2fnucleo_2fodrive_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AxisTelemetry : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:goldo.nucleo.odrive.AxisTelemetry) */ {
 public:
  AxisTelemetry();
  virtual ~AxisTelemetry();

  AxisTelemetry(const AxisTelemetry& from);

  inline AxisTelemetry& operator=(const AxisTelemetry& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AxisTelemetry(AxisTelemetry&& from) noexcept
    : AxisTelemetry() {
    *this = ::std::move(from);
  }

  inline AxisTelemetry& operator=(AxisTelemetry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AxisTelemetry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AxisTelemetry* internal_default_instance() {
    return reinterpret_cast<const AxisTelemetry*>(
               &_AxisTelemetry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(AxisTelemetry* other);
  friend void swap(AxisTelemetry& a, AxisTelemetry& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AxisTelemetry* New() const final {
    return CreateMaybeMessage<AxisTelemetry>(NULL);
  }

  AxisTelemetry* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AxisTelemetry>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AxisTelemetry& from);
  void MergeFrom(const AxisTelemetry& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AxisTelemetry* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float pos_estimate = 1;
  void clear_pos_estimate();
  static const int kPosEstimateFieldNumber = 1;
  float pos_estimate() const;
  void set_pos_estimate(float value);

  // float vel_estimate = 2;
  void clear_vel_estimate();
  static const int kVelEstimateFieldNumber = 2;
  float vel_estimate() const;
  void set_vel_estimate(float value);

  // float current_iq_setpoint = 3;
  void clear_current_iq_setpoint();
  static const int kCurrentIqSetpointFieldNumber = 3;
  float current_iq_setpoint() const;
  void set_current_iq_setpoint(float value);

  // @@protoc_insertion_point(class_scope:goldo.nucleo.odrive.AxisTelemetry)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float pos_estimate_;
  float vel_estimate_;
  float current_iq_setpoint_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_goldo_2fnucleo_2fodrive_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AxisErrorState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:goldo.nucleo.odrive.AxisErrorState) */ {
 public:
  AxisErrorState();
  virtual ~AxisErrorState();

  AxisErrorState(const AxisErrorState& from);

  inline AxisErrorState& operator=(const AxisErrorState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AxisErrorState(AxisErrorState&& from) noexcept
    : AxisErrorState() {
    *this = ::std::move(from);
  }

  inline AxisErrorState& operator=(AxisErrorState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AxisErrorState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AxisErrorState* internal_default_instance() {
    return reinterpret_cast<const AxisErrorState*>(
               &_AxisErrorState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(AxisErrorState* other);
  friend void swap(AxisErrorState& a, AxisErrorState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AxisErrorState* New() const final {
    return CreateMaybeMessage<AxisErrorState>(NULL);
  }

  AxisErrorState* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AxisErrorState>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AxisErrorState& from);
  void MergeFrom(const AxisErrorState& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AxisErrorState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 axis = 1 [(.goldo.pb2_options.cpp_type) = UINT32];
  void clear_axis();
  static const int kAxisFieldNumber = 1;
  ::google::protobuf::uint32 axis() const;
  void set_axis(::google::protobuf::uint32 value);

  // uint32 motor = 2 [(.goldo.pb2_options.cpp_type) = UINT32];
  void clear_motor();
  static const int kMotorFieldNumber = 2;
  ::google::protobuf::uint32 motor() const;
  void set_motor(::google::protobuf::uint32 value);

  // uint32 controller = 3 [(.goldo.pb2_options.cpp_type) = UINT32];
  void clear_controller();
  static const int kControllerFieldNumber = 3;
  ::google::protobuf::uint32 controller() const;
  void set_controller(::google::protobuf::uint32 value);

  // uint32 encoder = 4 [(.goldo.pb2_options.cpp_type) = UINT32];
  void clear_encoder();
  static const int kEncoderFieldNumber = 4;
  ::google::protobuf::uint32 encoder() const;
  void set_encoder(::google::protobuf::uint32 value);

  // uint32 sensorless_estimator = 5 [(.goldo.pb2_options.cpp_type) = UINT32];
  void clear_sensorless_estimator();
  static const int kSensorlessEstimatorFieldNumber = 5;
  ::google::protobuf::uint32 sensorless_estimator() const;
  void set_sensorless_estimator(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:goldo.nucleo.odrive.AxisErrorState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 axis_;
  ::google::protobuf::uint32 motor_;
  ::google::protobuf::uint32 controller_;
  ::google::protobuf::uint32 encoder_;
  ::google::protobuf::uint32 sensorless_estimator_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_goldo_2fnucleo_2fodrive_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AxisState_ : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:goldo.nucleo.odrive.AxisState_) */ {
 public:
  AxisState_();
  virtual ~AxisState_();

  AxisState_(const AxisState_& from);

  inline AxisState_& operator=(const AxisState_& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AxisState_(AxisState_&& from) noexcept
    : AxisState_() {
    *this = ::std::move(from);
  }

  inline AxisState_& operator=(AxisState_&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AxisState_& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AxisState_* internal_default_instance() {
    return reinterpret_cast<const AxisState_*>(
               &_AxisState__default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(AxisState_* other);
  friend void swap(AxisState_& a, AxisState_& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AxisState_* New() const final {
    return CreateMaybeMessage<AxisState_>(NULL);
  }

  AxisState_* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AxisState_>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AxisState_& from);
  void MergeFrom(const AxisState_& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AxisState_* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .goldo.nucleo.odrive.AxisState current_state = 1 [(.goldo.pb2_options.cpp_type) = UINT32];
  void clear_current_state();
  static const int kCurrentStateFieldNumber = 1;
  ::goldo::nucleo::odrive::AxisState current_state() const;
  void set_current_state(::goldo::nucleo::odrive::AxisState value);

  // .goldo.nucleo.odrive.AxisState requested_state = 2 [(.goldo.pb2_options.cpp_type) = UINT32];
  void clear_requested_state();
  static const int kRequestedStateFieldNumber = 2;
  ::goldo::nucleo::odrive::AxisState requested_state() const;
  void set_requested_state(::goldo::nucleo::odrive::AxisState value);

  // .goldo.nucleo.odrive.ControlMode control_mode = 3 [(.goldo.pb2_options.cpp_type) = UINT32];
  void clear_control_mode();
  static const int kControlModeFieldNumber = 3;
  ::goldo::nucleo::odrive::ControlMode control_mode() const;
  void set_control_mode(::goldo::nucleo::odrive::ControlMode value);

  // @@protoc_insertion_point(class_scope:goldo.nucleo.odrive.AxisState_)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int current_state_;
  int requested_state_;
  int control_mode_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_goldo_2fnucleo_2fodrive_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AxisErrorStates : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:goldo.nucleo.odrive.AxisErrorStates) */ {
 public:
  AxisErrorStates();
  virtual ~AxisErrorStates();

  AxisErrorStates(const AxisErrorStates& from);

  inline AxisErrorStates& operator=(const AxisErrorStates& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AxisErrorStates(AxisErrorStates&& from) noexcept
    : AxisErrorStates() {
    *this = ::std::move(from);
  }

  inline AxisErrorStates& operator=(AxisErrorStates&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AxisErrorStates& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AxisErrorStates* internal_default_instance() {
    return reinterpret_cast<const AxisErrorStates*>(
               &_AxisErrorStates_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(AxisErrorStates* other);
  friend void swap(AxisErrorStates& a, AxisErrorStates& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AxisErrorStates* New() const final {
    return CreateMaybeMessage<AxisErrorStates>(NULL);
  }

  AxisErrorStates* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AxisErrorStates>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AxisErrorStates& from);
  void MergeFrom(const AxisErrorStates& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AxisErrorStates* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .goldo.nucleo.odrive.AxisErrorState axis0 = 1;
  bool has_axis0() const;
  void clear_axis0();
  static const int kAxis0FieldNumber = 1;
  private:
  const ::goldo::nucleo::odrive::AxisErrorState& _internal_axis0() const;
  public:
  const ::goldo::nucleo::odrive::AxisErrorState& axis0() const;
  ::goldo::nucleo::odrive::AxisErrorState* release_axis0();
  ::goldo::nucleo::odrive::AxisErrorState* mutable_axis0();
  void set_allocated_axis0(::goldo::nucleo::odrive::AxisErrorState* axis0);

  // .goldo.nucleo.odrive.AxisErrorState axis1 = 2;
  bool has_axis1() const;
  void clear_axis1();
  static const int kAxis1FieldNumber = 2;
  private:
  const ::goldo::nucleo::odrive::AxisErrorState& _internal_axis1() const;
  public:
  const ::goldo::nucleo::odrive::AxisErrorState& axis1() const;
  ::goldo::nucleo::odrive::AxisErrorState* release_axis1();
  ::goldo::nucleo::odrive::AxisErrorState* mutable_axis1();
  void set_allocated_axis1(::goldo::nucleo::odrive::AxisErrorState* axis1);

  // @@protoc_insertion_point(class_scope:goldo.nucleo.odrive.AxisErrorStates)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::goldo::nucleo::odrive::AxisErrorState* axis0_;
  ::goldo::nucleo::odrive::AxisErrorState* axis1_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_goldo_2fnucleo_2fodrive_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AxisStates : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:goldo.nucleo.odrive.AxisStates) */ {
 public:
  AxisStates();
  virtual ~AxisStates();

  AxisStates(const AxisStates& from);

  inline AxisStates& operator=(const AxisStates& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AxisStates(AxisStates&& from) noexcept
    : AxisStates() {
    *this = ::std::move(from);
  }

  inline AxisStates& operator=(AxisStates&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AxisStates& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AxisStates* internal_default_instance() {
    return reinterpret_cast<const AxisStates*>(
               &_AxisStates_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(AxisStates* other);
  friend void swap(AxisStates& a, AxisStates& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AxisStates* New() const final {
    return CreateMaybeMessage<AxisStates>(NULL);
  }

  AxisStates* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AxisStates>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AxisStates& from);
  void MergeFrom(const AxisStates& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AxisStates* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .goldo.nucleo.odrive.AxisState_ axis0 = 1;
  bool has_axis0() const;
  void clear_axis0();
  static const int kAxis0FieldNumber = 1;
  private:
  const ::goldo::nucleo::odrive::AxisState_& _internal_axis0() const;
  public:
  const ::goldo::nucleo::odrive::AxisState_& axis0() const;
  ::goldo::nucleo::odrive::AxisState_* release_axis0();
  ::goldo::nucleo::odrive::AxisState_* mutable_axis0();
  void set_allocated_axis0(::goldo::nucleo::odrive::AxisState_* axis0);

  // .goldo.nucleo.odrive.AxisState_ axis1 = 2;
  bool has_axis1() const;
  void clear_axis1();
  static const int kAxis1FieldNumber = 2;
  private:
  const ::goldo::nucleo::odrive::AxisState_& _internal_axis1() const;
  public:
  const ::goldo::nucleo::odrive::AxisState_& axis1() const;
  ::goldo::nucleo::odrive::AxisState_* release_axis1();
  ::goldo::nucleo::odrive::AxisState_* mutable_axis1();
  void set_allocated_axis1(::goldo::nucleo::odrive::AxisState_* axis1);

  // @@protoc_insertion_point(class_scope:goldo.nucleo.odrive.AxisStates)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::goldo::nucleo::odrive::AxisState_* axis0_;
  ::goldo::nucleo::odrive::AxisState_* axis1_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_goldo_2fnucleo_2fodrive_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ClientStatistics : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:goldo.nucleo.odrive.ClientStatistics) */ {
 public:
  ClientStatistics();
  virtual ~ClientStatistics();

  ClientStatistics(const ClientStatistics& from);

  inline ClientStatistics& operator=(const ClientStatistics& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ClientStatistics(ClientStatistics&& from) noexcept
    : ClientStatistics() {
    *this = ::std::move(from);
  }

  inline ClientStatistics& operator=(ClientStatistics&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientStatistics& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientStatistics* internal_default_instance() {
    return reinterpret_cast<const ClientStatistics*>(
               &_ClientStatistics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(ClientStatistics* other);
  friend void swap(ClientStatistics& a, ClientStatistics& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClientStatistics* New() const final {
    return CreateMaybeMessage<ClientStatistics>(NULL);
  }

  ClientStatistics* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ClientStatistics>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ClientStatistics& from);
  void MergeFrom(const ClientStatistics& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientStatistics* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 max_latency = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
  void clear_max_latency();
  static const int kMaxLatencyFieldNumber = 1;
  ::google::protobuf::uint32 max_latency() const;
  void set_max_latency(::google::protobuf::uint32 value);

  // uint32 timeout_errors = 2 [(.goldo.pb2_options.cpp_type) = UINT16];
  void clear_timeout_errors();
  static const int kTimeoutErrorsFieldNumber = 2;
  ::google::protobuf::uint32 timeout_errors() const;
  void set_timeout_errors(::google::protobuf::uint32 value);

  // uint32 uptime = 3 [(.goldo.pb2_options.cpp_type) = UINT32];
  void clear_uptime();
  static const int kUptimeFieldNumber = 3;
  ::google::protobuf::uint32 uptime() const;
  void set_uptime(::google::protobuf::uint32 value);

  // bool synchronized = 4;
  void clear_synchronized();
  static const int kSynchronizedFieldNumber = 4;
  bool synchronized() const;
  void set_synchronized(bool value);

  // @@protoc_insertion_point(class_scope:goldo.nucleo.odrive.ClientStatistics)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 max_latency_;
  ::google::protobuf::uint32 timeout_errors_;
  ::google::protobuf::uint32 uptime_;
  bool synchronized_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_goldo_2fnucleo_2fodrive_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AxisStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:goldo.nucleo.odrive.AxisStatus) */ {
 public:
  AxisStatus();
  virtual ~AxisStatus();

  AxisStatus(const AxisStatus& from);

  inline AxisStatus& operator=(const AxisStatus& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AxisStatus(AxisStatus&& from) noexcept
    : AxisStatus() {
    *this = ::std::move(from);
  }

  inline AxisStatus& operator=(AxisStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AxisStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AxisStatus* internal_default_instance() {
    return reinterpret_cast<const AxisStatus*>(
               &_AxisStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(AxisStatus* other);
  friend void swap(AxisStatus& a, AxisStatus& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AxisStatus* New() const final {
    return CreateMaybeMessage<AxisStatus>(NULL);
  }

  AxisStatus* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AxisStatus>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AxisStatus& from);
  void MergeFrom(const AxisStatus& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AxisStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .goldo.nucleo.odrive.AxisErrorState errors = 4;
  bool has_errors() const;
  void clear_errors();
  static const int kErrorsFieldNumber = 4;
  private:
  const ::goldo::nucleo::odrive::AxisErrorState& _internal_errors() const;
  public:
  const ::goldo::nucleo::odrive::AxisErrorState& errors() const;
  ::goldo::nucleo::odrive::AxisErrorState* release_errors();
  ::goldo::nucleo::odrive::AxisErrorState* mutable_errors();
  void set_allocated_errors(::goldo::nucleo::odrive::AxisErrorState* errors);

  // .goldo.nucleo.odrive.AxisState current_state = 1;
  void clear_current_state();
  static const int kCurrentStateFieldNumber = 1;
  ::goldo::nucleo::odrive::AxisState current_state() const;
  void set_current_state(::goldo::nucleo::odrive::AxisState value);

  // .goldo.nucleo.odrive.AxisState requested_state = 2;
  void clear_requested_state();
  static const int kRequestedStateFieldNumber = 2;
  ::goldo::nucleo::odrive::AxisState requested_state() const;
  void set_requested_state(::goldo::nucleo::odrive::AxisState value);

  // .goldo.nucleo.odrive.ControlMode control_mode = 3;
  void clear_control_mode();
  static const int kControlModeFieldNumber = 3;
  ::goldo::nucleo::odrive::ControlMode control_mode() const;
  void set_control_mode(::goldo::nucleo::odrive::ControlMode value);

  // @@protoc_insertion_point(class_scope:goldo.nucleo.odrive.AxisStatus)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::goldo::nucleo::odrive::AxisErrorState* errors_;
  int current_state_;
  int requested_state_;
  int control_mode_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_goldo_2fnucleo_2fodrive_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Telemetry : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:goldo.nucleo.odrive.Telemetry) */ {
 public:
  Telemetry();
  virtual ~Telemetry();

  Telemetry(const Telemetry& from);

  inline Telemetry& operator=(const Telemetry& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Telemetry(Telemetry&& from) noexcept
    : Telemetry() {
    *this = ::std::move(from);
  }

  inline Telemetry& operator=(Telemetry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Telemetry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Telemetry* internal_default_instance() {
    return reinterpret_cast<const Telemetry*>(
               &_Telemetry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(Telemetry* other);
  friend void swap(Telemetry& a, Telemetry& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Telemetry* New() const final {
    return CreateMaybeMessage<Telemetry>(NULL);
  }

  Telemetry* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Telemetry>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Telemetry& from);
  void MergeFrom(const Telemetry& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Telemetry* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .goldo.nucleo.odrive.AxisTelemetry axis = 2 [(.goldo.pb2_options.max_count) = 2, (.goldo.pb2_options.fixed_count) = true];
  int axis_size() const;
  void clear_axis();
  static const int kAxisFieldNumber = 2;
  ::goldo::nucleo::odrive::AxisTelemetry* mutable_axis(int index);
  ::google::protobuf::RepeatedPtrField< ::goldo::nucleo::odrive::AxisTelemetry >*
      mutable_axis();
  const ::goldo::nucleo::odrive::AxisTelemetry& axis(int index) const;
  ::goldo::nucleo::odrive::AxisTelemetry* add_axis();
  const ::google::protobuf::RepeatedPtrField< ::goldo::nucleo::odrive::AxisTelemetry >&
      axis() const;

  // uint32 timestamp = 1 [(.goldo.pb2_options.cpp_type) = UINT32];
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  ::google::protobuf::uint32 timestamp() const;
  void set_timestamp(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:goldo.nucleo.odrive.Telemetry)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::goldo::nucleo::odrive::AxisTelemetry > axis_;
  ::google::protobuf::uint32 timestamp_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_goldo_2fnucleo_2fodrive_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ODriveStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:goldo.nucleo.odrive.ODriveStatus) */ {
 public:
  ODriveStatus();
  virtual ~ODriveStatus();

  ODriveStatus(const ODriveStatus& from);

  inline ODriveStatus& operator=(const ODriveStatus& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ODriveStatus(ODriveStatus&& from) noexcept
    : ODriveStatus() {
    *this = ::std::move(from);
  }

  inline ODriveStatus& operator=(ODriveStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ODriveStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ODriveStatus* internal_default_instance() {
    return reinterpret_cast<const ODriveStatus*>(
               &_ODriveStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(ODriveStatus* other);
  friend void swap(ODriveStatus& a, ODriveStatus& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ODriveStatus* New() const final {
    return CreateMaybeMessage<ODriveStatus>(NULL);
  }

  ODriveStatus* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ODriveStatus>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ODriveStatus& from);
  void MergeFrom(const ODriveStatus& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ODriveStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .goldo.nucleo.odrive.AxisStatus axis0 = 2;
  bool has_axis0() const;
  void clear_axis0();
  static const int kAxis0FieldNumber = 2;
  private:
  const ::goldo::nucleo::odrive::AxisStatus& _internal_axis0() const;
  public:
  const ::goldo::nucleo::odrive::AxisStatus& axis0() const;
  ::goldo::nucleo::odrive::AxisStatus* release_axis0();
  ::goldo::nucleo::odrive::AxisStatus* mutable_axis0();
  void set_allocated_axis0(::goldo::nucleo::odrive::AxisStatus* axis0);

  // .goldo.nucleo.odrive.AxisStatus axis1 = 3;
  bool has_axis1() const;
  void clear_axis1();
  static const int kAxis1FieldNumber = 3;
  private:
  const ::goldo::nucleo::odrive::AxisStatus& _internal_axis1() const;
  public:
  const ::goldo::nucleo::odrive::AxisStatus& axis1() const;
  ::goldo::nucleo::odrive::AxisStatus* release_axis1();
  ::goldo::nucleo::odrive::AxisStatus* mutable_axis1();
  void set_allocated_axis1(::goldo::nucleo::odrive::AxisStatus* axis1);

  // .goldo.nucleo.odrive.ClientStatistics client_statistics = 4;
  bool has_client_statistics() const;
  void clear_client_statistics();
  static const int kClientStatisticsFieldNumber = 4;
  private:
  const ::goldo::nucleo::odrive::ClientStatistics& _internal_client_statistics() const;
  public:
  const ::goldo::nucleo::odrive::ClientStatistics& client_statistics() const;
  ::goldo::nucleo::odrive::ClientStatistics* release_client_statistics();
  ::goldo::nucleo::odrive::ClientStatistics* mutable_client_statistics();
  void set_allocated_client_statistics(::goldo::nucleo::odrive::ClientStatistics* client_statistics);

  // bool synchronized = 1;
  void clear_synchronized();
  static const int kSynchronizedFieldNumber = 1;
  bool synchronized() const;
  void set_synchronized(bool value);

  // @@protoc_insertion_point(class_scope:goldo.nucleo.odrive.ODriveStatus)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::goldo::nucleo::odrive::AxisStatus* axis0_;
  ::goldo::nucleo::odrive::AxisStatus* axis1_;
  ::goldo::nucleo::odrive::ClientStatistics* client_statistics_;
  bool synchronized_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_goldo_2fnucleo_2fodrive_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RequestPacket

// uint32 sequence_number = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
inline void RequestPacket::clear_sequence_number() {
  sequence_number_ = 0u;
}
inline ::google::protobuf::uint32 RequestPacket::sequence_number() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.odrive.RequestPacket.sequence_number)
  return sequence_number_;
}
inline void RequestPacket::set_sequence_number(::google::protobuf::uint32 value) {
  
  sequence_number_ = value;
  // @@protoc_insertion_point(field_set:goldo.nucleo.odrive.RequestPacket.sequence_number)
}

// uint32 endpoint_id = 2 [(.goldo.pb2_options.cpp_type) = UINT16];
inline void RequestPacket::clear_endpoint_id() {
  endpoint_id_ = 0u;
}
inline ::google::protobuf::uint32 RequestPacket::endpoint_id() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.odrive.RequestPacket.endpoint_id)
  return endpoint_id_;
}
inline void RequestPacket::set_endpoint_id(::google::protobuf::uint32 value) {
  
  endpoint_id_ = value;
  // @@protoc_insertion_point(field_set:goldo.nucleo.odrive.RequestPacket.endpoint_id)
}

// uint32 expected_response_size = 3 [(.goldo.pb2_options.cpp_type) = UINT16];
inline void RequestPacket::clear_expected_response_size() {
  expected_response_size_ = 0u;
}
inline ::google::protobuf::uint32 RequestPacket::expected_response_size() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.odrive.RequestPacket.expected_response_size)
  return expected_response_size_;
}
inline void RequestPacket::set_expected_response_size(::google::protobuf::uint32 value) {
  
  expected_response_size_ = value;
  // @@protoc_insertion_point(field_set:goldo.nucleo.odrive.RequestPacket.expected_response_size)
}

// bytes payload = 4;
inline void RequestPacket::clear_payload() {
  payload_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RequestPacket::payload() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.odrive.RequestPacket.payload)
  return payload_.GetNoArena();
}
inline void RequestPacket::set_payload(const ::std::string& value) {
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:goldo.nucleo.odrive.RequestPacket.payload)
}
#if LANG_CXX11
inline void RequestPacket::set_payload(::std::string&& value) {
  
  payload_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:goldo.nucleo.odrive.RequestPacket.payload)
}
#endif
inline void RequestPacket::set_payload(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:goldo.nucleo.odrive.RequestPacket.payload)
}
inline void RequestPacket::set_payload(const void* value, size_t size) {
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:goldo.nucleo.odrive.RequestPacket.payload)
}
inline ::std::string* RequestPacket::mutable_payload() {
  
  // @@protoc_insertion_point(field_mutable:goldo.nucleo.odrive.RequestPacket.payload)
  return payload_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RequestPacket::release_payload() {
  // @@protoc_insertion_point(field_release:goldo.nucleo.odrive.RequestPacket.payload)
  
  return payload_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RequestPacket::set_allocated_payload(::std::string* payload) {
  if (payload != NULL) {
    
  } else {
    
  }
  payload_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), payload);
  // @@protoc_insertion_point(field_set_allocated:goldo.nucleo.odrive.RequestPacket.payload)
}

// uint32 protocol_version = 5 [(.goldo.pb2_options.cpp_type) = UINT16];
inline void RequestPacket::clear_protocol_version() {
  protocol_version_ = 0u;
}
inline ::google::protobuf::uint32 RequestPacket::protocol_version() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.odrive.RequestPacket.protocol_version)
  return protocol_version_;
}
inline void RequestPacket::set_protocol_version(::google::protobuf::uint32 value) {
  
  protocol_version_ = value;
  // @@protoc_insertion_point(field_set:goldo.nucleo.odrive.RequestPacket.protocol_version)
}

// -------------------------------------------------------------------

// ResponsePacket

// uint32 sequence_number = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
inline void ResponsePacket::clear_sequence_number() {
  sequence_number_ = 0u;
}
inline ::google::protobuf::uint32 ResponsePacket::sequence_number() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.odrive.ResponsePacket.sequence_number)
  return sequence_number_;
}
inline void ResponsePacket::set_sequence_number(::google::protobuf::uint32 value) {
  
  sequence_number_ = value;
  // @@protoc_insertion_point(field_set:goldo.nucleo.odrive.ResponsePacket.sequence_number)
}

// bytes payload = 4;
inline void ResponsePacket::clear_payload() {
  payload_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ResponsePacket::payload() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.odrive.ResponsePacket.payload)
  return payload_.GetNoArena();
}
inline void ResponsePacket::set_payload(const ::std::string& value) {
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:goldo.nucleo.odrive.ResponsePacket.payload)
}
#if LANG_CXX11
inline void ResponsePacket::set_payload(::std::string&& value) {
  
  payload_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:goldo.nucleo.odrive.ResponsePacket.payload)
}
#endif
inline void ResponsePacket::set_payload(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:goldo.nucleo.odrive.ResponsePacket.payload)
}
inline void ResponsePacket::set_payload(const void* value, size_t size) {
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:goldo.nucleo.odrive.ResponsePacket.payload)
}
inline ::std::string* ResponsePacket::mutable_payload() {
  
  // @@protoc_insertion_point(field_mutable:goldo.nucleo.odrive.ResponsePacket.payload)
  return payload_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResponsePacket::release_payload() {
  // @@protoc_insertion_point(field_release:goldo.nucleo.odrive.ResponsePacket.payload)
  
  return payload_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResponsePacket::set_allocated_payload(::std::string* payload) {
  if (payload != NULL) {
    
  } else {
    
  }
  payload_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), payload);
  // @@protoc_insertion_point(field_set_allocated:goldo.nucleo.odrive.ResponsePacket.payload)
}

// -------------------------------------------------------------------

// AxisTelemetry

// float pos_estimate = 1;
inline void AxisTelemetry::clear_pos_estimate() {
  pos_estimate_ = 0;
}
inline float AxisTelemetry::pos_estimate() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.odrive.AxisTelemetry.pos_estimate)
  return pos_estimate_;
}
inline void AxisTelemetry::set_pos_estimate(float value) {
  
  pos_estimate_ = value;
  // @@protoc_insertion_point(field_set:goldo.nucleo.odrive.AxisTelemetry.pos_estimate)
}

// float vel_estimate = 2;
inline void AxisTelemetry::clear_vel_estimate() {
  vel_estimate_ = 0;
}
inline float AxisTelemetry::vel_estimate() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.odrive.AxisTelemetry.vel_estimate)
  return vel_estimate_;
}
inline void AxisTelemetry::set_vel_estimate(float value) {
  
  vel_estimate_ = value;
  // @@protoc_insertion_point(field_set:goldo.nucleo.odrive.AxisTelemetry.vel_estimate)
}

// float current_iq_setpoint = 3;
inline void AxisTelemetry::clear_current_iq_setpoint() {
  current_iq_setpoint_ = 0;
}
inline float AxisTelemetry::current_iq_setpoint() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.odrive.AxisTelemetry.current_iq_setpoint)
  return current_iq_setpoint_;
}
inline void AxisTelemetry::set_current_iq_setpoint(float value) {
  
  current_iq_setpoint_ = value;
  // @@protoc_insertion_point(field_set:goldo.nucleo.odrive.AxisTelemetry.current_iq_setpoint)
}

// -------------------------------------------------------------------

// AxisErrorState

// uint32 axis = 1 [(.goldo.pb2_options.cpp_type) = UINT32];
inline void AxisErrorState::clear_axis() {
  axis_ = 0u;
}
inline ::google::protobuf::uint32 AxisErrorState::axis() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.odrive.AxisErrorState.axis)
  return axis_;
}
inline void AxisErrorState::set_axis(::google::protobuf::uint32 value) {
  
  axis_ = value;
  // @@protoc_insertion_point(field_set:goldo.nucleo.odrive.AxisErrorState.axis)
}

// uint32 motor = 2 [(.goldo.pb2_options.cpp_type) = UINT32];
inline void AxisErrorState::clear_motor() {
  motor_ = 0u;
}
inline ::google::protobuf::uint32 AxisErrorState::motor() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.odrive.AxisErrorState.motor)
  return motor_;
}
inline void AxisErrorState::set_motor(::google::protobuf::uint32 value) {
  
  motor_ = value;
  // @@protoc_insertion_point(field_set:goldo.nucleo.odrive.AxisErrorState.motor)
}

// uint32 controller = 3 [(.goldo.pb2_options.cpp_type) = UINT32];
inline void AxisErrorState::clear_controller() {
  controller_ = 0u;
}
inline ::google::protobuf::uint32 AxisErrorState::controller() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.odrive.AxisErrorState.controller)
  return controller_;
}
inline void AxisErrorState::set_controller(::google::protobuf::uint32 value) {
  
  controller_ = value;
  // @@protoc_insertion_point(field_set:goldo.nucleo.odrive.AxisErrorState.controller)
}

// uint32 encoder = 4 [(.goldo.pb2_options.cpp_type) = UINT32];
inline void AxisErrorState::clear_encoder() {
  encoder_ = 0u;
}
inline ::google::protobuf::uint32 AxisErrorState::encoder() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.odrive.AxisErrorState.encoder)
  return encoder_;
}
inline void AxisErrorState::set_encoder(::google::protobuf::uint32 value) {
  
  encoder_ = value;
  // @@protoc_insertion_point(field_set:goldo.nucleo.odrive.AxisErrorState.encoder)
}

// uint32 sensorless_estimator = 5 [(.goldo.pb2_options.cpp_type) = UINT32];
inline void AxisErrorState::clear_sensorless_estimator() {
  sensorless_estimator_ = 0u;
}
inline ::google::protobuf::uint32 AxisErrorState::sensorless_estimator() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.odrive.AxisErrorState.sensorless_estimator)
  return sensorless_estimator_;
}
inline void AxisErrorState::set_sensorless_estimator(::google::protobuf::uint32 value) {
  
  sensorless_estimator_ = value;
  // @@protoc_insertion_point(field_set:goldo.nucleo.odrive.AxisErrorState.sensorless_estimator)
}

// -------------------------------------------------------------------

// AxisState_

// .goldo.nucleo.odrive.AxisState current_state = 1 [(.goldo.pb2_options.cpp_type) = UINT32];
inline void AxisState_::clear_current_state() {
  current_state_ = 0;
}
inline ::goldo::nucleo::odrive::AxisState AxisState_::current_state() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.odrive.AxisState_.current_state)
  return static_cast< ::goldo::nucleo::odrive::AxisState >(current_state_);
}
inline void AxisState_::set_current_state(::goldo::nucleo::odrive::AxisState value) {
  
  current_state_ = value;
  // @@protoc_insertion_point(field_set:goldo.nucleo.odrive.AxisState_.current_state)
}

// .goldo.nucleo.odrive.AxisState requested_state = 2 [(.goldo.pb2_options.cpp_type) = UINT32];
inline void AxisState_::clear_requested_state() {
  requested_state_ = 0;
}
inline ::goldo::nucleo::odrive::AxisState AxisState_::requested_state() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.odrive.AxisState_.requested_state)
  return static_cast< ::goldo::nucleo::odrive::AxisState >(requested_state_);
}
inline void AxisState_::set_requested_state(::goldo::nucleo::odrive::AxisState value) {
  
  requested_state_ = value;
  // @@protoc_insertion_point(field_set:goldo.nucleo.odrive.AxisState_.requested_state)
}

// .goldo.nucleo.odrive.ControlMode control_mode = 3 [(.goldo.pb2_options.cpp_type) = UINT32];
inline void AxisState_::clear_control_mode() {
  control_mode_ = 0;
}
inline ::goldo::nucleo::odrive::ControlMode AxisState_::control_mode() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.odrive.AxisState_.control_mode)
  return static_cast< ::goldo::nucleo::odrive::ControlMode >(control_mode_);
}
inline void AxisState_::set_control_mode(::goldo::nucleo::odrive::ControlMode value) {
  
  control_mode_ = value;
  // @@protoc_insertion_point(field_set:goldo.nucleo.odrive.AxisState_.control_mode)
}

// -------------------------------------------------------------------

// AxisErrorStates

// .goldo.nucleo.odrive.AxisErrorState axis0 = 1;
inline bool AxisErrorStates::has_axis0() const {
  return this != internal_default_instance() && axis0_ != NULL;
}
inline void AxisErrorStates::clear_axis0() {
  if (GetArenaNoVirtual() == NULL && axis0_ != NULL) {
    delete axis0_;
  }
  axis0_ = NULL;
}
inline const ::goldo::nucleo::odrive::AxisErrorState& AxisErrorStates::_internal_axis0() const {
  return *axis0_;
}
inline const ::goldo::nucleo::odrive::AxisErrorState& AxisErrorStates::axis0() const {
  const ::goldo::nucleo::odrive::AxisErrorState* p = axis0_;
  // @@protoc_insertion_point(field_get:goldo.nucleo.odrive.AxisErrorStates.axis0)
  return p != NULL ? *p : *reinterpret_cast<const ::goldo::nucleo::odrive::AxisErrorState*>(
      &::goldo::nucleo::odrive::_AxisErrorState_default_instance_);
}
inline ::goldo::nucleo::odrive::AxisErrorState* AxisErrorStates::release_axis0() {
  // @@protoc_insertion_point(field_release:goldo.nucleo.odrive.AxisErrorStates.axis0)
  
  ::goldo::nucleo::odrive::AxisErrorState* temp = axis0_;
  axis0_ = NULL;
  return temp;
}
inline ::goldo::nucleo::odrive::AxisErrorState* AxisErrorStates::mutable_axis0() {
  
  if (axis0_ == NULL) {
    auto* p = CreateMaybeMessage<::goldo::nucleo::odrive::AxisErrorState>(GetArenaNoVirtual());
    axis0_ = p;
  }
  // @@protoc_insertion_point(field_mutable:goldo.nucleo.odrive.AxisErrorStates.axis0)
  return axis0_;
}
inline void AxisErrorStates::set_allocated_axis0(::goldo::nucleo::odrive::AxisErrorState* axis0) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete axis0_;
  }
  if (axis0) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      axis0 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, axis0, submessage_arena);
    }
    
  } else {
    
  }
  axis0_ = axis0;
  // @@protoc_insertion_point(field_set_allocated:goldo.nucleo.odrive.AxisErrorStates.axis0)
}

// .goldo.nucleo.odrive.AxisErrorState axis1 = 2;
inline bool AxisErrorStates::has_axis1() const {
  return this != internal_default_instance() && axis1_ != NULL;
}
inline void AxisErrorStates::clear_axis1() {
  if (GetArenaNoVirtual() == NULL && axis1_ != NULL) {
    delete axis1_;
  }
  axis1_ = NULL;
}
inline const ::goldo::nucleo::odrive::AxisErrorState& AxisErrorStates::_internal_axis1() const {
  return *axis1_;
}
inline const ::goldo::nucleo::odrive::AxisErrorState& AxisErrorStates::axis1() const {
  const ::goldo::nucleo::odrive::AxisErrorState* p = axis1_;
  // @@protoc_insertion_point(field_get:goldo.nucleo.odrive.AxisErrorStates.axis1)
  return p != NULL ? *p : *reinterpret_cast<const ::goldo::nucleo::odrive::AxisErrorState*>(
      &::goldo::nucleo::odrive::_AxisErrorState_default_instance_);
}
inline ::goldo::nucleo::odrive::AxisErrorState* AxisErrorStates::release_axis1() {
  // @@protoc_insertion_point(field_release:goldo.nucleo.odrive.AxisErrorStates.axis1)
  
  ::goldo::nucleo::odrive::AxisErrorState* temp = axis1_;
  axis1_ = NULL;
  return temp;
}
inline ::goldo::nucleo::odrive::AxisErrorState* AxisErrorStates::mutable_axis1() {
  
  if (axis1_ == NULL) {
    auto* p = CreateMaybeMessage<::goldo::nucleo::odrive::AxisErrorState>(GetArenaNoVirtual());
    axis1_ = p;
  }
  // @@protoc_insertion_point(field_mutable:goldo.nucleo.odrive.AxisErrorStates.axis1)
  return axis1_;
}
inline void AxisErrorStates::set_allocated_axis1(::goldo::nucleo::odrive::AxisErrorState* axis1) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete axis1_;
  }
  if (axis1) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      axis1 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, axis1, submessage_arena);
    }
    
  } else {
    
  }
  axis1_ = axis1;
  // @@protoc_insertion_point(field_set_allocated:goldo.nucleo.odrive.AxisErrorStates.axis1)
}

// -------------------------------------------------------------------

// AxisStates

// .goldo.nucleo.odrive.AxisState_ axis0 = 1;
inline bool AxisStates::has_axis0() const {
  return this != internal_default_instance() && axis0_ != NULL;
}
inline void AxisStates::clear_axis0() {
  if (GetArenaNoVirtual() == NULL && axis0_ != NULL) {
    delete axis0_;
  }
  axis0_ = NULL;
}
inline const ::goldo::nucleo::odrive::AxisState_& AxisStates::_internal_axis0() const {
  return *axis0_;
}
inline const ::goldo::nucleo::odrive::AxisState_& AxisStates::axis0() const {
  const ::goldo::nucleo::odrive::AxisState_* p = axis0_;
  // @@protoc_insertion_point(field_get:goldo.nucleo.odrive.AxisStates.axis0)
  return p != NULL ? *p : *reinterpret_cast<const ::goldo::nucleo::odrive::AxisState_*>(
      &::goldo::nucleo::odrive::_AxisState__default_instance_);
}
inline ::goldo::nucleo::odrive::AxisState_* AxisStates::release_axis0() {
  // @@protoc_insertion_point(field_release:goldo.nucleo.odrive.AxisStates.axis0)
  
  ::goldo::nucleo::odrive::AxisState_* temp = axis0_;
  axis0_ = NULL;
  return temp;
}
inline ::goldo::nucleo::odrive::AxisState_* AxisStates::mutable_axis0() {
  
  if (axis0_ == NULL) {
    auto* p = CreateMaybeMessage<::goldo::nucleo::odrive::AxisState_>(GetArenaNoVirtual());
    axis0_ = p;
  }
  // @@protoc_insertion_point(field_mutable:goldo.nucleo.odrive.AxisStates.axis0)
  return axis0_;
}
inline void AxisStates::set_allocated_axis0(::goldo::nucleo::odrive::AxisState_* axis0) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete axis0_;
  }
  if (axis0) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      axis0 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, axis0, submessage_arena);
    }
    
  } else {
    
  }
  axis0_ = axis0;
  // @@protoc_insertion_point(field_set_allocated:goldo.nucleo.odrive.AxisStates.axis0)
}

// .goldo.nucleo.odrive.AxisState_ axis1 = 2;
inline bool AxisStates::has_axis1() const {
  return this != internal_default_instance() && axis1_ != NULL;
}
inline void AxisStates::clear_axis1() {
  if (GetArenaNoVirtual() == NULL && axis1_ != NULL) {
    delete axis1_;
  }
  axis1_ = NULL;
}
inline const ::goldo::nucleo::odrive::AxisState_& AxisStates::_internal_axis1() const {
  return *axis1_;
}
inline const ::goldo::nucleo::odrive::AxisState_& AxisStates::axis1() const {
  const ::goldo::nucleo::odrive::AxisState_* p = axis1_;
  // @@protoc_insertion_point(field_get:goldo.nucleo.odrive.AxisStates.axis1)
  return p != NULL ? *p : *reinterpret_cast<const ::goldo::nucleo::odrive::AxisState_*>(
      &::goldo::nucleo::odrive::_AxisState__default_instance_);
}
inline ::goldo::nucleo::odrive::AxisState_* AxisStates::release_axis1() {
  // @@protoc_insertion_point(field_release:goldo.nucleo.odrive.AxisStates.axis1)
  
  ::goldo::nucleo::odrive::AxisState_* temp = axis1_;
  axis1_ = NULL;
  return temp;
}
inline ::goldo::nucleo::odrive::AxisState_* AxisStates::mutable_axis1() {
  
  if (axis1_ == NULL) {
    auto* p = CreateMaybeMessage<::goldo::nucleo::odrive::AxisState_>(GetArenaNoVirtual());
    axis1_ = p;
  }
  // @@protoc_insertion_point(field_mutable:goldo.nucleo.odrive.AxisStates.axis1)
  return axis1_;
}
inline void AxisStates::set_allocated_axis1(::goldo::nucleo::odrive::AxisState_* axis1) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete axis1_;
  }
  if (axis1) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      axis1 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, axis1, submessage_arena);
    }
    
  } else {
    
  }
  axis1_ = axis1;
  // @@protoc_insertion_point(field_set_allocated:goldo.nucleo.odrive.AxisStates.axis1)
}

// -------------------------------------------------------------------

// ClientStatistics

// uint32 max_latency = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
inline void ClientStatistics::clear_max_latency() {
  max_latency_ = 0u;
}
inline ::google::protobuf::uint32 ClientStatistics::max_latency() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.odrive.ClientStatistics.max_latency)
  return max_latency_;
}
inline void ClientStatistics::set_max_latency(::google::protobuf::uint32 value) {
  
  max_latency_ = value;
  // @@protoc_insertion_point(field_set:goldo.nucleo.odrive.ClientStatistics.max_latency)
}

// uint32 timeout_errors = 2 [(.goldo.pb2_options.cpp_type) = UINT16];
inline void ClientStatistics::clear_timeout_errors() {
  timeout_errors_ = 0u;
}
inline ::google::protobuf::uint32 ClientStatistics::timeout_errors() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.odrive.ClientStatistics.timeout_errors)
  return timeout_errors_;
}
inline void ClientStatistics::set_timeout_errors(::google::protobuf::uint32 value) {
  
  timeout_errors_ = value;
  // @@protoc_insertion_point(field_set:goldo.nucleo.odrive.ClientStatistics.timeout_errors)
}

// uint32 uptime = 3 [(.goldo.pb2_options.cpp_type) = UINT32];
inline void ClientStatistics::clear_uptime() {
  uptime_ = 0u;
}
inline ::google::protobuf::uint32 ClientStatistics::uptime() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.odrive.ClientStatistics.uptime)
  return uptime_;
}
inline void ClientStatistics::set_uptime(::google::protobuf::uint32 value) {
  
  uptime_ = value;
  // @@protoc_insertion_point(field_set:goldo.nucleo.odrive.ClientStatistics.uptime)
}

// bool synchronized = 4;
inline void ClientStatistics::clear_synchronized() {
  synchronized_ = false;
}
inline bool ClientStatistics::synchronized() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.odrive.ClientStatistics.synchronized)
  return synchronized_;
}
inline void ClientStatistics::set_synchronized(bool value) {
  
  synchronized_ = value;
  // @@protoc_insertion_point(field_set:goldo.nucleo.odrive.ClientStatistics.synchronized)
}

// -------------------------------------------------------------------

// AxisStatus

// .goldo.nucleo.odrive.AxisState current_state = 1;
inline void AxisStatus::clear_current_state() {
  current_state_ = 0;
}
inline ::goldo::nucleo::odrive::AxisState AxisStatus::current_state() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.odrive.AxisStatus.current_state)
  return static_cast< ::goldo::nucleo::odrive::AxisState >(current_state_);
}
inline void AxisStatus::set_current_state(::goldo::nucleo::odrive::AxisState value) {
  
  current_state_ = value;
  // @@protoc_insertion_point(field_set:goldo.nucleo.odrive.AxisStatus.current_state)
}

// .goldo.nucleo.odrive.AxisState requested_state = 2;
inline void AxisStatus::clear_requested_state() {
  requested_state_ = 0;
}
inline ::goldo::nucleo::odrive::AxisState AxisStatus::requested_state() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.odrive.AxisStatus.requested_state)
  return static_cast< ::goldo::nucleo::odrive::AxisState >(requested_state_);
}
inline void AxisStatus::set_requested_state(::goldo::nucleo::odrive::AxisState value) {
  
  requested_state_ = value;
  // @@protoc_insertion_point(field_set:goldo.nucleo.odrive.AxisStatus.requested_state)
}

// .goldo.nucleo.odrive.ControlMode control_mode = 3;
inline void AxisStatus::clear_control_mode() {
  control_mode_ = 0;
}
inline ::goldo::nucleo::odrive::ControlMode AxisStatus::control_mode() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.odrive.AxisStatus.control_mode)
  return static_cast< ::goldo::nucleo::odrive::ControlMode >(control_mode_);
}
inline void AxisStatus::set_control_mode(::goldo::nucleo::odrive::ControlMode value) {
  
  control_mode_ = value;
  // @@protoc_insertion_point(field_set:goldo.nucleo.odrive.AxisStatus.control_mode)
}

// .goldo.nucleo.odrive.AxisErrorState errors = 4;
inline bool AxisStatus::has_errors() const {
  return this != internal_default_instance() && errors_ != NULL;
}
inline void AxisStatus::clear_errors() {
  if (GetArenaNoVirtual() == NULL && errors_ != NULL) {
    delete errors_;
  }
  errors_ = NULL;
}
inline const ::goldo::nucleo::odrive::AxisErrorState& AxisStatus::_internal_errors() const {
  return *errors_;
}
inline const ::goldo::nucleo::odrive::AxisErrorState& AxisStatus::errors() const {
  const ::goldo::nucleo::odrive::AxisErrorState* p = errors_;
  // @@protoc_insertion_point(field_get:goldo.nucleo.odrive.AxisStatus.errors)
  return p != NULL ? *p : *reinterpret_cast<const ::goldo::nucleo::odrive::AxisErrorState*>(
      &::goldo::nucleo::odrive::_AxisErrorState_default_instance_);
}
inline ::goldo::nucleo::odrive::AxisErrorState* AxisStatus::release_errors() {
  // @@protoc_insertion_point(field_release:goldo.nucleo.odrive.AxisStatus.errors)
  
  ::goldo::nucleo::odrive::AxisErrorState* temp = errors_;
  errors_ = NULL;
  return temp;
}
inline ::goldo::nucleo::odrive::AxisErrorState* AxisStatus::mutable_errors() {
  
  if (errors_ == NULL) {
    auto* p = CreateMaybeMessage<::goldo::nucleo::odrive::AxisErrorState>(GetArenaNoVirtual());
    errors_ = p;
  }
  // @@protoc_insertion_point(field_mutable:goldo.nucleo.odrive.AxisStatus.errors)
  return errors_;
}
inline void AxisStatus::set_allocated_errors(::goldo::nucleo::odrive::AxisErrorState* errors) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete errors_;
  }
  if (errors) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      errors = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, errors, submessage_arena);
    }
    
  } else {
    
  }
  errors_ = errors;
  // @@protoc_insertion_point(field_set_allocated:goldo.nucleo.odrive.AxisStatus.errors)
}

// -------------------------------------------------------------------

// Telemetry

// uint32 timestamp = 1 [(.goldo.pb2_options.cpp_type) = UINT32];
inline void Telemetry::clear_timestamp() {
  timestamp_ = 0u;
}
inline ::google::protobuf::uint32 Telemetry::timestamp() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.odrive.Telemetry.timestamp)
  return timestamp_;
}
inline void Telemetry::set_timestamp(::google::protobuf::uint32 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:goldo.nucleo.odrive.Telemetry.timestamp)
}

// repeated .goldo.nucleo.odrive.AxisTelemetry axis = 2 [(.goldo.pb2_options.max_count) = 2, (.goldo.pb2_options.fixed_count) = true];
inline int Telemetry::axis_size() const {
  return axis_.size();
}
inline void Telemetry::clear_axis() {
  axis_.Clear();
}
inline ::goldo::nucleo::odrive::AxisTelemetry* Telemetry::mutable_axis(int index) {
  // @@protoc_insertion_point(field_mutable:goldo.nucleo.odrive.Telemetry.axis)
  return axis_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::goldo::nucleo::odrive::AxisTelemetry >*
Telemetry::mutable_axis() {
  // @@protoc_insertion_point(field_mutable_list:goldo.nucleo.odrive.Telemetry.axis)
  return &axis_;
}
inline const ::goldo::nucleo::odrive::AxisTelemetry& Telemetry::axis(int index) const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.odrive.Telemetry.axis)
  return axis_.Get(index);
}
inline ::goldo::nucleo::odrive::AxisTelemetry* Telemetry::add_axis() {
  // @@protoc_insertion_point(field_add:goldo.nucleo.odrive.Telemetry.axis)
  return axis_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::goldo::nucleo::odrive::AxisTelemetry >&
Telemetry::axis() const {
  // @@protoc_insertion_point(field_list:goldo.nucleo.odrive.Telemetry.axis)
  return axis_;
}

// -------------------------------------------------------------------

// ODriveStatus

// bool synchronized = 1;
inline void ODriveStatus::clear_synchronized() {
  synchronized_ = false;
}
inline bool ODriveStatus::synchronized() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.odrive.ODriveStatus.synchronized)
  return synchronized_;
}
inline void ODriveStatus::set_synchronized(bool value) {
  
  synchronized_ = value;
  // @@protoc_insertion_point(field_set:goldo.nucleo.odrive.ODriveStatus.synchronized)
}

// .goldo.nucleo.odrive.AxisStatus axis0 = 2;
inline bool ODriveStatus::has_axis0() const {
  return this != internal_default_instance() && axis0_ != NULL;
}
inline void ODriveStatus::clear_axis0() {
  if (GetArenaNoVirtual() == NULL && axis0_ != NULL) {
    delete axis0_;
  }
  axis0_ = NULL;
}
inline const ::goldo::nucleo::odrive::AxisStatus& ODriveStatus::_internal_axis0() const {
  return *axis0_;
}
inline const ::goldo::nucleo::odrive::AxisStatus& ODriveStatus::axis0() const {
  const ::goldo::nucleo::odrive::AxisStatus* p = axis0_;
  // @@protoc_insertion_point(field_get:goldo.nucleo.odrive.ODriveStatus.axis0)
  return p != NULL ? *p : *reinterpret_cast<const ::goldo::nucleo::odrive::AxisStatus*>(
      &::goldo::nucleo::odrive::_AxisStatus_default_instance_);
}
inline ::goldo::nucleo::odrive::AxisStatus* ODriveStatus::release_axis0() {
  // @@protoc_insertion_point(field_release:goldo.nucleo.odrive.ODriveStatus.axis0)
  
  ::goldo::nucleo::odrive::AxisStatus* temp = axis0_;
  axis0_ = NULL;
  return temp;
}
inline ::goldo::nucleo::odrive::AxisStatus* ODriveStatus::mutable_axis0() {
  
  if (axis0_ == NULL) {
    auto* p = CreateMaybeMessage<::goldo::nucleo::odrive::AxisStatus>(GetArenaNoVirtual());
    axis0_ = p;
  }
  // @@protoc_insertion_point(field_mutable:goldo.nucleo.odrive.ODriveStatus.axis0)
  return axis0_;
}
inline void ODriveStatus::set_allocated_axis0(::goldo::nucleo::odrive::AxisStatus* axis0) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete axis0_;
  }
  if (axis0) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      axis0 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, axis0, submessage_arena);
    }
    
  } else {
    
  }
  axis0_ = axis0;
  // @@protoc_insertion_point(field_set_allocated:goldo.nucleo.odrive.ODriveStatus.axis0)
}

// .goldo.nucleo.odrive.AxisStatus axis1 = 3;
inline bool ODriveStatus::has_axis1() const {
  return this != internal_default_instance() && axis1_ != NULL;
}
inline void ODriveStatus::clear_axis1() {
  if (GetArenaNoVirtual() == NULL && axis1_ != NULL) {
    delete axis1_;
  }
  axis1_ = NULL;
}
inline const ::goldo::nucleo::odrive::AxisStatus& ODriveStatus::_internal_axis1() const {
  return *axis1_;
}
inline const ::goldo::nucleo::odrive::AxisStatus& ODriveStatus::axis1() const {
  const ::goldo::nucleo::odrive::AxisStatus* p = axis1_;
  // @@protoc_insertion_point(field_get:goldo.nucleo.odrive.ODriveStatus.axis1)
  return p != NULL ? *p : *reinterpret_cast<const ::goldo::nucleo::odrive::AxisStatus*>(
      &::goldo::nucleo::odrive::_AxisStatus_default_instance_);
}
inline ::goldo::nucleo::odrive::AxisStatus* ODriveStatus::release_axis1() {
  // @@protoc_insertion_point(field_release:goldo.nucleo.odrive.ODriveStatus.axis1)
  
  ::goldo::nucleo::odrive::AxisStatus* temp = axis1_;
  axis1_ = NULL;
  return temp;
}
inline ::goldo::nucleo::odrive::AxisStatus* ODriveStatus::mutable_axis1() {
  
  if (axis1_ == NULL) {
    auto* p = CreateMaybeMessage<::goldo::nucleo::odrive::AxisStatus>(GetArenaNoVirtual());
    axis1_ = p;
  }
  // @@protoc_insertion_point(field_mutable:goldo.nucleo.odrive.ODriveStatus.axis1)
  return axis1_;
}
inline void ODriveStatus::set_allocated_axis1(::goldo::nucleo::odrive::AxisStatus* axis1) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete axis1_;
  }
  if (axis1) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      axis1 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, axis1, submessage_arena);
    }
    
  } else {
    
  }
  axis1_ = axis1;
  // @@protoc_insertion_point(field_set_allocated:goldo.nucleo.odrive.ODriveStatus.axis1)
}

// .goldo.nucleo.odrive.ClientStatistics client_statistics = 4;
inline bool ODriveStatus::has_client_statistics() const {
  return this != internal_default_instance() && client_statistics_ != NULL;
}
inline void ODriveStatus::clear_client_statistics() {
  if (GetArenaNoVirtual() == NULL && client_statistics_ != NULL) {
    delete client_statistics_;
  }
  client_statistics_ = NULL;
}
inline const ::goldo::nucleo::odrive::ClientStatistics& ODriveStatus::_internal_client_statistics() const {
  return *client_statistics_;
}
inline const ::goldo::nucleo::odrive::ClientStatistics& ODriveStatus::client_statistics() const {
  const ::goldo::nucleo::odrive::ClientStatistics* p = client_statistics_;
  // @@protoc_insertion_point(field_get:goldo.nucleo.odrive.ODriveStatus.client_statistics)
  return p != NULL ? *p : *reinterpret_cast<const ::goldo::nucleo::odrive::ClientStatistics*>(
      &::goldo::nucleo::odrive::_ClientStatistics_default_instance_);
}
inline ::goldo::nucleo::odrive::ClientStatistics* ODriveStatus::release_client_statistics() {
  // @@protoc_insertion_point(field_release:goldo.nucleo.odrive.ODriveStatus.client_statistics)
  
  ::goldo::nucleo::odrive::ClientStatistics* temp = client_statistics_;
  client_statistics_ = NULL;
  return temp;
}
inline ::goldo::nucleo::odrive::ClientStatistics* ODriveStatus::mutable_client_statistics() {
  
  if (client_statistics_ == NULL) {
    auto* p = CreateMaybeMessage<::goldo::nucleo::odrive::ClientStatistics>(GetArenaNoVirtual());
    client_statistics_ = p;
  }
  // @@protoc_insertion_point(field_mutable:goldo.nucleo.odrive.ODriveStatus.client_statistics)
  return client_statistics_;
}
inline void ODriveStatus::set_allocated_client_statistics(::goldo::nucleo::odrive::ClientStatistics* client_statistics) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete client_statistics_;
  }
  if (client_statistics) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      client_statistics = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, client_statistics, submessage_arena);
    }
    
  } else {
    
  }
  client_statistics_ = client_statistics;
  // @@protoc_insertion_point(field_set_allocated:goldo.nucleo.odrive.ODriveStatus.client_statistics)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace odrive
}  // namespace nucleo
}  // namespace goldo

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::goldo::nucleo::odrive::AxisState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::goldo::nucleo::odrive::AxisState>() {
  return ::goldo::nucleo::odrive::AxisState_descriptor();
}
template <> struct is_proto_enum< ::goldo::nucleo::odrive::ControlMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::goldo::nucleo::odrive::ControlMode>() {
  return ::goldo::nucleo::odrive::ControlMode_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_goldo_2fnucleo_2fodrive_2eproto
