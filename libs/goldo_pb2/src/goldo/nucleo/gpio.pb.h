// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: goldo/nucleo/gpio.proto

#ifndef PROTOBUF_INCLUDED_goldo_2fnucleo_2fgpio_2eproto
#define PROTOBUF_INCLUDED_goldo_2fnucleo_2fgpio_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "goldo/pb2_options.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_goldo_2fnucleo_2fgpio_2eproto 

namespace protobuf_goldo_2fnucleo_2fgpio_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_goldo_2fnucleo_2fgpio_2eproto
namespace goldo {
namespace nucleo {
namespace gpio {
class CmdGpioSet;
class CmdGpioSetDefaultTypeInternal;
extern CmdGpioSetDefaultTypeInternal _CmdGpioSet_default_instance_;
}  // namespace gpio
}  // namespace nucleo
}  // namespace goldo
namespace google {
namespace protobuf {
template<> ::goldo::nucleo::gpio::CmdGpioSet* Arena::CreateMaybeMessage<::goldo::nucleo::gpio::CmdGpioSet>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace goldo {
namespace nucleo {
namespace gpio {

// ===================================================================

class CmdGpioSet : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:goldo.nucleo.gpio.CmdGpioSet) */ {
 public:
  CmdGpioSet();
  virtual ~CmdGpioSet();

  CmdGpioSet(const CmdGpioSet& from);

  inline CmdGpioSet& operator=(const CmdGpioSet& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CmdGpioSet(CmdGpioSet&& from) noexcept
    : CmdGpioSet() {
    *this = ::std::move(from);
  }

  inline CmdGpioSet& operator=(CmdGpioSet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdGpioSet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CmdGpioSet* internal_default_instance() {
    return reinterpret_cast<const CmdGpioSet*>(
               &_CmdGpioSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(CmdGpioSet* other);
  friend void swap(CmdGpioSet& a, CmdGpioSet& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CmdGpioSet* New() const final {
    return CreateMaybeMessage<CmdGpioSet>(NULL);
  }

  CmdGpioSet* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CmdGpioSet>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CmdGpioSet& from);
  void MergeFrom(const CmdGpioSet& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CmdGpioSet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 sequence_number = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
  void clear_sequence_number();
  static const int kSequenceNumberFieldNumber = 1;
  ::google::protobuf::int32 sequence_number() const;
  void set_sequence_number(::google::protobuf::int32 value);

  // int32 gpio_id = 2 [(.goldo.pb2_options.cpp_type) = UINT8];
  void clear_gpio_id();
  static const int kGpioIdFieldNumber = 2;
  ::google::protobuf::int32 gpio_id() const;
  void set_gpio_id(::google::protobuf::int32 value);

  // bool value = 3 [(.goldo.pb2_options.cpp_type) = UINT8];
  void clear_value();
  static const int kValueFieldNumber = 3;
  bool value() const;
  void set_value(bool value);

  // @@protoc_insertion_point(class_scope:goldo.nucleo.gpio.CmdGpioSet)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 sequence_number_;
  ::google::protobuf::int32 gpio_id_;
  bool value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_goldo_2fnucleo_2fgpio_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CmdGpioSet

// int32 sequence_number = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
inline void CmdGpioSet::clear_sequence_number() {
  sequence_number_ = 0;
}
inline ::google::protobuf::int32 CmdGpioSet::sequence_number() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.gpio.CmdGpioSet.sequence_number)
  return sequence_number_;
}
inline void CmdGpioSet::set_sequence_number(::google::protobuf::int32 value) {
  
  sequence_number_ = value;
  // @@protoc_insertion_point(field_set:goldo.nucleo.gpio.CmdGpioSet.sequence_number)
}

// int32 gpio_id = 2 [(.goldo.pb2_options.cpp_type) = UINT8];
inline void CmdGpioSet::clear_gpio_id() {
  gpio_id_ = 0;
}
inline ::google::protobuf::int32 CmdGpioSet::gpio_id() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.gpio.CmdGpioSet.gpio_id)
  return gpio_id_;
}
inline void CmdGpioSet::set_gpio_id(::google::protobuf::int32 value) {
  
  gpio_id_ = value;
  // @@protoc_insertion_point(field_set:goldo.nucleo.gpio.CmdGpioSet.gpio_id)
}

// bool value = 3 [(.goldo.pb2_options.cpp_type) = UINT8];
inline void CmdGpioSet::clear_value() {
  value_ = false;
}
inline bool CmdGpioSet::value() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.gpio.CmdGpioSet.value)
  return value_;
}
inline void CmdGpioSet::set_value(bool value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:goldo.nucleo.gpio.CmdGpioSet.value)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace gpio
}  // namespace nucleo
}  // namespace goldo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_goldo_2fnucleo_2fgpio_2eproto
