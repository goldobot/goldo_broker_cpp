// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: goldo/nucleo/robot.proto

#include "goldo/nucleo/robot.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_goldo_2fnucleo_2frobot_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_goldo_2fnucleo_2frobot_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ServoConfig;
}  // namespace protobuf_goldo_2fnucleo_2frobot_2eproto
namespace protobuf_goldo_2frplidar_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_goldo_2frplidar_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Tresholds;
}  // namespace protobuf_goldo_2frplidar_2eproto
namespace goldo {
namespace nucleo {
namespace robot {
class ConfigLoadBeginDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigLoadBegin>
      _instance;
} _ConfigLoadBegin_default_instance_;
class ConfigLoadChunkDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigLoadChunk>
      _instance;
} _ConfigLoadChunk_default_instance_;
class ConfigLoadEndDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigLoadEnd>
      _instance;
} _ConfigLoadEnd_default_instance_;
class ConfigLoadStatusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigLoadStatus>
      _instance;
} _ConfigLoadStatus_default_instance_;
class ServoConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ServoConfig>
      _instance;
} _ServoConfig_default_instance_;
class ServosConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ServosConfig>
      _instance;
} _ServosConfig_default_instance_;
class RPLidarConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RPLidarConfig>
      _instance;
} _RPLidarConfig_default_instance_;
}  // namespace robot
}  // namespace nucleo
}  // namespace goldo
namespace protobuf_goldo_2fnucleo_2frobot_2eproto {
static void InitDefaultsConfigLoadBegin() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::goldo::nucleo::robot::_ConfigLoadBegin_default_instance_;
    new (ptr) ::goldo::nucleo::robot::ConfigLoadBegin();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::goldo::nucleo::robot::ConfigLoadBegin::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConfigLoadBegin =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfigLoadBegin}, {}};

static void InitDefaultsConfigLoadChunk() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::goldo::nucleo::robot::_ConfigLoadChunk_default_instance_;
    new (ptr) ::goldo::nucleo::robot::ConfigLoadChunk();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::goldo::nucleo::robot::ConfigLoadChunk::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConfigLoadChunk =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfigLoadChunk}, {}};

static void InitDefaultsConfigLoadEnd() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::goldo::nucleo::robot::_ConfigLoadEnd_default_instance_;
    new (ptr) ::goldo::nucleo::robot::ConfigLoadEnd();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::goldo::nucleo::robot::ConfigLoadEnd::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConfigLoadEnd =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfigLoadEnd}, {}};

static void InitDefaultsConfigLoadStatus() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::goldo::nucleo::robot::_ConfigLoadStatus_default_instance_;
    new (ptr) ::goldo::nucleo::robot::ConfigLoadStatus();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::goldo::nucleo::robot::ConfigLoadStatus::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConfigLoadStatus =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfigLoadStatus}, {}};

static void InitDefaultsServoConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::goldo::nucleo::robot::_ServoConfig_default_instance_;
    new (ptr) ::goldo::nucleo::robot::ServoConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::goldo::nucleo::robot::ServoConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ServoConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsServoConfig}, {}};

static void InitDefaultsServosConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::goldo::nucleo::robot::_ServosConfig_default_instance_;
    new (ptr) ::goldo::nucleo::robot::ServosConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::goldo::nucleo::robot::ServosConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ServosConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsServosConfig}, {
      &protobuf_goldo_2fnucleo_2frobot_2eproto::scc_info_ServoConfig.base,}};

static void InitDefaultsRPLidarConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::goldo::nucleo::robot::_RPLidarConfig_default_instance_;
    new (ptr) ::goldo::nucleo::robot::RPLidarConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::goldo::nucleo::robot::RPLidarConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RPLidarConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRPLidarConfig}, {
      &protobuf_goldo_2frplidar_2eproto::scc_info_Tresholds.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigLoadBegin.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigLoadChunk.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigLoadEnd.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigLoadStatus.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ServoConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ServosConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RPLidarConfig.base);
}

::google::protobuf::Metadata file_level_metadata[7];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::robot::ConfigLoadBegin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::robot::ConfigLoadBegin, size_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::robot::ConfigLoadChunk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::robot::ConfigLoadChunk, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::robot::ConfigLoadEnd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::robot::ConfigLoadEnd, crc_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::robot::ConfigLoadStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::robot::ConfigLoadStatus, status_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::robot::ServoConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::robot::ServoConfig, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::robot::ServoConfig, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::robot::ServoConfig, cw_limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::robot::ServoConfig, ccw_limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::robot::ServoConfig, max_speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::robot::ServoConfig, max_torque_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::robot::ServoConfig, name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::robot::ServosConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::robot::ServosConfig, servos_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::robot::RPLidarConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::robot::RPLidarConfig, theta_offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::nucleo::robot::RPLidarConfig, tresholds_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::goldo::nucleo::robot::ConfigLoadBegin)},
  { 6, -1, sizeof(::goldo::nucleo::robot::ConfigLoadChunk)},
  { 12, -1, sizeof(::goldo::nucleo::robot::ConfigLoadEnd)},
  { 18, -1, sizeof(::goldo::nucleo::robot::ConfigLoadStatus)},
  { 24, -1, sizeof(::goldo::nucleo::robot::ServoConfig)},
  { 36, -1, sizeof(::goldo::nucleo::robot::ServosConfig)},
  { 42, -1, sizeof(::goldo::nucleo::robot::RPLidarConfig)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::goldo::nucleo::robot::_ConfigLoadBegin_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::goldo::nucleo::robot::_ConfigLoadChunk_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::goldo::nucleo::robot::_ConfigLoadEnd_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::goldo::nucleo::robot::_ConfigLoadStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::goldo::nucleo::robot::_ServoConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::goldo::nucleo::robot::_ServosConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::goldo::nucleo::robot::_RPLidarConfig_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "goldo/nucleo/robot.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 7);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\030goldo/nucleo/robot.proto\022\022goldo.nucleo"
      ".robot\032\027goldo/pb2_options.proto\032\023goldo/r"
      "plidar.proto\"%\n\017ConfigLoadBegin\022\022\n\004size\030"
      "\001 \001(\rB\004\200\265\030\005\"\037\n\017ConfigLoadChunk\022\014\n\004data\030\001"
      " \001(\014\"\"\n\rConfigLoadEnd\022\021\n\003crc\030\001 \001(\rB\004\200\265\030\005"
      "\"v\n\020ConfigLoadStatus\022A\n\006status\030\001 \001(\0162+.g"
      "oldo.nucleo.robot.ConfigLoadStatus.Statu"
      "sB\004\200\265\030\003\"\037\n\006Status\022\006\n\002OK\020\000\022\r\n\tCRC_ERROR\020\001"
      "\"\312\001\n\013ServoConfig\0221\n\004type\030\001 \001(\0162\035.goldo.n"
      "ucleo.robot.ServoTypeB\004\200\265\030\003\022\020\n\002id\030\002 \001(\005B"
      "\004\200\265\030\003\022\026\n\010cw_limit\030\003 \001(\005B\004\200\265\030\005\022\027\n\tccw_lim"
      "it\030\004 \001(\005B\004\200\265\030\005\022\027\n\tmax_speed\030\005 \001(\005B\004\200\265\030\005\022"
      "\030\n\nmax_torque\030\006 \001(\005B\004\200\265\030\005\022\022\n\004name\030@ \001(\tB"
      "\004\200\265\030\014\"\?\n\014ServosConfig\022/\n\006servos\030\001 \003(\0132\037."
      "goldo.nucleo.robot.ServoConfig\"R\n\rRPLida"
      "rConfig\022\024\n\014theta_offset\030\001 \001(\002\022+\n\ttreshol"
      "ds\030\002 \001(\0132\030.goldo.rplidar.Tresholds*N\n\tSe"
      "rvoType\022\013\n\007UNKNOWN\020\000\022\014\n\010STANDARD\020\001\022\022\n\016DY"
      "NAMIXEL_AX12\020\002\022\022\n\016DYNAMIXEL_MX28\020\003b\006prot"
      "o3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 762);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "goldo/nucleo/robot.proto", &protobuf_RegisterTypes);
  ::protobuf_goldo_2fpb2_5foptions_2eproto::AddDescriptors();
  ::protobuf_goldo_2frplidar_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_goldo_2fnucleo_2frobot_2eproto
namespace goldo {
namespace nucleo {
namespace robot {
const ::google::protobuf::EnumDescriptor* ConfigLoadStatus_Status_descriptor() {
  protobuf_goldo_2fnucleo_2frobot_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_goldo_2fnucleo_2frobot_2eproto::file_level_enum_descriptors[0];
}
bool ConfigLoadStatus_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ConfigLoadStatus_Status ConfigLoadStatus::OK;
const ConfigLoadStatus_Status ConfigLoadStatus::CRC_ERROR;
const ConfigLoadStatus_Status ConfigLoadStatus::Status_MIN;
const ConfigLoadStatus_Status ConfigLoadStatus::Status_MAX;
const int ConfigLoadStatus::Status_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ServoType_descriptor() {
  protobuf_goldo_2fnucleo_2frobot_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_goldo_2fnucleo_2frobot_2eproto::file_level_enum_descriptors[1];
}
bool ServoType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void ConfigLoadBegin::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigLoadBegin::kSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigLoadBegin::ConfigLoadBegin()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_goldo_2fnucleo_2frobot_2eproto::scc_info_ConfigLoadBegin.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:goldo.nucleo.robot.ConfigLoadBegin)
}
ConfigLoadBegin::ConfigLoadBegin(const ConfigLoadBegin& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  size_ = from.size_;
  // @@protoc_insertion_point(copy_constructor:goldo.nucleo.robot.ConfigLoadBegin)
}

void ConfigLoadBegin::SharedCtor() {
  size_ = 0u;
}

ConfigLoadBegin::~ConfigLoadBegin() {
  // @@protoc_insertion_point(destructor:goldo.nucleo.robot.ConfigLoadBegin)
  SharedDtor();
}

void ConfigLoadBegin::SharedDtor() {
}

void ConfigLoadBegin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigLoadBegin::descriptor() {
  ::protobuf_goldo_2fnucleo_2frobot_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2fnucleo_2frobot_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigLoadBegin& ConfigLoadBegin::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_goldo_2fnucleo_2frobot_2eproto::scc_info_ConfigLoadBegin.base);
  return *internal_default_instance();
}


void ConfigLoadBegin::Clear() {
// @@protoc_insertion_point(message_clear_start:goldo.nucleo.robot.ConfigLoadBegin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  size_ = 0u;
  _internal_metadata_.Clear();
}

bool ConfigLoadBegin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:goldo.nucleo.robot.ConfigLoadBegin)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 size = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:goldo.nucleo.robot.ConfigLoadBegin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:goldo.nucleo.robot.ConfigLoadBegin)
  return false;
#undef DO_
}

void ConfigLoadBegin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:goldo.nucleo.robot.ConfigLoadBegin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 size = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->size(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:goldo.nucleo.robot.ConfigLoadBegin)
}

::google::protobuf::uint8* ConfigLoadBegin::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:goldo.nucleo.robot.ConfigLoadBegin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 size = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->size(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:goldo.nucleo.robot.ConfigLoadBegin)
  return target;
}

size_t ConfigLoadBegin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:goldo.nucleo.robot.ConfigLoadBegin)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 size = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigLoadBegin::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:goldo.nucleo.robot.ConfigLoadBegin)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigLoadBegin* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigLoadBegin>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:goldo.nucleo.robot.ConfigLoadBegin)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:goldo.nucleo.robot.ConfigLoadBegin)
    MergeFrom(*source);
  }
}

void ConfigLoadBegin::MergeFrom(const ConfigLoadBegin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:goldo.nucleo.robot.ConfigLoadBegin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.size() != 0) {
    set_size(from.size());
  }
}

void ConfigLoadBegin::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:goldo.nucleo.robot.ConfigLoadBegin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigLoadBegin::CopyFrom(const ConfigLoadBegin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:goldo.nucleo.robot.ConfigLoadBegin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigLoadBegin::IsInitialized() const {
  return true;
}

void ConfigLoadBegin::Swap(ConfigLoadBegin* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConfigLoadBegin::InternalSwap(ConfigLoadBegin* other) {
  using std::swap;
  swap(size_, other->size_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigLoadBegin::GetMetadata() const {
  protobuf_goldo_2fnucleo_2frobot_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2fnucleo_2frobot_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigLoadChunk::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigLoadChunk::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigLoadChunk::ConfigLoadChunk()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_goldo_2fnucleo_2frobot_2eproto::scc_info_ConfigLoadChunk.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:goldo.nucleo.robot.ConfigLoadChunk)
}
ConfigLoadChunk::ConfigLoadChunk(const ConfigLoadChunk& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  // @@protoc_insertion_point(copy_constructor:goldo.nucleo.robot.ConfigLoadChunk)
}

void ConfigLoadChunk::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ConfigLoadChunk::~ConfigLoadChunk() {
  // @@protoc_insertion_point(destructor:goldo.nucleo.robot.ConfigLoadChunk)
  SharedDtor();
}

void ConfigLoadChunk::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConfigLoadChunk::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigLoadChunk::descriptor() {
  ::protobuf_goldo_2fnucleo_2frobot_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2fnucleo_2frobot_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigLoadChunk& ConfigLoadChunk::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_goldo_2fnucleo_2frobot_2eproto::scc_info_ConfigLoadChunk.base);
  return *internal_default_instance();
}


void ConfigLoadChunk::Clear() {
// @@protoc_insertion_point(message_clear_start:goldo.nucleo.robot.ConfigLoadChunk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool ConfigLoadChunk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:goldo.nucleo.robot.ConfigLoadChunk)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:goldo.nucleo.robot.ConfigLoadChunk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:goldo.nucleo.robot.ConfigLoadChunk)
  return false;
#undef DO_
}

void ConfigLoadChunk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:goldo.nucleo.robot.ConfigLoadChunk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->data(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:goldo.nucleo.robot.ConfigLoadChunk)
}

::google::protobuf::uint8* ConfigLoadChunk::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:goldo.nucleo.robot.ConfigLoadChunk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->data(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:goldo.nucleo.robot.ConfigLoadChunk)
  return target;
}

size_t ConfigLoadChunk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:goldo.nucleo.robot.ConfigLoadChunk)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes data = 1;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigLoadChunk::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:goldo.nucleo.robot.ConfigLoadChunk)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigLoadChunk* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigLoadChunk>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:goldo.nucleo.robot.ConfigLoadChunk)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:goldo.nucleo.robot.ConfigLoadChunk)
    MergeFrom(*source);
  }
}

void ConfigLoadChunk::MergeFrom(const ConfigLoadChunk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:goldo.nucleo.robot.ConfigLoadChunk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
}

void ConfigLoadChunk::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:goldo.nucleo.robot.ConfigLoadChunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigLoadChunk::CopyFrom(const ConfigLoadChunk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:goldo.nucleo.robot.ConfigLoadChunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigLoadChunk::IsInitialized() const {
  return true;
}

void ConfigLoadChunk::Swap(ConfigLoadChunk* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConfigLoadChunk::InternalSwap(ConfigLoadChunk* other) {
  using std::swap;
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigLoadChunk::GetMetadata() const {
  protobuf_goldo_2fnucleo_2frobot_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2fnucleo_2frobot_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigLoadEnd::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigLoadEnd::kCrcFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigLoadEnd::ConfigLoadEnd()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_goldo_2fnucleo_2frobot_2eproto::scc_info_ConfigLoadEnd.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:goldo.nucleo.robot.ConfigLoadEnd)
}
ConfigLoadEnd::ConfigLoadEnd(const ConfigLoadEnd& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  crc_ = from.crc_;
  // @@protoc_insertion_point(copy_constructor:goldo.nucleo.robot.ConfigLoadEnd)
}

void ConfigLoadEnd::SharedCtor() {
  crc_ = 0u;
}

ConfigLoadEnd::~ConfigLoadEnd() {
  // @@protoc_insertion_point(destructor:goldo.nucleo.robot.ConfigLoadEnd)
  SharedDtor();
}

void ConfigLoadEnd::SharedDtor() {
}

void ConfigLoadEnd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigLoadEnd::descriptor() {
  ::protobuf_goldo_2fnucleo_2frobot_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2fnucleo_2frobot_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigLoadEnd& ConfigLoadEnd::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_goldo_2fnucleo_2frobot_2eproto::scc_info_ConfigLoadEnd.base);
  return *internal_default_instance();
}


void ConfigLoadEnd::Clear() {
// @@protoc_insertion_point(message_clear_start:goldo.nucleo.robot.ConfigLoadEnd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  crc_ = 0u;
  _internal_metadata_.Clear();
}

bool ConfigLoadEnd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:goldo.nucleo.robot.ConfigLoadEnd)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 crc = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:goldo.nucleo.robot.ConfigLoadEnd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:goldo.nucleo.robot.ConfigLoadEnd)
  return false;
#undef DO_
}

void ConfigLoadEnd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:goldo.nucleo.robot.ConfigLoadEnd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 crc = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->crc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->crc(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:goldo.nucleo.robot.ConfigLoadEnd)
}

::google::protobuf::uint8* ConfigLoadEnd::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:goldo.nucleo.robot.ConfigLoadEnd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 crc = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->crc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->crc(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:goldo.nucleo.robot.ConfigLoadEnd)
  return target;
}

size_t ConfigLoadEnd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:goldo.nucleo.robot.ConfigLoadEnd)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 crc = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->crc() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->crc());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigLoadEnd::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:goldo.nucleo.robot.ConfigLoadEnd)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigLoadEnd* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigLoadEnd>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:goldo.nucleo.robot.ConfigLoadEnd)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:goldo.nucleo.robot.ConfigLoadEnd)
    MergeFrom(*source);
  }
}

void ConfigLoadEnd::MergeFrom(const ConfigLoadEnd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:goldo.nucleo.robot.ConfigLoadEnd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.crc() != 0) {
    set_crc(from.crc());
  }
}

void ConfigLoadEnd::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:goldo.nucleo.robot.ConfigLoadEnd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigLoadEnd::CopyFrom(const ConfigLoadEnd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:goldo.nucleo.robot.ConfigLoadEnd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigLoadEnd::IsInitialized() const {
  return true;
}

void ConfigLoadEnd::Swap(ConfigLoadEnd* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConfigLoadEnd::InternalSwap(ConfigLoadEnd* other) {
  using std::swap;
  swap(crc_, other->crc_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigLoadEnd::GetMetadata() const {
  protobuf_goldo_2fnucleo_2frobot_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2fnucleo_2frobot_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigLoadStatus::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigLoadStatus::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigLoadStatus::ConfigLoadStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_goldo_2fnucleo_2frobot_2eproto::scc_info_ConfigLoadStatus.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:goldo.nucleo.robot.ConfigLoadStatus)
}
ConfigLoadStatus::ConfigLoadStatus(const ConfigLoadStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:goldo.nucleo.robot.ConfigLoadStatus)
}

void ConfigLoadStatus::SharedCtor() {
  status_ = 0;
}

ConfigLoadStatus::~ConfigLoadStatus() {
  // @@protoc_insertion_point(destructor:goldo.nucleo.robot.ConfigLoadStatus)
  SharedDtor();
}

void ConfigLoadStatus::SharedDtor() {
}

void ConfigLoadStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigLoadStatus::descriptor() {
  ::protobuf_goldo_2fnucleo_2frobot_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2fnucleo_2frobot_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigLoadStatus& ConfigLoadStatus::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_goldo_2fnucleo_2frobot_2eproto::scc_info_ConfigLoadStatus.base);
  return *internal_default_instance();
}


void ConfigLoadStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:goldo.nucleo.robot.ConfigLoadStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = 0;
  _internal_metadata_.Clear();
}

bool ConfigLoadStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:goldo.nucleo.robot.ConfigLoadStatus)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .goldo.nucleo.robot.ConfigLoadStatus.Status status = 1 [(.goldo.pb2_options.cpp_type) = UINT8];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::goldo::nucleo::robot::ConfigLoadStatus_Status >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:goldo.nucleo.robot.ConfigLoadStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:goldo.nucleo.robot.ConfigLoadStatus)
  return false;
#undef DO_
}

void ConfigLoadStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:goldo.nucleo.robot.ConfigLoadStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .goldo.nucleo.robot.ConfigLoadStatus.Status status = 1 [(.goldo.pb2_options.cpp_type) = UINT8];
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:goldo.nucleo.robot.ConfigLoadStatus)
}

::google::protobuf::uint8* ConfigLoadStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:goldo.nucleo.robot.ConfigLoadStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .goldo.nucleo.robot.ConfigLoadStatus.Status status = 1 [(.goldo.pb2_options.cpp_type) = UINT8];
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:goldo.nucleo.robot.ConfigLoadStatus)
  return target;
}

size_t ConfigLoadStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:goldo.nucleo.robot.ConfigLoadStatus)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .goldo.nucleo.robot.ConfigLoadStatus.Status status = 1 [(.goldo.pb2_options.cpp_type) = UINT8];
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigLoadStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:goldo.nucleo.robot.ConfigLoadStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigLoadStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigLoadStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:goldo.nucleo.robot.ConfigLoadStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:goldo.nucleo.robot.ConfigLoadStatus)
    MergeFrom(*source);
  }
}

void ConfigLoadStatus::MergeFrom(const ConfigLoadStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:goldo.nucleo.robot.ConfigLoadStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status() != 0) {
    set_status(from.status());
  }
}

void ConfigLoadStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:goldo.nucleo.robot.ConfigLoadStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigLoadStatus::CopyFrom(const ConfigLoadStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:goldo.nucleo.robot.ConfigLoadStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigLoadStatus::IsInitialized() const {
  return true;
}

void ConfigLoadStatus::Swap(ConfigLoadStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConfigLoadStatus::InternalSwap(ConfigLoadStatus* other) {
  using std::swap;
  swap(status_, other->status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigLoadStatus::GetMetadata() const {
  protobuf_goldo_2fnucleo_2frobot_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2fnucleo_2frobot_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ServoConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServoConfig::kTypeFieldNumber;
const int ServoConfig::kIdFieldNumber;
const int ServoConfig::kCwLimitFieldNumber;
const int ServoConfig::kCcwLimitFieldNumber;
const int ServoConfig::kMaxSpeedFieldNumber;
const int ServoConfig::kMaxTorqueFieldNumber;
const int ServoConfig::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServoConfig::ServoConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_goldo_2fnucleo_2frobot_2eproto::scc_info_ServoConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:goldo.nucleo.robot.ServoConfig)
}
ServoConfig::ServoConfig(const ServoConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_torque_) -
    reinterpret_cast<char*>(&type_)) + sizeof(max_torque_));
  // @@protoc_insertion_point(copy_constructor:goldo.nucleo.robot.ServoConfig)
}

void ServoConfig::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_torque_) -
      reinterpret_cast<char*>(&type_)) + sizeof(max_torque_));
}

ServoConfig::~ServoConfig() {
  // @@protoc_insertion_point(destructor:goldo.nucleo.robot.ServoConfig)
  SharedDtor();
}

void ServoConfig::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ServoConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ServoConfig::descriptor() {
  ::protobuf_goldo_2fnucleo_2frobot_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2fnucleo_2frobot_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ServoConfig& ServoConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_goldo_2fnucleo_2frobot_2eproto::scc_info_ServoConfig.base);
  return *internal_default_instance();
}


void ServoConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:goldo.nucleo.robot.ServoConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_torque_) -
      reinterpret_cast<char*>(&type_)) + sizeof(max_torque_));
  _internal_metadata_.Clear();
}

bool ServoConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:goldo.nucleo.robot.ServoConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .goldo.nucleo.robot.ServoType type = 1 [(.goldo.pb2_options.cpp_type) = UINT8];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::goldo::nucleo::robot::ServoType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 id = 2 [(.goldo.pb2_options.cpp_type) = UINT8];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 cw_limit = 3 [(.goldo.pb2_options.cpp_type) = UINT16];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cw_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ccw_limit = 4 [(.goldo.pb2_options.cpp_type) = UINT16];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ccw_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 max_speed = 5 [(.goldo.pb2_options.cpp_type) = UINT16];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 max_torque = 6 [(.goldo.pb2_options.cpp_type) = UINT16];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_torque_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 64 [(.goldo.pb2_options.cpp_type) = VOID];
      case 64: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(2u /* 514 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "goldo.nucleo.robot.ServoConfig.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:goldo.nucleo.robot.ServoConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:goldo.nucleo.robot.ServoConfig)
  return false;
#undef DO_
}

void ServoConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:goldo.nucleo.robot.ServoConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .goldo.nucleo.robot.ServoType type = 1 [(.goldo.pb2_options.cpp_type) = UINT8];
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // int32 id = 2 [(.goldo.pb2_options.cpp_type) = UINT8];
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // int32 cw_limit = 3 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->cw_limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cw_limit(), output);
  }

  // int32 ccw_limit = 4 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->ccw_limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ccw_limit(), output);
  }

  // int32 max_speed = 5 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->max_speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->max_speed(), output);
  }

  // int32 max_torque = 6 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->max_torque() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->max_torque(), output);
  }

  // string name = 64 [(.goldo.pb2_options.cpp_type) = VOID];
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "goldo.nucleo.robot.ServoConfig.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      64, this->name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:goldo.nucleo.robot.ServoConfig)
}

::google::protobuf::uint8* ServoConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:goldo.nucleo.robot.ServoConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .goldo.nucleo.robot.ServoType type = 1 [(.goldo.pb2_options.cpp_type) = UINT8];
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // int32 id = 2 [(.goldo.pb2_options.cpp_type) = UINT8];
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // int32 cw_limit = 3 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->cw_limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cw_limit(), target);
  }

  // int32 ccw_limit = 4 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->ccw_limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ccw_limit(), target);
  }

  // int32 max_speed = 5 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->max_speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->max_speed(), target);
  }

  // int32 max_torque = 6 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->max_torque() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->max_torque(), target);
  }

  // string name = 64 [(.goldo.pb2_options.cpp_type) = VOID];
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "goldo.nucleo.robot.ServoConfig.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        64, this->name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:goldo.nucleo.robot.ServoConfig)
  return target;
}

size_t ServoConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:goldo.nucleo.robot.ServoConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 64 [(.goldo.pb2_options.cpp_type) = VOID];
  if (this->name().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .goldo.nucleo.robot.ServoType type = 1 [(.goldo.pb2_options.cpp_type) = UINT8];
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // int32 id = 2 [(.goldo.pb2_options.cpp_type) = UINT8];
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // int32 cw_limit = 3 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->cw_limit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cw_limit());
  }

  // int32 ccw_limit = 4 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->ccw_limit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ccw_limit());
  }

  // int32 max_speed = 5 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->max_speed() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_speed());
  }

  // int32 max_torque = 6 [(.goldo.pb2_options.cpp_type) = UINT16];
  if (this->max_torque() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_torque());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServoConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:goldo.nucleo.robot.ServoConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ServoConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServoConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:goldo.nucleo.robot.ServoConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:goldo.nucleo.robot.ServoConfig)
    MergeFrom(*source);
  }
}

void ServoConfig::MergeFrom(const ServoConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:goldo.nucleo.robot.ServoConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.cw_limit() != 0) {
    set_cw_limit(from.cw_limit());
  }
  if (from.ccw_limit() != 0) {
    set_ccw_limit(from.ccw_limit());
  }
  if (from.max_speed() != 0) {
    set_max_speed(from.max_speed());
  }
  if (from.max_torque() != 0) {
    set_max_torque(from.max_torque());
  }
}

void ServoConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:goldo.nucleo.robot.ServoConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServoConfig::CopyFrom(const ServoConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:goldo.nucleo.robot.ServoConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServoConfig::IsInitialized() const {
  return true;
}

void ServoConfig::Swap(ServoConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServoConfig::InternalSwap(ServoConfig* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
  swap(id_, other->id_);
  swap(cw_limit_, other->cw_limit_);
  swap(ccw_limit_, other->ccw_limit_);
  swap(max_speed_, other->max_speed_);
  swap(max_torque_, other->max_torque_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ServoConfig::GetMetadata() const {
  protobuf_goldo_2fnucleo_2frobot_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2fnucleo_2frobot_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ServosConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServosConfig::kServosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServosConfig::ServosConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_goldo_2fnucleo_2frobot_2eproto::scc_info_ServosConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:goldo.nucleo.robot.ServosConfig)
}
ServosConfig::ServosConfig(const ServosConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      servos_(from.servos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:goldo.nucleo.robot.ServosConfig)
}

void ServosConfig::SharedCtor() {
}

ServosConfig::~ServosConfig() {
  // @@protoc_insertion_point(destructor:goldo.nucleo.robot.ServosConfig)
  SharedDtor();
}

void ServosConfig::SharedDtor() {
}

void ServosConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ServosConfig::descriptor() {
  ::protobuf_goldo_2fnucleo_2frobot_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2fnucleo_2frobot_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ServosConfig& ServosConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_goldo_2fnucleo_2frobot_2eproto::scc_info_ServosConfig.base);
  return *internal_default_instance();
}


void ServosConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:goldo.nucleo.robot.ServosConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  servos_.Clear();
  _internal_metadata_.Clear();
}

bool ServosConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:goldo.nucleo.robot.ServosConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .goldo.nucleo.robot.ServoConfig servos = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_servos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:goldo.nucleo.robot.ServosConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:goldo.nucleo.robot.ServosConfig)
  return false;
#undef DO_
}

void ServosConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:goldo.nucleo.robot.ServosConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .goldo.nucleo.robot.ServoConfig servos = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->servos_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->servos(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:goldo.nucleo.robot.ServosConfig)
}

::google::protobuf::uint8* ServosConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:goldo.nucleo.robot.ServosConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .goldo.nucleo.robot.ServoConfig servos = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->servos_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->servos(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:goldo.nucleo.robot.ServosConfig)
  return target;
}

size_t ServosConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:goldo.nucleo.robot.ServosConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .goldo.nucleo.robot.ServoConfig servos = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->servos_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->servos(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServosConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:goldo.nucleo.robot.ServosConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ServosConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServosConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:goldo.nucleo.robot.ServosConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:goldo.nucleo.robot.ServosConfig)
    MergeFrom(*source);
  }
}

void ServosConfig::MergeFrom(const ServosConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:goldo.nucleo.robot.ServosConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  servos_.MergeFrom(from.servos_);
}

void ServosConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:goldo.nucleo.robot.ServosConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServosConfig::CopyFrom(const ServosConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:goldo.nucleo.robot.ServosConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServosConfig::IsInitialized() const {
  return true;
}

void ServosConfig::Swap(ServosConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServosConfig::InternalSwap(ServosConfig* other) {
  using std::swap;
  CastToBase(&servos_)->InternalSwap(CastToBase(&other->servos_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ServosConfig::GetMetadata() const {
  protobuf_goldo_2fnucleo_2frobot_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2fnucleo_2frobot_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RPLidarConfig::InitAsDefaultInstance() {
  ::goldo::nucleo::robot::_RPLidarConfig_default_instance_._instance.get_mutable()->tresholds_ = const_cast< ::goldo::rplidar::Tresholds*>(
      ::goldo::rplidar::Tresholds::internal_default_instance());
}
void RPLidarConfig::clear_tresholds() {
  if (GetArenaNoVirtual() == NULL && tresholds_ != NULL) {
    delete tresholds_;
  }
  tresholds_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RPLidarConfig::kThetaOffsetFieldNumber;
const int RPLidarConfig::kTresholdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RPLidarConfig::RPLidarConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_goldo_2fnucleo_2frobot_2eproto::scc_info_RPLidarConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:goldo.nucleo.robot.RPLidarConfig)
}
RPLidarConfig::RPLidarConfig(const RPLidarConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_tresholds()) {
    tresholds_ = new ::goldo::rplidar::Tresholds(*from.tresholds_);
  } else {
    tresholds_ = NULL;
  }
  theta_offset_ = from.theta_offset_;
  // @@protoc_insertion_point(copy_constructor:goldo.nucleo.robot.RPLidarConfig)
}

void RPLidarConfig::SharedCtor() {
  ::memset(&tresholds_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&theta_offset_) -
      reinterpret_cast<char*>(&tresholds_)) + sizeof(theta_offset_));
}

RPLidarConfig::~RPLidarConfig() {
  // @@protoc_insertion_point(destructor:goldo.nucleo.robot.RPLidarConfig)
  SharedDtor();
}

void RPLidarConfig::SharedDtor() {
  if (this != internal_default_instance()) delete tresholds_;
}

void RPLidarConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RPLidarConfig::descriptor() {
  ::protobuf_goldo_2fnucleo_2frobot_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2fnucleo_2frobot_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RPLidarConfig& RPLidarConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_goldo_2fnucleo_2frobot_2eproto::scc_info_RPLidarConfig.base);
  return *internal_default_instance();
}


void RPLidarConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:goldo.nucleo.robot.RPLidarConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && tresholds_ != NULL) {
    delete tresholds_;
  }
  tresholds_ = NULL;
  theta_offset_ = 0;
  _internal_metadata_.Clear();
}

bool RPLidarConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:goldo.nucleo.robot.RPLidarConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float theta_offset = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &theta_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .goldo.rplidar.Tresholds tresholds = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tresholds()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:goldo.nucleo.robot.RPLidarConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:goldo.nucleo.robot.RPLidarConfig)
  return false;
#undef DO_
}

void RPLidarConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:goldo.nucleo.robot.RPLidarConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float theta_offset = 1;
  if (this->theta_offset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->theta_offset(), output);
  }

  // .goldo.rplidar.Tresholds tresholds = 2;
  if (this->has_tresholds()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_tresholds(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:goldo.nucleo.robot.RPLidarConfig)
}

::google::protobuf::uint8* RPLidarConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:goldo.nucleo.robot.RPLidarConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float theta_offset = 1;
  if (this->theta_offset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->theta_offset(), target);
  }

  // .goldo.rplidar.Tresholds tresholds = 2;
  if (this->has_tresholds()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_tresholds(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:goldo.nucleo.robot.RPLidarConfig)
  return target;
}

size_t RPLidarConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:goldo.nucleo.robot.RPLidarConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .goldo.rplidar.Tresholds tresholds = 2;
  if (this->has_tresholds()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *tresholds_);
  }

  // float theta_offset = 1;
  if (this->theta_offset() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RPLidarConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:goldo.nucleo.robot.RPLidarConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const RPLidarConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RPLidarConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:goldo.nucleo.robot.RPLidarConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:goldo.nucleo.robot.RPLidarConfig)
    MergeFrom(*source);
  }
}

void RPLidarConfig::MergeFrom(const RPLidarConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:goldo.nucleo.robot.RPLidarConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_tresholds()) {
    mutable_tresholds()->::goldo::rplidar::Tresholds::MergeFrom(from.tresholds());
  }
  if (from.theta_offset() != 0) {
    set_theta_offset(from.theta_offset());
  }
}

void RPLidarConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:goldo.nucleo.robot.RPLidarConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RPLidarConfig::CopyFrom(const RPLidarConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:goldo.nucleo.robot.RPLidarConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RPLidarConfig::IsInitialized() const {
  return true;
}

void RPLidarConfig::Swap(RPLidarConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RPLidarConfig::InternalSwap(RPLidarConfig* other) {
  using std::swap;
  swap(tresholds_, other->tresholds_);
  swap(theta_offset_, other->theta_offset_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RPLidarConfig::GetMetadata() const {
  protobuf_goldo_2fnucleo_2frobot_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2fnucleo_2frobot_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace robot
}  // namespace nucleo
}  // namespace goldo
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::goldo::nucleo::robot::ConfigLoadBegin* Arena::CreateMaybeMessage< ::goldo::nucleo::robot::ConfigLoadBegin >(Arena* arena) {
  return Arena::CreateInternal< ::goldo::nucleo::robot::ConfigLoadBegin >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::goldo::nucleo::robot::ConfigLoadChunk* Arena::CreateMaybeMessage< ::goldo::nucleo::robot::ConfigLoadChunk >(Arena* arena) {
  return Arena::CreateInternal< ::goldo::nucleo::robot::ConfigLoadChunk >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::goldo::nucleo::robot::ConfigLoadEnd* Arena::CreateMaybeMessage< ::goldo::nucleo::robot::ConfigLoadEnd >(Arena* arena) {
  return Arena::CreateInternal< ::goldo::nucleo::robot::ConfigLoadEnd >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::goldo::nucleo::robot::ConfigLoadStatus* Arena::CreateMaybeMessage< ::goldo::nucleo::robot::ConfigLoadStatus >(Arena* arena) {
  return Arena::CreateInternal< ::goldo::nucleo::robot::ConfigLoadStatus >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::goldo::nucleo::robot::ServoConfig* Arena::CreateMaybeMessage< ::goldo::nucleo::robot::ServoConfig >(Arena* arena) {
  return Arena::CreateInternal< ::goldo::nucleo::robot::ServoConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::goldo::nucleo::robot::ServosConfig* Arena::CreateMaybeMessage< ::goldo::nucleo::robot::ServosConfig >(Arena* arena) {
  return Arena::CreateInternal< ::goldo::nucleo::robot::ServosConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::goldo::nucleo::robot::RPLidarConfig* Arena::CreateMaybeMessage< ::goldo::nucleo::robot::RPLidarConfig >(Arena* arena) {
  return Arena::CreateInternal< ::goldo::nucleo::robot::RPLidarConfig >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
