// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: goldo/nucleo/servos.proto

#ifndef PROTOBUF_INCLUDED_goldo_2fnucleo_2fservos_2eproto
#define PROTOBUF_INCLUDED_goldo_2fnucleo_2fservos_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "goldo/pb2_options.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_goldo_2fnucleo_2fservos_2eproto 

namespace protobuf_goldo_2fnucleo_2fservos_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[14];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_goldo_2fnucleo_2fservos_2eproto
namespace goldo {
namespace nucleo {
namespace servos {
class CmdDisableAll;
class CmdDisableAllDefaultTypeInternal;
extern CmdDisableAllDefaultTypeInternal _CmdDisableAll_default_instance_;
class CmdLiftDoHoming;
class CmdLiftDoHomingDefaultTypeInternal;
extern CmdLiftDoHomingDefaultTypeInternal _CmdLiftDoHoming_default_instance_;
class CmdLiftSetEnable;
class CmdLiftSetEnableDefaultTypeInternal;
extern CmdLiftSetEnableDefaultTypeInternal _CmdLiftSetEnable_default_instance_;
class CmdLiftsRaw;
class CmdLiftsRawDefaultTypeInternal;
extern CmdLiftsRawDefaultTypeInternal _CmdLiftsRaw_default_instance_;
class CmdMoveMultiple;
class CmdMoveMultipleDefaultTypeInternal;
extern CmdMoveMultipleDefaultTypeInternal _CmdMoveMultiple_default_instance_;
class CmdSetEnable;
class CmdSetEnableDefaultTypeInternal;
extern CmdSetEnableDefaultTypeInternal _CmdSetEnable_default_instance_;
class CmdSetMaxTorques;
class CmdSetMaxTorquesDefaultTypeInternal;
extern CmdSetMaxTorquesDefaultTypeInternal _CmdSetMaxTorques_default_instance_;
class LiftConfig;
class LiftConfigDefaultTypeInternal;
extern LiftConfigDefaultTypeInternal _LiftConfig_default_instance_;
class ServoConfig;
class ServoConfigDefaultTypeInternal;
extern ServoConfigDefaultTypeInternal _ServoConfig_default_instance_;
class ServoEnable;
class ServoEnableDefaultTypeInternal;
extern ServoEnableDefaultTypeInternal _ServoEnable_default_instance_;
class ServoPosition;
class ServoPositionDefaultTypeInternal;
extern ServoPositionDefaultTypeInternal _ServoPosition_default_instance_;
class ServoState;
class ServoStateDefaultTypeInternal;
extern ServoStateDefaultTypeInternal _ServoState_default_instance_;
class ServoStates;
class ServoStatesDefaultTypeInternal;
extern ServoStatesDefaultTypeInternal _ServoStates_default_instance_;
class ServoTorque;
class ServoTorqueDefaultTypeInternal;
extern ServoTorqueDefaultTypeInternal _ServoTorque_default_instance_;
}  // namespace servos
}  // namespace nucleo
}  // namespace goldo
namespace google {
namespace protobuf {
template<> ::goldo::nucleo::servos::CmdDisableAll* Arena::CreateMaybeMessage<::goldo::nucleo::servos::CmdDisableAll>(Arena*);
template<> ::goldo::nucleo::servos::CmdLiftDoHoming* Arena::CreateMaybeMessage<::goldo::nucleo::servos::CmdLiftDoHoming>(Arena*);
template<> ::goldo::nucleo::servos::CmdLiftSetEnable* Arena::CreateMaybeMessage<::goldo::nucleo::servos::CmdLiftSetEnable>(Arena*);
template<> ::goldo::nucleo::servos::CmdLiftsRaw* Arena::CreateMaybeMessage<::goldo::nucleo::servos::CmdLiftsRaw>(Arena*);
template<> ::goldo::nucleo::servos::CmdMoveMultiple* Arena::CreateMaybeMessage<::goldo::nucleo::servos::CmdMoveMultiple>(Arena*);
template<> ::goldo::nucleo::servos::CmdSetEnable* Arena::CreateMaybeMessage<::goldo::nucleo::servos::CmdSetEnable>(Arena*);
template<> ::goldo::nucleo::servos::CmdSetMaxTorques* Arena::CreateMaybeMessage<::goldo::nucleo::servos::CmdSetMaxTorques>(Arena*);
template<> ::goldo::nucleo::servos::LiftConfig* Arena::CreateMaybeMessage<::goldo::nucleo::servos::LiftConfig>(Arena*);
template<> ::goldo::nucleo::servos::ServoConfig* Arena::CreateMaybeMessage<::goldo::nucleo::servos::ServoConfig>(Arena*);
template<> ::goldo::nucleo::servos::ServoEnable* Arena::CreateMaybeMessage<::goldo::nucleo::servos::ServoEnable>(Arena*);
template<> ::goldo::nucleo::servos::ServoPosition* Arena::CreateMaybeMessage<::goldo::nucleo::servos::ServoPosition>(Arena*);
template<> ::goldo::nucleo::servos::ServoState* Arena::CreateMaybeMessage<::goldo::nucleo::servos::ServoState>(Arena*);
template<> ::goldo::nucleo::servos::ServoStates* Arena::CreateMaybeMessage<::goldo::nucleo::servos::ServoStates>(Arena*);
template<> ::goldo::nucleo::servos::ServoTorque* Arena::CreateMaybeMessage<::goldo::nucleo::servos::ServoTorque>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace goldo {
namespace nucleo {
namespace servos {

enum ServoType {
  UNKNOWN = 0,
  STANDARD = 1,
  DYNAMIXEL_AX12 = 2,
  DYNAMIXEL_MX28 = 3,
  GOLDO_LIFT = 4,
  ServoType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ServoType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ServoType_IsValid(int value);
const ServoType ServoType_MIN = UNKNOWN;
const ServoType ServoType_MAX = GOLDO_LIFT;
const int ServoType_ARRAYSIZE = ServoType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ServoType_descriptor();
inline const ::std::string& ServoType_Name(ServoType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ServoType_descriptor(), value);
}
inline bool ServoType_Parse(
    const ::std::string& name, ServoType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ServoType>(
    ServoType_descriptor(), name, value);
}
// ===================================================================

class ServoConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:goldo.nucleo.servos.ServoConfig) */ {
 public:
  ServoConfig();
  virtual ~ServoConfig();

  ServoConfig(const ServoConfig& from);

  inline ServoConfig& operator=(const ServoConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServoConfig(ServoConfig&& from) noexcept
    : ServoConfig() {
    *this = ::std::move(from);
  }

  inline ServoConfig& operator=(ServoConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServoConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServoConfig* internal_default_instance() {
    return reinterpret_cast<const ServoConfig*>(
               &_ServoConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ServoConfig* other);
  friend void swap(ServoConfig& a, ServoConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServoConfig* New() const final {
    return CreateMaybeMessage<ServoConfig>(NULL);
  }

  ServoConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ServoConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ServoConfig& from);
  void MergeFrom(const ServoConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServoConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 64 [(.goldo.pb2_options.cpp_type) = VOID];
  void clear_name();
  static const int kNameFieldNumber = 64;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .goldo.nucleo.servos.ServoType type = 1 [(.goldo.pb2_options.cpp_type) = UINT8];
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::goldo::nucleo::servos::ServoType type() const;
  void set_type(::goldo::nucleo::servos::ServoType value);

  // int32 id = 2 [(.goldo.pb2_options.cpp_type) = UINT8];
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // int32 cw_limit = 3 [(.goldo.pb2_options.cpp_type) = UINT16];
  void clear_cw_limit();
  static const int kCwLimitFieldNumber = 3;
  ::google::protobuf::int32 cw_limit() const;
  void set_cw_limit(::google::protobuf::int32 value);

  // int32 ccw_limit = 4 [(.goldo.pb2_options.cpp_type) = UINT16];
  void clear_ccw_limit();
  static const int kCcwLimitFieldNumber = 4;
  ::google::protobuf::int32 ccw_limit() const;
  void set_ccw_limit(::google::protobuf::int32 value);

  // int32 max_speed = 5 [(.goldo.pb2_options.cpp_type) = UINT16];
  void clear_max_speed();
  static const int kMaxSpeedFieldNumber = 5;
  ::google::protobuf::int32 max_speed() const;
  void set_max_speed(::google::protobuf::int32 value);

  // int32 max_torque = 6 [(.goldo.pb2_options.cpp_type) = UINT16];
  void clear_max_torque();
  static const int kMaxTorqueFieldNumber = 6;
  ::google::protobuf::int32 max_torque() const;
  void set_max_torque(::google::protobuf::int32 value);

  // int32 reserved = 100 [(.goldo.pb2_options.cpp_type) = VOID];
  void clear_reserved();
  static const int kReservedFieldNumber = 100;
  ::google::protobuf::int32 reserved() const;
  void set_reserved(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:goldo.nucleo.servos.ServoConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  int type_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 cw_limit_;
  ::google::protobuf::int32 ccw_limit_;
  ::google::protobuf::int32 max_speed_;
  ::google::protobuf::int32 max_torque_;
  ::google::protobuf::int32 reserved_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_goldo_2fnucleo_2fservos_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LiftConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:goldo.nucleo.servos.LiftConfig) */ {
 public:
  LiftConfig();
  virtual ~LiftConfig();

  LiftConfig(const LiftConfig& from);

  inline LiftConfig& operator=(const LiftConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LiftConfig(LiftConfig&& from) noexcept
    : LiftConfig() {
    *this = ::std::move(from);
  }

  inline LiftConfig& operator=(LiftConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LiftConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LiftConfig* internal_default_instance() {
    return reinterpret_cast<const LiftConfig*>(
               &_LiftConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(LiftConfig* other);
  friend void swap(LiftConfig& a, LiftConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LiftConfig* New() const final {
    return CreateMaybeMessage<LiftConfig>(NULL);
  }

  LiftConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LiftConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LiftConfig& from);
  void MergeFrom(const LiftConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LiftConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 kp = 1 [(.goldo.pb2_options.cpp_type) = UINT32];
  void clear_kp();
  static const int kKpFieldNumber = 1;
  ::google::protobuf::int32 kp() const;
  void set_kp(::google::protobuf::int32 value);

  // int32 ki = 2 [(.goldo.pb2_options.cpp_type) = UINT32];
  void clear_ki();
  static const int kKiFieldNumber = 2;
  ::google::protobuf::int32 ki() const;
  void set_ki(::google::protobuf::int32 value);

  // int32 kd = 3 [(.goldo.pb2_options.cpp_type) = UINT32];
  void clear_kd();
  static const int kKdFieldNumber = 3;
  ::google::protobuf::int32 kd() const;
  void set_kd(::google::protobuf::int32 value);

  // int32 range = 4 [(.goldo.pb2_options.cpp_type) = UINT16];
  void clear_range();
  static const int kRangeFieldNumber = 4;
  ::google::protobuf::int32 range() const;
  void set_range(::google::protobuf::int32 value);

  // int32 pwm_clamp = 5 [(.goldo.pb2_options.cpp_type) = UINT16];
  void clear_pwm_clamp();
  static const int kPwmClampFieldNumber = 5;
  ::google::protobuf::int32 pwm_clamp() const;
  void set_pwm_clamp(::google::protobuf::int32 value);

  // int32 block_trig = 6 [(.goldo.pb2_options.cpp_type) = UINT16];
  void clear_block_trig();
  static const int kBlockTrigFieldNumber = 6;
  ::google::protobuf::int32 block_trig() const;
  void set_block_trig(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:goldo.nucleo.servos.LiftConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 kp_;
  ::google::protobuf::int32 ki_;
  ::google::protobuf::int32 kd_;
  ::google::protobuf::int32 range_;
  ::google::protobuf::int32 pwm_clamp_;
  ::google::protobuf::int32 block_trig_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_goldo_2fnucleo_2fservos_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ServoState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:goldo.nucleo.servos.ServoState) */ {
 public:
  ServoState();
  virtual ~ServoState();

  ServoState(const ServoState& from);

  inline ServoState& operator=(const ServoState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServoState(ServoState&& from) noexcept
    : ServoState() {
    *this = ::std::move(from);
  }

  inline ServoState& operator=(ServoState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServoState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServoState* internal_default_instance() {
    return reinterpret_cast<const ServoState*>(
               &_ServoState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ServoState* other);
  friend void swap(ServoState& a, ServoState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServoState* New() const final {
    return CreateMaybeMessage<ServoState>(NULL);
  }

  ServoState* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ServoState>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ServoState& from);
  void MergeFrom(const ServoState& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServoState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 position = 2 [(.goldo.pb2_options.cpp_type) = UINT16];
  void clear_position();
  static const int kPositionFieldNumber = 2;
  ::google::protobuf::uint32 position() const;
  void set_position(::google::protobuf::uint32 value);

  // uint32 measured_position = 3 [(.goldo.pb2_options.cpp_type) = UINT16];
  void clear_measured_position();
  static const int kMeasuredPositionFieldNumber = 3;
  ::google::protobuf::uint32 measured_position() const;
  void set_measured_position(::google::protobuf::uint32 value);

  // int32 measured_load = 5 [(.goldo.pb2_options.cpp_type) = INT16];
  void clear_measured_load();
  static const int kMeasuredLoadFieldNumber = 5;
  ::google::protobuf::int32 measured_load() const;
  void set_measured_load(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:goldo.nucleo.servos.ServoState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 position_;
  ::google::protobuf::uint32 measured_position_;
  ::google::protobuf::int32 measured_load_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_goldo_2fnucleo_2fservos_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ServoStates : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:goldo.nucleo.servos.ServoStates) */ {
 public:
  ServoStates();
  virtual ~ServoStates();

  ServoStates(const ServoStates& from);

  inline ServoStates& operator=(const ServoStates& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServoStates(ServoStates&& from) noexcept
    : ServoStates() {
    *this = ::std::move(from);
  }

  inline ServoStates& operator=(ServoStates&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServoStates& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServoStates* internal_default_instance() {
    return reinterpret_cast<const ServoStates*>(
               &_ServoStates_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(ServoStates* other);
  friend void swap(ServoStates& a, ServoStates& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServoStates* New() const final {
    return CreateMaybeMessage<ServoStates>(NULL);
  }

  ServoStates* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ServoStates>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ServoStates& from);
  void MergeFrom(const ServoStates& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServoStates* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .goldo.nucleo.servos.ServoState servos = 4;
  int servos_size() const;
  void clear_servos();
  static const int kServosFieldNumber = 4;
  ::goldo::nucleo::servos::ServoState* mutable_servos(int index);
  ::google::protobuf::RepeatedPtrField< ::goldo::nucleo::servos::ServoState >*
      mutable_servos();
  const ::goldo::nucleo::servos::ServoState& servos(int index) const;
  ::goldo::nucleo::servos::ServoState* add_servos();
  const ::google::protobuf::RepeatedPtrField< ::goldo::nucleo::servos::ServoState >&
      servos() const;

  // uint32 timestamp = 1 [(.goldo.pb2_options.cpp_type) = UINT32];
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  ::google::protobuf::uint32 timestamp() const;
  void set_timestamp(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:goldo.nucleo.servos.ServoStates)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::goldo::nucleo::servos::ServoState > servos_;
  ::google::protobuf::uint32 timestamp_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_goldo_2fnucleo_2fservos_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ServoPosition : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:goldo.nucleo.servos.ServoPosition) */ {
 public:
  ServoPosition();
  virtual ~ServoPosition();

  ServoPosition(const ServoPosition& from);

  inline ServoPosition& operator=(const ServoPosition& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServoPosition(ServoPosition&& from) noexcept
    : ServoPosition() {
    *this = ::std::move(from);
  }

  inline ServoPosition& operator=(ServoPosition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServoPosition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServoPosition* internal_default_instance() {
    return reinterpret_cast<const ServoPosition*>(
               &_ServoPosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(ServoPosition* other);
  friend void swap(ServoPosition& a, ServoPosition& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServoPosition* New() const final {
    return CreateMaybeMessage<ServoPosition>(NULL);
  }

  ServoPosition* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ServoPosition>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ServoPosition& from);
  void MergeFrom(const ServoPosition& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServoPosition* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 servo_id = 1 [(.goldo.pb2_options.cpp_type) = UINT8];
  void clear_servo_id();
  static const int kServoIdFieldNumber = 1;
  ::google::protobuf::int32 servo_id() const;
  void set_servo_id(::google::protobuf::int32 value);

  // uint32 position = 2 [(.goldo.pb2_options.cpp_type) = UINT16];
  void clear_position();
  static const int kPositionFieldNumber = 2;
  ::google::protobuf::uint32 position() const;
  void set_position(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:goldo.nucleo.servos.ServoPosition)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 servo_id_;
  ::google::protobuf::uint32 position_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_goldo_2fnucleo_2fservos_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ServoTorque : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:goldo.nucleo.servos.ServoTorque) */ {
 public:
  ServoTorque();
  virtual ~ServoTorque();

  ServoTorque(const ServoTorque& from);

  inline ServoTorque& operator=(const ServoTorque& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServoTorque(ServoTorque&& from) noexcept
    : ServoTorque() {
    *this = ::std::move(from);
  }

  inline ServoTorque& operator=(ServoTorque&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServoTorque& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServoTorque* internal_default_instance() {
    return reinterpret_cast<const ServoTorque*>(
               &_ServoTorque_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(ServoTorque* other);
  friend void swap(ServoTorque& a, ServoTorque& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServoTorque* New() const final {
    return CreateMaybeMessage<ServoTorque>(NULL);
  }

  ServoTorque* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ServoTorque>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ServoTorque& from);
  void MergeFrom(const ServoTorque& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServoTorque* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 servo_id = 1 [(.goldo.pb2_options.cpp_type) = UINT8];
  void clear_servo_id();
  static const int kServoIdFieldNumber = 1;
  ::google::protobuf::int32 servo_id() const;
  void set_servo_id(::google::protobuf::int32 value);

  // uint32 torque = 2 [(.goldo.pb2_options.cpp_type) = UINT8];
  void clear_torque();
  static const int kTorqueFieldNumber = 2;
  ::google::protobuf::uint32 torque() const;
  void set_torque(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:goldo.nucleo.servos.ServoTorque)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 servo_id_;
  ::google::protobuf::uint32 torque_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_goldo_2fnucleo_2fservos_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ServoEnable : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:goldo.nucleo.servos.ServoEnable) */ {
 public:
  ServoEnable();
  virtual ~ServoEnable();

  ServoEnable(const ServoEnable& from);

  inline ServoEnable& operator=(const ServoEnable& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServoEnable(ServoEnable&& from) noexcept
    : ServoEnable() {
    *this = ::std::move(from);
  }

  inline ServoEnable& operator=(ServoEnable&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServoEnable& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServoEnable* internal_default_instance() {
    return reinterpret_cast<const ServoEnable*>(
               &_ServoEnable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(ServoEnable* other);
  friend void swap(ServoEnable& a, ServoEnable& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServoEnable* New() const final {
    return CreateMaybeMessage<ServoEnable>(NULL);
  }

  ServoEnable* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ServoEnable>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ServoEnable& from);
  void MergeFrom(const ServoEnable& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServoEnable* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 servo_id = 1 [(.goldo.pb2_options.cpp_type) = UINT8];
  void clear_servo_id();
  static const int kServoIdFieldNumber = 1;
  ::google::protobuf::int32 servo_id() const;
  void set_servo_id(::google::protobuf::int32 value);

  // bool enable = 2 [(.goldo.pb2_options.cpp_type) = UINT8];
  void clear_enable();
  static const int kEnableFieldNumber = 2;
  bool enable() const;
  void set_enable(bool value);

  // @@protoc_insertion_point(class_scope:goldo.nucleo.servos.ServoEnable)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 servo_id_;
  bool enable_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_goldo_2fnucleo_2fservos_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CmdDisableAll : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:goldo.nucleo.servos.CmdDisableAll) */ {
 public:
  CmdDisableAll();
  virtual ~CmdDisableAll();

  CmdDisableAll(const CmdDisableAll& from);

  inline CmdDisableAll& operator=(const CmdDisableAll& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CmdDisableAll(CmdDisableAll&& from) noexcept
    : CmdDisableAll() {
    *this = ::std::move(from);
  }

  inline CmdDisableAll& operator=(CmdDisableAll&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdDisableAll& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CmdDisableAll* internal_default_instance() {
    return reinterpret_cast<const CmdDisableAll*>(
               &_CmdDisableAll_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(CmdDisableAll* other);
  friend void swap(CmdDisableAll& a, CmdDisableAll& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CmdDisableAll* New() const final {
    return CreateMaybeMessage<CmdDisableAll>(NULL);
  }

  CmdDisableAll* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CmdDisableAll>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CmdDisableAll& from);
  void MergeFrom(const CmdDisableAll& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CmdDisableAll* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 sequence_number = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
  void clear_sequence_number();
  static const int kSequenceNumberFieldNumber = 1;
  ::google::protobuf::int32 sequence_number() const;
  void set_sequence_number(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:goldo.nucleo.servos.CmdDisableAll)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 sequence_number_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_goldo_2fnucleo_2fservos_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CmdSetEnable : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:goldo.nucleo.servos.CmdSetEnable) */ {
 public:
  CmdSetEnable();
  virtual ~CmdSetEnable();

  CmdSetEnable(const CmdSetEnable& from);

  inline CmdSetEnable& operator=(const CmdSetEnable& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CmdSetEnable(CmdSetEnable&& from) noexcept
    : CmdSetEnable() {
    *this = ::std::move(from);
  }

  inline CmdSetEnable& operator=(CmdSetEnable&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdSetEnable& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CmdSetEnable* internal_default_instance() {
    return reinterpret_cast<const CmdSetEnable*>(
               &_CmdSetEnable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(CmdSetEnable* other);
  friend void swap(CmdSetEnable& a, CmdSetEnable& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CmdSetEnable* New() const final {
    return CreateMaybeMessage<CmdSetEnable>(NULL);
  }

  CmdSetEnable* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CmdSetEnable>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CmdSetEnable& from);
  void MergeFrom(const CmdSetEnable& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CmdSetEnable* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .goldo.nucleo.servos.ServoEnable enables = 2;
  int enables_size() const;
  void clear_enables();
  static const int kEnablesFieldNumber = 2;
  ::goldo::nucleo::servos::ServoEnable* mutable_enables(int index);
  ::google::protobuf::RepeatedPtrField< ::goldo::nucleo::servos::ServoEnable >*
      mutable_enables();
  const ::goldo::nucleo::servos::ServoEnable& enables(int index) const;
  ::goldo::nucleo::servos::ServoEnable* add_enables();
  const ::google::protobuf::RepeatedPtrField< ::goldo::nucleo::servos::ServoEnable >&
      enables() const;

  // int32 sequence_number = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
  void clear_sequence_number();
  static const int kSequenceNumberFieldNumber = 1;
  ::google::protobuf::int32 sequence_number() const;
  void set_sequence_number(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:goldo.nucleo.servos.CmdSetEnable)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::goldo::nucleo::servos::ServoEnable > enables_;
  ::google::protobuf::int32 sequence_number_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_goldo_2fnucleo_2fservos_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CmdLiftDoHoming : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:goldo.nucleo.servos.CmdLiftDoHoming) */ {
 public:
  CmdLiftDoHoming();
  virtual ~CmdLiftDoHoming();

  CmdLiftDoHoming(const CmdLiftDoHoming& from);

  inline CmdLiftDoHoming& operator=(const CmdLiftDoHoming& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CmdLiftDoHoming(CmdLiftDoHoming&& from) noexcept
    : CmdLiftDoHoming() {
    *this = ::std::move(from);
  }

  inline CmdLiftDoHoming& operator=(CmdLiftDoHoming&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdLiftDoHoming& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CmdLiftDoHoming* internal_default_instance() {
    return reinterpret_cast<const CmdLiftDoHoming*>(
               &_CmdLiftDoHoming_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(CmdLiftDoHoming* other);
  friend void swap(CmdLiftDoHoming& a, CmdLiftDoHoming& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CmdLiftDoHoming* New() const final {
    return CreateMaybeMessage<CmdLiftDoHoming>(NULL);
  }

  CmdLiftDoHoming* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CmdLiftDoHoming>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CmdLiftDoHoming& from);
  void MergeFrom(const CmdLiftDoHoming& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CmdLiftDoHoming* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 sequence_number = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
  void clear_sequence_number();
  static const int kSequenceNumberFieldNumber = 1;
  ::google::protobuf::int32 sequence_number() const;
  void set_sequence_number(::google::protobuf::int32 value);

  // int32 lift_id = 2 [(.goldo.pb2_options.cpp_type) = UINT8];
  void clear_lift_id();
  static const int kLiftIdFieldNumber = 2;
  ::google::protobuf::int32 lift_id() const;
  void set_lift_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:goldo.nucleo.servos.CmdLiftDoHoming)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 sequence_number_;
  ::google::protobuf::int32 lift_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_goldo_2fnucleo_2fservos_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CmdLiftsRaw : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:goldo.nucleo.servos.CmdLiftsRaw) */ {
 public:
  CmdLiftsRaw();
  virtual ~CmdLiftsRaw();

  CmdLiftsRaw(const CmdLiftsRaw& from);

  inline CmdLiftsRaw& operator=(const CmdLiftsRaw& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CmdLiftsRaw(CmdLiftsRaw&& from) noexcept
    : CmdLiftsRaw() {
    *this = ::std::move(from);
  }

  inline CmdLiftsRaw& operator=(CmdLiftsRaw&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdLiftsRaw& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CmdLiftsRaw* internal_default_instance() {
    return reinterpret_cast<const CmdLiftsRaw*>(
               &_CmdLiftsRaw_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(CmdLiftsRaw* other);
  friend void swap(CmdLiftsRaw& a, CmdLiftsRaw& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CmdLiftsRaw* New() const final {
    return CreateMaybeMessage<CmdLiftsRaw>(NULL);
  }

  CmdLiftsRaw* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CmdLiftsRaw>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CmdLiftsRaw& from);
  void MergeFrom(const CmdLiftsRaw& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CmdLiftsRaw* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 sequence_number = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
  void clear_sequence_number();
  static const int kSequenceNumberFieldNumber = 1;
  ::google::protobuf::int32 sequence_number() const;
  void set_sequence_number(::google::protobuf::int32 value);

  // int32 lift1_target = 2 [(.goldo.pb2_options.cpp_type) = INT32];
  void clear_lift1_target();
  static const int kLift1TargetFieldNumber = 2;
  ::google::protobuf::int32 lift1_target() const;
  void set_lift1_target(::google::protobuf::int32 value);

  // int32 lift1_bltrig = 3 [(.goldo.pb2_options.cpp_type) = UINT16];
  void clear_lift1_bltrig();
  static const int kLift1BltrigFieldNumber = 3;
  ::google::protobuf::int32 lift1_bltrig() const;
  void set_lift1_bltrig(::google::protobuf::int32 value);

  // int32 lift1_speed = 4 [(.goldo.pb2_options.cpp_type) = UINT16];
  void clear_lift1_speed();
  static const int kLift1SpeedFieldNumber = 4;
  ::google::protobuf::int32 lift1_speed() const;
  void set_lift1_speed(::google::protobuf::int32 value);

  // int32 lift2_target = 5 [(.goldo.pb2_options.cpp_type) = INT32];
  void clear_lift2_target();
  static const int kLift2TargetFieldNumber = 5;
  ::google::protobuf::int32 lift2_target() const;
  void set_lift2_target(::google::protobuf::int32 value);

  // int32 lift2_bltrig = 6 [(.goldo.pb2_options.cpp_type) = UINT16];
  void clear_lift2_bltrig();
  static const int kLift2BltrigFieldNumber = 6;
  ::google::protobuf::int32 lift2_bltrig() const;
  void set_lift2_bltrig(::google::protobuf::int32 value);

  // int32 lift2_speed = 7 [(.goldo.pb2_options.cpp_type) = UINT16];
  void clear_lift2_speed();
  static const int kLift2SpeedFieldNumber = 7;
  ::google::protobuf::int32 lift2_speed() const;
  void set_lift2_speed(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:goldo.nucleo.servos.CmdLiftsRaw)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 sequence_number_;
  ::google::protobuf::int32 lift1_target_;
  ::google::protobuf::int32 lift1_bltrig_;
  ::google::protobuf::int32 lift1_speed_;
  ::google::protobuf::int32 lift2_target_;
  ::google::protobuf::int32 lift2_bltrig_;
  ::google::protobuf::int32 lift2_speed_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_goldo_2fnucleo_2fservos_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CmdLiftSetEnable : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:goldo.nucleo.servos.CmdLiftSetEnable) */ {
 public:
  CmdLiftSetEnable();
  virtual ~CmdLiftSetEnable();

  CmdLiftSetEnable(const CmdLiftSetEnable& from);

  inline CmdLiftSetEnable& operator=(const CmdLiftSetEnable& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CmdLiftSetEnable(CmdLiftSetEnable&& from) noexcept
    : CmdLiftSetEnable() {
    *this = ::std::move(from);
  }

  inline CmdLiftSetEnable& operator=(CmdLiftSetEnable&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdLiftSetEnable& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CmdLiftSetEnable* internal_default_instance() {
    return reinterpret_cast<const CmdLiftSetEnable*>(
               &_CmdLiftSetEnable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(CmdLiftSetEnable* other);
  friend void swap(CmdLiftSetEnable& a, CmdLiftSetEnable& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CmdLiftSetEnable* New() const final {
    return CreateMaybeMessage<CmdLiftSetEnable>(NULL);
  }

  CmdLiftSetEnable* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CmdLiftSetEnable>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CmdLiftSetEnable& from);
  void MergeFrom(const CmdLiftSetEnable& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CmdLiftSetEnable* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 sequence_number = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
  void clear_sequence_number();
  static const int kSequenceNumberFieldNumber = 1;
  ::google::protobuf::int32 sequence_number() const;
  void set_sequence_number(::google::protobuf::int32 value);

  // int32 lift_id = 2 [(.goldo.pb2_options.cpp_type) = UINT8];
  void clear_lift_id();
  static const int kLiftIdFieldNumber = 2;
  ::google::protobuf::int32 lift_id() const;
  void set_lift_id(::google::protobuf::int32 value);

  // bool enable = 3 [(.goldo.pb2_options.cpp_type) = UINT8];
  void clear_enable();
  static const int kEnableFieldNumber = 3;
  bool enable() const;
  void set_enable(bool value);

  // @@protoc_insertion_point(class_scope:goldo.nucleo.servos.CmdLiftSetEnable)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 sequence_number_;
  ::google::protobuf::int32 lift_id_;
  bool enable_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_goldo_2fnucleo_2fservos_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CmdMoveMultiple : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:goldo.nucleo.servos.CmdMoveMultiple) */ {
 public:
  CmdMoveMultiple();
  virtual ~CmdMoveMultiple();

  CmdMoveMultiple(const CmdMoveMultiple& from);

  inline CmdMoveMultiple& operator=(const CmdMoveMultiple& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CmdMoveMultiple(CmdMoveMultiple&& from) noexcept
    : CmdMoveMultiple() {
    *this = ::std::move(from);
  }

  inline CmdMoveMultiple& operator=(CmdMoveMultiple&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdMoveMultiple& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CmdMoveMultiple* internal_default_instance() {
    return reinterpret_cast<const CmdMoveMultiple*>(
               &_CmdMoveMultiple_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(CmdMoveMultiple* other);
  friend void swap(CmdMoveMultiple& a, CmdMoveMultiple& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CmdMoveMultiple* New() const final {
    return CreateMaybeMessage<CmdMoveMultiple>(NULL);
  }

  CmdMoveMultiple* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CmdMoveMultiple>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CmdMoveMultiple& from);
  void MergeFrom(const CmdMoveMultiple& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CmdMoveMultiple* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .goldo.nucleo.servos.ServoPosition positions = 3;
  int positions_size() const;
  void clear_positions();
  static const int kPositionsFieldNumber = 3;
  ::goldo::nucleo::servos::ServoPosition* mutable_positions(int index);
  ::google::protobuf::RepeatedPtrField< ::goldo::nucleo::servos::ServoPosition >*
      mutable_positions();
  const ::goldo::nucleo::servos::ServoPosition& positions(int index) const;
  ::goldo::nucleo::servos::ServoPosition* add_positions();
  const ::google::protobuf::RepeatedPtrField< ::goldo::nucleo::servos::ServoPosition >&
      positions() const;

  // int32 sequence_number = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
  void clear_sequence_number();
  static const int kSequenceNumberFieldNumber = 1;
  ::google::protobuf::int32 sequence_number() const;
  void set_sequence_number(::google::protobuf::int32 value);

  // int32 speed = 2 [(.goldo.pb2_options.cpp_type) = UINT16];
  void clear_speed();
  static const int kSpeedFieldNumber = 2;
  ::google::protobuf::int32 speed() const;
  void set_speed(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:goldo.nucleo.servos.CmdMoveMultiple)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::goldo::nucleo::servos::ServoPosition > positions_;
  ::google::protobuf::int32 sequence_number_;
  ::google::protobuf::int32 speed_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_goldo_2fnucleo_2fservos_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CmdSetMaxTorques : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:goldo.nucleo.servos.CmdSetMaxTorques) */ {
 public:
  CmdSetMaxTorques();
  virtual ~CmdSetMaxTorques();

  CmdSetMaxTorques(const CmdSetMaxTorques& from);

  inline CmdSetMaxTorques& operator=(const CmdSetMaxTorques& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CmdSetMaxTorques(CmdSetMaxTorques&& from) noexcept
    : CmdSetMaxTorques() {
    *this = ::std::move(from);
  }

  inline CmdSetMaxTorques& operator=(CmdSetMaxTorques&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdSetMaxTorques& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CmdSetMaxTorques* internal_default_instance() {
    return reinterpret_cast<const CmdSetMaxTorques*>(
               &_CmdSetMaxTorques_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(CmdSetMaxTorques* other);
  friend void swap(CmdSetMaxTorques& a, CmdSetMaxTorques& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CmdSetMaxTorques* New() const final {
    return CreateMaybeMessage<CmdSetMaxTorques>(NULL);
  }

  CmdSetMaxTorques* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CmdSetMaxTorques>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CmdSetMaxTorques& from);
  void MergeFrom(const CmdSetMaxTorques& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CmdSetMaxTorques* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .goldo.nucleo.servos.ServoTorque torques = 2;
  int torques_size() const;
  void clear_torques();
  static const int kTorquesFieldNumber = 2;
  ::goldo::nucleo::servos::ServoTorque* mutable_torques(int index);
  ::google::protobuf::RepeatedPtrField< ::goldo::nucleo::servos::ServoTorque >*
      mutable_torques();
  const ::goldo::nucleo::servos::ServoTorque& torques(int index) const;
  ::goldo::nucleo::servos::ServoTorque* add_torques();
  const ::google::protobuf::RepeatedPtrField< ::goldo::nucleo::servos::ServoTorque >&
      torques() const;

  // int32 sequence_number = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
  void clear_sequence_number();
  static const int kSequenceNumberFieldNumber = 1;
  ::google::protobuf::int32 sequence_number() const;
  void set_sequence_number(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:goldo.nucleo.servos.CmdSetMaxTorques)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::goldo::nucleo::servos::ServoTorque > torques_;
  ::google::protobuf::int32 sequence_number_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_goldo_2fnucleo_2fservos_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ServoConfig

// .goldo.nucleo.servos.ServoType type = 1 [(.goldo.pb2_options.cpp_type) = UINT8];
inline void ServoConfig::clear_type() {
  type_ = 0;
}
inline ::goldo::nucleo::servos::ServoType ServoConfig::type() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.servos.ServoConfig.type)
  return static_cast< ::goldo::nucleo::servos::ServoType >(type_);
}
inline void ServoConfig::set_type(::goldo::nucleo::servos::ServoType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:goldo.nucleo.servos.ServoConfig.type)
}

// int32 id = 2 [(.goldo.pb2_options.cpp_type) = UINT8];
inline void ServoConfig::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 ServoConfig::id() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.servos.ServoConfig.id)
  return id_;
}
inline void ServoConfig::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:goldo.nucleo.servos.ServoConfig.id)
}

// int32 cw_limit = 3 [(.goldo.pb2_options.cpp_type) = UINT16];
inline void ServoConfig::clear_cw_limit() {
  cw_limit_ = 0;
}
inline ::google::protobuf::int32 ServoConfig::cw_limit() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.servos.ServoConfig.cw_limit)
  return cw_limit_;
}
inline void ServoConfig::set_cw_limit(::google::protobuf::int32 value) {
  
  cw_limit_ = value;
  // @@protoc_insertion_point(field_set:goldo.nucleo.servos.ServoConfig.cw_limit)
}

// int32 ccw_limit = 4 [(.goldo.pb2_options.cpp_type) = UINT16];
inline void ServoConfig::clear_ccw_limit() {
  ccw_limit_ = 0;
}
inline ::google::protobuf::int32 ServoConfig::ccw_limit() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.servos.ServoConfig.ccw_limit)
  return ccw_limit_;
}
inline void ServoConfig::set_ccw_limit(::google::protobuf::int32 value) {
  
  ccw_limit_ = value;
  // @@protoc_insertion_point(field_set:goldo.nucleo.servos.ServoConfig.ccw_limit)
}

// int32 max_speed = 5 [(.goldo.pb2_options.cpp_type) = UINT16];
inline void ServoConfig::clear_max_speed() {
  max_speed_ = 0;
}
inline ::google::protobuf::int32 ServoConfig::max_speed() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.servos.ServoConfig.max_speed)
  return max_speed_;
}
inline void ServoConfig::set_max_speed(::google::protobuf::int32 value) {
  
  max_speed_ = value;
  // @@protoc_insertion_point(field_set:goldo.nucleo.servos.ServoConfig.max_speed)
}

// int32 max_torque = 6 [(.goldo.pb2_options.cpp_type) = UINT16];
inline void ServoConfig::clear_max_torque() {
  max_torque_ = 0;
}
inline ::google::protobuf::int32 ServoConfig::max_torque() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.servos.ServoConfig.max_torque)
  return max_torque_;
}
inline void ServoConfig::set_max_torque(::google::protobuf::int32 value) {
  
  max_torque_ = value;
  // @@protoc_insertion_point(field_set:goldo.nucleo.servos.ServoConfig.max_torque)
}

// int32 reserved = 100 [(.goldo.pb2_options.cpp_type) = VOID];
inline void ServoConfig::clear_reserved() {
  reserved_ = 0;
}
inline ::google::protobuf::int32 ServoConfig::reserved() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.servos.ServoConfig.reserved)
  return reserved_;
}
inline void ServoConfig::set_reserved(::google::protobuf::int32 value) {
  
  reserved_ = value;
  // @@protoc_insertion_point(field_set:goldo.nucleo.servos.ServoConfig.reserved)
}

// string name = 64 [(.goldo.pb2_options.cpp_type) = VOID];
inline void ServoConfig::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServoConfig::name() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.servos.ServoConfig.name)
  return name_.GetNoArena();
}
inline void ServoConfig::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:goldo.nucleo.servos.ServoConfig.name)
}
#if LANG_CXX11
inline void ServoConfig::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:goldo.nucleo.servos.ServoConfig.name)
}
#endif
inline void ServoConfig::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:goldo.nucleo.servos.ServoConfig.name)
}
inline void ServoConfig::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:goldo.nucleo.servos.ServoConfig.name)
}
inline ::std::string* ServoConfig::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:goldo.nucleo.servos.ServoConfig.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServoConfig::release_name() {
  // @@protoc_insertion_point(field_release:goldo.nucleo.servos.ServoConfig.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServoConfig::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:goldo.nucleo.servos.ServoConfig.name)
}

// -------------------------------------------------------------------

// LiftConfig

// int32 kp = 1 [(.goldo.pb2_options.cpp_type) = UINT32];
inline void LiftConfig::clear_kp() {
  kp_ = 0;
}
inline ::google::protobuf::int32 LiftConfig::kp() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.servos.LiftConfig.kp)
  return kp_;
}
inline void LiftConfig::set_kp(::google::protobuf::int32 value) {
  
  kp_ = value;
  // @@protoc_insertion_point(field_set:goldo.nucleo.servos.LiftConfig.kp)
}

// int32 ki = 2 [(.goldo.pb2_options.cpp_type) = UINT32];
inline void LiftConfig::clear_ki() {
  ki_ = 0;
}
inline ::google::protobuf::int32 LiftConfig::ki() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.servos.LiftConfig.ki)
  return ki_;
}
inline void LiftConfig::set_ki(::google::protobuf::int32 value) {
  
  ki_ = value;
  // @@protoc_insertion_point(field_set:goldo.nucleo.servos.LiftConfig.ki)
}

// int32 kd = 3 [(.goldo.pb2_options.cpp_type) = UINT32];
inline void LiftConfig::clear_kd() {
  kd_ = 0;
}
inline ::google::protobuf::int32 LiftConfig::kd() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.servos.LiftConfig.kd)
  return kd_;
}
inline void LiftConfig::set_kd(::google::protobuf::int32 value) {
  
  kd_ = value;
  // @@protoc_insertion_point(field_set:goldo.nucleo.servos.LiftConfig.kd)
}

// int32 range = 4 [(.goldo.pb2_options.cpp_type) = UINT16];
inline void LiftConfig::clear_range() {
  range_ = 0;
}
inline ::google::protobuf::int32 LiftConfig::range() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.servos.LiftConfig.range)
  return range_;
}
inline void LiftConfig::set_range(::google::protobuf::int32 value) {
  
  range_ = value;
  // @@protoc_insertion_point(field_set:goldo.nucleo.servos.LiftConfig.range)
}

// int32 pwm_clamp = 5 [(.goldo.pb2_options.cpp_type) = UINT16];
inline void LiftConfig::clear_pwm_clamp() {
  pwm_clamp_ = 0;
}
inline ::google::protobuf::int32 LiftConfig::pwm_clamp() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.servos.LiftConfig.pwm_clamp)
  return pwm_clamp_;
}
inline void LiftConfig::set_pwm_clamp(::google::protobuf::int32 value) {
  
  pwm_clamp_ = value;
  // @@protoc_insertion_point(field_set:goldo.nucleo.servos.LiftConfig.pwm_clamp)
}

// int32 block_trig = 6 [(.goldo.pb2_options.cpp_type) = UINT16];
inline void LiftConfig::clear_block_trig() {
  block_trig_ = 0;
}
inline ::google::protobuf::int32 LiftConfig::block_trig() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.servos.LiftConfig.block_trig)
  return block_trig_;
}
inline void LiftConfig::set_block_trig(::google::protobuf::int32 value) {
  
  block_trig_ = value;
  // @@protoc_insertion_point(field_set:goldo.nucleo.servos.LiftConfig.block_trig)
}

// -------------------------------------------------------------------

// ServoState

// uint32 position = 2 [(.goldo.pb2_options.cpp_type) = UINT16];
inline void ServoState::clear_position() {
  position_ = 0u;
}
inline ::google::protobuf::uint32 ServoState::position() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.servos.ServoState.position)
  return position_;
}
inline void ServoState::set_position(::google::protobuf::uint32 value) {
  
  position_ = value;
  // @@protoc_insertion_point(field_set:goldo.nucleo.servos.ServoState.position)
}

// uint32 measured_position = 3 [(.goldo.pb2_options.cpp_type) = UINT16];
inline void ServoState::clear_measured_position() {
  measured_position_ = 0u;
}
inline ::google::protobuf::uint32 ServoState::measured_position() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.servos.ServoState.measured_position)
  return measured_position_;
}
inline void ServoState::set_measured_position(::google::protobuf::uint32 value) {
  
  measured_position_ = value;
  // @@protoc_insertion_point(field_set:goldo.nucleo.servos.ServoState.measured_position)
}

// int32 measured_load = 5 [(.goldo.pb2_options.cpp_type) = INT16];
inline void ServoState::clear_measured_load() {
  measured_load_ = 0;
}
inline ::google::protobuf::int32 ServoState::measured_load() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.servos.ServoState.measured_load)
  return measured_load_;
}
inline void ServoState::set_measured_load(::google::protobuf::int32 value) {
  
  measured_load_ = value;
  // @@protoc_insertion_point(field_set:goldo.nucleo.servos.ServoState.measured_load)
}

// -------------------------------------------------------------------

// ServoStates

// uint32 timestamp = 1 [(.goldo.pb2_options.cpp_type) = UINT32];
inline void ServoStates::clear_timestamp() {
  timestamp_ = 0u;
}
inline ::google::protobuf::uint32 ServoStates::timestamp() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.servos.ServoStates.timestamp)
  return timestamp_;
}
inline void ServoStates::set_timestamp(::google::protobuf::uint32 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:goldo.nucleo.servos.ServoStates.timestamp)
}

// repeated .goldo.nucleo.servos.ServoState servos = 4;
inline int ServoStates::servos_size() const {
  return servos_.size();
}
inline void ServoStates::clear_servos() {
  servos_.Clear();
}
inline ::goldo::nucleo::servos::ServoState* ServoStates::mutable_servos(int index) {
  // @@protoc_insertion_point(field_mutable:goldo.nucleo.servos.ServoStates.servos)
  return servos_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::goldo::nucleo::servos::ServoState >*
ServoStates::mutable_servos() {
  // @@protoc_insertion_point(field_mutable_list:goldo.nucleo.servos.ServoStates.servos)
  return &servos_;
}
inline const ::goldo::nucleo::servos::ServoState& ServoStates::servos(int index) const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.servos.ServoStates.servos)
  return servos_.Get(index);
}
inline ::goldo::nucleo::servos::ServoState* ServoStates::add_servos() {
  // @@protoc_insertion_point(field_add:goldo.nucleo.servos.ServoStates.servos)
  return servos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::goldo::nucleo::servos::ServoState >&
ServoStates::servos() const {
  // @@protoc_insertion_point(field_list:goldo.nucleo.servos.ServoStates.servos)
  return servos_;
}

// -------------------------------------------------------------------

// ServoPosition

// int32 servo_id = 1 [(.goldo.pb2_options.cpp_type) = UINT8];
inline void ServoPosition::clear_servo_id() {
  servo_id_ = 0;
}
inline ::google::protobuf::int32 ServoPosition::servo_id() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.servos.ServoPosition.servo_id)
  return servo_id_;
}
inline void ServoPosition::set_servo_id(::google::protobuf::int32 value) {
  
  servo_id_ = value;
  // @@protoc_insertion_point(field_set:goldo.nucleo.servos.ServoPosition.servo_id)
}

// uint32 position = 2 [(.goldo.pb2_options.cpp_type) = UINT16];
inline void ServoPosition::clear_position() {
  position_ = 0u;
}
inline ::google::protobuf::uint32 ServoPosition::position() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.servos.ServoPosition.position)
  return position_;
}
inline void ServoPosition::set_position(::google::protobuf::uint32 value) {
  
  position_ = value;
  // @@protoc_insertion_point(field_set:goldo.nucleo.servos.ServoPosition.position)
}

// -------------------------------------------------------------------

// ServoTorque

// int32 servo_id = 1 [(.goldo.pb2_options.cpp_type) = UINT8];
inline void ServoTorque::clear_servo_id() {
  servo_id_ = 0;
}
inline ::google::protobuf::int32 ServoTorque::servo_id() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.servos.ServoTorque.servo_id)
  return servo_id_;
}
inline void ServoTorque::set_servo_id(::google::protobuf::int32 value) {
  
  servo_id_ = value;
  // @@protoc_insertion_point(field_set:goldo.nucleo.servos.ServoTorque.servo_id)
}

// uint32 torque = 2 [(.goldo.pb2_options.cpp_type) = UINT8];
inline void ServoTorque::clear_torque() {
  torque_ = 0u;
}
inline ::google::protobuf::uint32 ServoTorque::torque() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.servos.ServoTorque.torque)
  return torque_;
}
inline void ServoTorque::set_torque(::google::protobuf::uint32 value) {
  
  torque_ = value;
  // @@protoc_insertion_point(field_set:goldo.nucleo.servos.ServoTorque.torque)
}

// -------------------------------------------------------------------

// ServoEnable

// int32 servo_id = 1 [(.goldo.pb2_options.cpp_type) = UINT8];
inline void ServoEnable::clear_servo_id() {
  servo_id_ = 0;
}
inline ::google::protobuf::int32 ServoEnable::servo_id() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.servos.ServoEnable.servo_id)
  return servo_id_;
}
inline void ServoEnable::set_servo_id(::google::protobuf::int32 value) {
  
  servo_id_ = value;
  // @@protoc_insertion_point(field_set:goldo.nucleo.servos.ServoEnable.servo_id)
}

// bool enable = 2 [(.goldo.pb2_options.cpp_type) = UINT8];
inline void ServoEnable::clear_enable() {
  enable_ = false;
}
inline bool ServoEnable::enable() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.servos.ServoEnable.enable)
  return enable_;
}
inline void ServoEnable::set_enable(bool value) {
  
  enable_ = value;
  // @@protoc_insertion_point(field_set:goldo.nucleo.servos.ServoEnable.enable)
}

// -------------------------------------------------------------------

// CmdDisableAll

// int32 sequence_number = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
inline void CmdDisableAll::clear_sequence_number() {
  sequence_number_ = 0;
}
inline ::google::protobuf::int32 CmdDisableAll::sequence_number() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.servos.CmdDisableAll.sequence_number)
  return sequence_number_;
}
inline void CmdDisableAll::set_sequence_number(::google::protobuf::int32 value) {
  
  sequence_number_ = value;
  // @@protoc_insertion_point(field_set:goldo.nucleo.servos.CmdDisableAll.sequence_number)
}

// -------------------------------------------------------------------

// CmdSetEnable

// int32 sequence_number = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
inline void CmdSetEnable::clear_sequence_number() {
  sequence_number_ = 0;
}
inline ::google::protobuf::int32 CmdSetEnable::sequence_number() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.servos.CmdSetEnable.sequence_number)
  return sequence_number_;
}
inline void CmdSetEnable::set_sequence_number(::google::protobuf::int32 value) {
  
  sequence_number_ = value;
  // @@protoc_insertion_point(field_set:goldo.nucleo.servos.CmdSetEnable.sequence_number)
}

// repeated .goldo.nucleo.servos.ServoEnable enables = 2;
inline int CmdSetEnable::enables_size() const {
  return enables_.size();
}
inline void CmdSetEnable::clear_enables() {
  enables_.Clear();
}
inline ::goldo::nucleo::servos::ServoEnable* CmdSetEnable::mutable_enables(int index) {
  // @@protoc_insertion_point(field_mutable:goldo.nucleo.servos.CmdSetEnable.enables)
  return enables_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::goldo::nucleo::servos::ServoEnable >*
CmdSetEnable::mutable_enables() {
  // @@protoc_insertion_point(field_mutable_list:goldo.nucleo.servos.CmdSetEnable.enables)
  return &enables_;
}
inline const ::goldo::nucleo::servos::ServoEnable& CmdSetEnable::enables(int index) const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.servos.CmdSetEnable.enables)
  return enables_.Get(index);
}
inline ::goldo::nucleo::servos::ServoEnable* CmdSetEnable::add_enables() {
  // @@protoc_insertion_point(field_add:goldo.nucleo.servos.CmdSetEnable.enables)
  return enables_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::goldo::nucleo::servos::ServoEnable >&
CmdSetEnable::enables() const {
  // @@protoc_insertion_point(field_list:goldo.nucleo.servos.CmdSetEnable.enables)
  return enables_;
}

// -------------------------------------------------------------------

// CmdLiftDoHoming

// int32 sequence_number = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
inline void CmdLiftDoHoming::clear_sequence_number() {
  sequence_number_ = 0;
}
inline ::google::protobuf::int32 CmdLiftDoHoming::sequence_number() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.servos.CmdLiftDoHoming.sequence_number)
  return sequence_number_;
}
inline void CmdLiftDoHoming::set_sequence_number(::google::protobuf::int32 value) {
  
  sequence_number_ = value;
  // @@protoc_insertion_point(field_set:goldo.nucleo.servos.CmdLiftDoHoming.sequence_number)
}

// int32 lift_id = 2 [(.goldo.pb2_options.cpp_type) = UINT8];
inline void CmdLiftDoHoming::clear_lift_id() {
  lift_id_ = 0;
}
inline ::google::protobuf::int32 CmdLiftDoHoming::lift_id() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.servos.CmdLiftDoHoming.lift_id)
  return lift_id_;
}
inline void CmdLiftDoHoming::set_lift_id(::google::protobuf::int32 value) {
  
  lift_id_ = value;
  // @@protoc_insertion_point(field_set:goldo.nucleo.servos.CmdLiftDoHoming.lift_id)
}

// -------------------------------------------------------------------

// CmdLiftsRaw

// int32 sequence_number = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
inline void CmdLiftsRaw::clear_sequence_number() {
  sequence_number_ = 0;
}
inline ::google::protobuf::int32 CmdLiftsRaw::sequence_number() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.servos.CmdLiftsRaw.sequence_number)
  return sequence_number_;
}
inline void CmdLiftsRaw::set_sequence_number(::google::protobuf::int32 value) {
  
  sequence_number_ = value;
  // @@protoc_insertion_point(field_set:goldo.nucleo.servos.CmdLiftsRaw.sequence_number)
}

// int32 lift1_target = 2 [(.goldo.pb2_options.cpp_type) = INT32];
inline void CmdLiftsRaw::clear_lift1_target() {
  lift1_target_ = 0;
}
inline ::google::protobuf::int32 CmdLiftsRaw::lift1_target() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.servos.CmdLiftsRaw.lift1_target)
  return lift1_target_;
}
inline void CmdLiftsRaw::set_lift1_target(::google::protobuf::int32 value) {
  
  lift1_target_ = value;
  // @@protoc_insertion_point(field_set:goldo.nucleo.servos.CmdLiftsRaw.lift1_target)
}

// int32 lift1_bltrig = 3 [(.goldo.pb2_options.cpp_type) = UINT16];
inline void CmdLiftsRaw::clear_lift1_bltrig() {
  lift1_bltrig_ = 0;
}
inline ::google::protobuf::int32 CmdLiftsRaw::lift1_bltrig() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.servos.CmdLiftsRaw.lift1_bltrig)
  return lift1_bltrig_;
}
inline void CmdLiftsRaw::set_lift1_bltrig(::google::protobuf::int32 value) {
  
  lift1_bltrig_ = value;
  // @@protoc_insertion_point(field_set:goldo.nucleo.servos.CmdLiftsRaw.lift1_bltrig)
}

// int32 lift1_speed = 4 [(.goldo.pb2_options.cpp_type) = UINT16];
inline void CmdLiftsRaw::clear_lift1_speed() {
  lift1_speed_ = 0;
}
inline ::google::protobuf::int32 CmdLiftsRaw::lift1_speed() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.servos.CmdLiftsRaw.lift1_speed)
  return lift1_speed_;
}
inline void CmdLiftsRaw::set_lift1_speed(::google::protobuf::int32 value) {
  
  lift1_speed_ = value;
  // @@protoc_insertion_point(field_set:goldo.nucleo.servos.CmdLiftsRaw.lift1_speed)
}

// int32 lift2_target = 5 [(.goldo.pb2_options.cpp_type) = INT32];
inline void CmdLiftsRaw::clear_lift2_target() {
  lift2_target_ = 0;
}
inline ::google::protobuf::int32 CmdLiftsRaw::lift2_target() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.servos.CmdLiftsRaw.lift2_target)
  return lift2_target_;
}
inline void CmdLiftsRaw::set_lift2_target(::google::protobuf::int32 value) {
  
  lift2_target_ = value;
  // @@protoc_insertion_point(field_set:goldo.nucleo.servos.CmdLiftsRaw.lift2_target)
}

// int32 lift2_bltrig = 6 [(.goldo.pb2_options.cpp_type) = UINT16];
inline void CmdLiftsRaw::clear_lift2_bltrig() {
  lift2_bltrig_ = 0;
}
inline ::google::protobuf::int32 CmdLiftsRaw::lift2_bltrig() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.servos.CmdLiftsRaw.lift2_bltrig)
  return lift2_bltrig_;
}
inline void CmdLiftsRaw::set_lift2_bltrig(::google::protobuf::int32 value) {
  
  lift2_bltrig_ = value;
  // @@protoc_insertion_point(field_set:goldo.nucleo.servos.CmdLiftsRaw.lift2_bltrig)
}

// int32 lift2_speed = 7 [(.goldo.pb2_options.cpp_type) = UINT16];
inline void CmdLiftsRaw::clear_lift2_speed() {
  lift2_speed_ = 0;
}
inline ::google::protobuf::int32 CmdLiftsRaw::lift2_speed() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.servos.CmdLiftsRaw.lift2_speed)
  return lift2_speed_;
}
inline void CmdLiftsRaw::set_lift2_speed(::google::protobuf::int32 value) {
  
  lift2_speed_ = value;
  // @@protoc_insertion_point(field_set:goldo.nucleo.servos.CmdLiftsRaw.lift2_speed)
}

// -------------------------------------------------------------------

// CmdLiftSetEnable

// int32 sequence_number = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
inline void CmdLiftSetEnable::clear_sequence_number() {
  sequence_number_ = 0;
}
inline ::google::protobuf::int32 CmdLiftSetEnable::sequence_number() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.servos.CmdLiftSetEnable.sequence_number)
  return sequence_number_;
}
inline void CmdLiftSetEnable::set_sequence_number(::google::protobuf::int32 value) {
  
  sequence_number_ = value;
  // @@protoc_insertion_point(field_set:goldo.nucleo.servos.CmdLiftSetEnable.sequence_number)
}

// int32 lift_id = 2 [(.goldo.pb2_options.cpp_type) = UINT8];
inline void CmdLiftSetEnable::clear_lift_id() {
  lift_id_ = 0;
}
inline ::google::protobuf::int32 CmdLiftSetEnable::lift_id() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.servos.CmdLiftSetEnable.lift_id)
  return lift_id_;
}
inline void CmdLiftSetEnable::set_lift_id(::google::protobuf::int32 value) {
  
  lift_id_ = value;
  // @@protoc_insertion_point(field_set:goldo.nucleo.servos.CmdLiftSetEnable.lift_id)
}

// bool enable = 3 [(.goldo.pb2_options.cpp_type) = UINT8];
inline void CmdLiftSetEnable::clear_enable() {
  enable_ = false;
}
inline bool CmdLiftSetEnable::enable() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.servos.CmdLiftSetEnable.enable)
  return enable_;
}
inline void CmdLiftSetEnable::set_enable(bool value) {
  
  enable_ = value;
  // @@protoc_insertion_point(field_set:goldo.nucleo.servos.CmdLiftSetEnable.enable)
}

// -------------------------------------------------------------------

// CmdMoveMultiple

// int32 sequence_number = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
inline void CmdMoveMultiple::clear_sequence_number() {
  sequence_number_ = 0;
}
inline ::google::protobuf::int32 CmdMoveMultiple::sequence_number() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.servos.CmdMoveMultiple.sequence_number)
  return sequence_number_;
}
inline void CmdMoveMultiple::set_sequence_number(::google::protobuf::int32 value) {
  
  sequence_number_ = value;
  // @@protoc_insertion_point(field_set:goldo.nucleo.servos.CmdMoveMultiple.sequence_number)
}

// int32 speed = 2 [(.goldo.pb2_options.cpp_type) = UINT16];
inline void CmdMoveMultiple::clear_speed() {
  speed_ = 0;
}
inline ::google::protobuf::int32 CmdMoveMultiple::speed() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.servos.CmdMoveMultiple.speed)
  return speed_;
}
inline void CmdMoveMultiple::set_speed(::google::protobuf::int32 value) {
  
  speed_ = value;
  // @@protoc_insertion_point(field_set:goldo.nucleo.servos.CmdMoveMultiple.speed)
}

// repeated .goldo.nucleo.servos.ServoPosition positions = 3;
inline int CmdMoveMultiple::positions_size() const {
  return positions_.size();
}
inline void CmdMoveMultiple::clear_positions() {
  positions_.Clear();
}
inline ::goldo::nucleo::servos::ServoPosition* CmdMoveMultiple::mutable_positions(int index) {
  // @@protoc_insertion_point(field_mutable:goldo.nucleo.servos.CmdMoveMultiple.positions)
  return positions_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::goldo::nucleo::servos::ServoPosition >*
CmdMoveMultiple::mutable_positions() {
  // @@protoc_insertion_point(field_mutable_list:goldo.nucleo.servos.CmdMoveMultiple.positions)
  return &positions_;
}
inline const ::goldo::nucleo::servos::ServoPosition& CmdMoveMultiple::positions(int index) const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.servos.CmdMoveMultiple.positions)
  return positions_.Get(index);
}
inline ::goldo::nucleo::servos::ServoPosition* CmdMoveMultiple::add_positions() {
  // @@protoc_insertion_point(field_add:goldo.nucleo.servos.CmdMoveMultiple.positions)
  return positions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::goldo::nucleo::servos::ServoPosition >&
CmdMoveMultiple::positions() const {
  // @@protoc_insertion_point(field_list:goldo.nucleo.servos.CmdMoveMultiple.positions)
  return positions_;
}

// -------------------------------------------------------------------

// CmdSetMaxTorques

// int32 sequence_number = 1 [(.goldo.pb2_options.cpp_type) = UINT16];
inline void CmdSetMaxTorques::clear_sequence_number() {
  sequence_number_ = 0;
}
inline ::google::protobuf::int32 CmdSetMaxTorques::sequence_number() const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.servos.CmdSetMaxTorques.sequence_number)
  return sequence_number_;
}
inline void CmdSetMaxTorques::set_sequence_number(::google::protobuf::int32 value) {
  
  sequence_number_ = value;
  // @@protoc_insertion_point(field_set:goldo.nucleo.servos.CmdSetMaxTorques.sequence_number)
}

// repeated .goldo.nucleo.servos.ServoTorque torques = 2;
inline int CmdSetMaxTorques::torques_size() const {
  return torques_.size();
}
inline void CmdSetMaxTorques::clear_torques() {
  torques_.Clear();
}
inline ::goldo::nucleo::servos::ServoTorque* CmdSetMaxTorques::mutable_torques(int index) {
  // @@protoc_insertion_point(field_mutable:goldo.nucleo.servos.CmdSetMaxTorques.torques)
  return torques_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::goldo::nucleo::servos::ServoTorque >*
CmdSetMaxTorques::mutable_torques() {
  // @@protoc_insertion_point(field_mutable_list:goldo.nucleo.servos.CmdSetMaxTorques.torques)
  return &torques_;
}
inline const ::goldo::nucleo::servos::ServoTorque& CmdSetMaxTorques::torques(int index) const {
  // @@protoc_insertion_point(field_get:goldo.nucleo.servos.CmdSetMaxTorques.torques)
  return torques_.Get(index);
}
inline ::goldo::nucleo::servos::ServoTorque* CmdSetMaxTorques::add_torques() {
  // @@protoc_insertion_point(field_add:goldo.nucleo.servos.CmdSetMaxTorques.torques)
  return torques_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::goldo::nucleo::servos::ServoTorque >&
CmdSetMaxTorques::torques() const {
  // @@protoc_insertion_point(field_list:goldo.nucleo.servos.CmdSetMaxTorques.torques)
  return torques_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace servos
}  // namespace nucleo
}  // namespace goldo

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::goldo::nucleo::servos::ServoType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::goldo::nucleo::servos::ServoType>() {
  return ::goldo::nucleo::servos::ServoType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_goldo_2fnucleo_2fservos_2eproto
