// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: goldo/robot.proto

#include "goldo/robot.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_goldo_2fcommon_2fgeometry_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_goldo_2fcommon_2fgeometry_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Point;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_goldo_2fcommon_2fgeometry_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Pose;
}  // namespace protobuf_goldo_2fcommon_2fgeometry_2eproto
namespace protobuf_goldo_2fnucleo_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_goldo_2fnucleo_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_NucleoState;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_goldo_2fnucleo_2eproto ::google::protobuf::internal::SCCInfo<8> scc_info_NucleoConfig;
}  // namespace protobuf_goldo_2fnucleo_2eproto
namespace protobuf_goldo_2fnucleo_2fservos_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_goldo_2fnucleo_2fservos_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ServoState;
}  // namespace protobuf_goldo_2fnucleo_2fservos_2eproto
namespace protobuf_goldo_2frobot_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_goldo_2frobot_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RobotState_SensorsEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_goldo_2frobot_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SequencesFile;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_goldo_2frobot_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SequencesOption;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_goldo_2frobot_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_RobotGeometry;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_goldo_2frobot_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_RobotState_ServosEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_goldo_2frobot_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_RPLidarState;
}  // namespace protobuf_goldo_2frobot_2eproto
namespace protobuf_goldo_2frplidar_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_goldo_2frplidar_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RobotDetection;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_goldo_2frplidar_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Zones;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_goldo_2frplidar_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_RPLidarConfig;
}  // namespace protobuf_goldo_2frplidar_2eproto
namespace protobuf_goldo_2fstrategy_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_goldo_2fstrategy_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_StrategyConfig;
}  // namespace protobuf_goldo_2fstrategy_2eproto
namespace protobuf_goldo_2ftable_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_goldo_2ftable_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_TableState;
}  // namespace protobuf_goldo_2ftable_2eproto
namespace goldo {
namespace robot {
class RobotGeometryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RobotGeometry>
      _instance;
} _RobotGeometry_default_instance_;
class SequencesFileDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SequencesFile>
      _instance;
} _SequencesFile_default_instance_;
class SequencesOptionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SequencesOption>
      _instance;
  bool default_bool_;
} _SequencesOption_default_instance_;
class RobotConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RobotConfig>
      _instance;
} _RobotConfig_default_instance_;
class RPLidarStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RPLidarState>
      _instance;
} _RPLidarState_default_instance_;
class RobotState_SensorsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RobotState_SensorsEntry_DoNotUse>
      _instance;
} _RobotState_SensorsEntry_DoNotUse_default_instance_;
class RobotState_ServosEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RobotState_ServosEntry_DoNotUse>
      _instance;
} _RobotState_ServosEntry_DoNotUse_default_instance_;
class RobotStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RobotState>
      _instance;
} _RobotState_default_instance_;
}  // namespace robot
}  // namespace goldo
namespace protobuf_goldo_2frobot_2eproto {
static void InitDefaultsRobotGeometry() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::goldo::robot::_RobotGeometry_default_instance_;
    new (ptr) ::goldo::robot::RobotGeometry();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::goldo::robot::RobotGeometry::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RobotGeometry =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRobotGeometry}, {
      &protobuf_goldo_2fcommon_2fgeometry_2eproto::scc_info_Point.base,}};

static void InitDefaultsSequencesFile() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::goldo::robot::_SequencesFile_default_instance_;
    new (ptr) ::goldo::robot::SequencesFile();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::goldo::robot::SequencesFile::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SequencesFile =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSequencesFile}, {}};

static void InitDefaultsSequencesOption() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::goldo::robot::_SequencesOption_default_instance_;
    new (ptr) ::goldo::robot::SequencesOption();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::goldo::robot::SequencesOption::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SequencesOption =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSequencesOption}, {}};

static void InitDefaultsRobotConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::goldo::robot::_RobotConfig_default_instance_;
    new (ptr) ::goldo::robot::RobotConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::goldo::robot::RobotConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<6> scc_info_RobotConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 6, InitDefaultsRobotConfig}, {
      &protobuf_goldo_2fnucleo_2eproto::scc_info_NucleoConfig.base,
      &protobuf_goldo_2frobot_2eproto::scc_info_RobotGeometry.base,
      &protobuf_goldo_2frobot_2eproto::scc_info_SequencesFile.base,
      &protobuf_goldo_2frobot_2eproto::scc_info_SequencesOption.base,
      &protobuf_goldo_2frplidar_2eproto::scc_info_RPLidarConfig.base,
      &protobuf_goldo_2fstrategy_2eproto::scc_info_StrategyConfig.base,}};

static void InitDefaultsRPLidarState() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::goldo::robot::_RPLidarState_default_instance_;
    new (ptr) ::goldo::robot::RPLidarState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::goldo::robot::RPLidarState::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_RPLidarState =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsRPLidarState}, {
      &protobuf_goldo_2frplidar_2eproto::scc_info_RobotDetection.base,
      &protobuf_goldo_2frplidar_2eproto::scc_info_Zones.base,}};

static void InitDefaultsRobotState_SensorsEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::goldo::robot::_RobotState_SensorsEntry_DoNotUse_default_instance_;
    new (ptr) ::goldo::robot::RobotState_SensorsEntry_DoNotUse();
  }
  ::goldo::robot::RobotState_SensorsEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RobotState_SensorsEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRobotState_SensorsEntry_DoNotUse}, {}};

static void InitDefaultsRobotState_ServosEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::goldo::robot::_RobotState_ServosEntry_DoNotUse_default_instance_;
    new (ptr) ::goldo::robot::RobotState_ServosEntry_DoNotUse();
  }
  ::goldo::robot::RobotState_ServosEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RobotState_ServosEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRobotState_ServosEntry_DoNotUse}, {
      &protobuf_goldo_2fnucleo_2fservos_2eproto::scc_info_ServoState.base,}};

static void InitDefaultsRobotState() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::goldo::robot::_RobotState_default_instance_;
    new (ptr) ::goldo::robot::RobotState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::goldo::robot::RobotState::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<7> scc_info_RobotState =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 7, InitDefaultsRobotState}, {
      &protobuf_goldo_2fnucleo_2eproto::scc_info_NucleoState.base,
      &protobuf_goldo_2frobot_2eproto::scc_info_RobotState_SensorsEntry_DoNotUse.base,
      &protobuf_goldo_2ftable_2eproto::scc_info_TableState.base,
      &protobuf_goldo_2fcommon_2fgeometry_2eproto::scc_info_Pose.base,
      &protobuf_goldo_2frplidar_2eproto::scc_info_RobotDetection.base,
      &protobuf_goldo_2frobot_2eproto::scc_info_RPLidarState.base,
      &protobuf_goldo_2frobot_2eproto::scc_info_RobotState_ServosEntry_DoNotUse.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_RobotGeometry.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SequencesFile.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SequencesOption.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RobotConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RPLidarState.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RobotState_SensorsEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RobotState_ServosEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RobotState.base);
}

::google::protobuf::Metadata file_level_metadata[8];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::robot::RobotGeometry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::robot::RobotGeometry, front_length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::robot::RobotGeometry, back_length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::robot::RobotGeometry, outline_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::robot::SequencesFile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::robot::SequencesFile, path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::robot::SequencesFile, body_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::robot::SequencesOption, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::robot::SequencesOption, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::robot::SequencesOption, name_),
  offsetof(::goldo::robot::SequencesOptionDefaultTypeInternal, default_bool_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::robot::SequencesOption, default_value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::robot::RobotConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::robot::RobotConfig, nucleo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::robot::RobotConfig, robot_geometry_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::robot::RobotConfig, sequences_names_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::robot::RobotConfig, sequences_files_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::robot::RobotConfig, sequences_options_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::robot::RobotConfig, rplidar_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::robot::RobotConfig, strategy_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::robot::RPLidarState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::robot::RPLidarState, running_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::robot::RPLidarState, detections_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::robot::RPLidarState, zones_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::robot::RobotState_SensorsEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::robot::RobotState_SensorsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::robot::RobotState_SensorsEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::robot::RobotState_SensorsEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::robot::RobotState_ServosEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::robot::RobotState_ServosEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::robot::RobotState_ServosEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::robot::RobotState_ServosEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::robot::RobotState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::robot::RobotState, nucleo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::robot::RobotState, sensors_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::robot::RobotState, table_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::robot::RobotState, emergency_stop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::robot::RobotState, score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::robot::RobotState, match_timer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::robot::RobotState, side_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::robot::RobotState, robot_pose_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::robot::RobotState, tirette_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::robot::RobotState, rplidar_detections_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::robot::RobotState, rplidar_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::robot::RobotState, match_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::goldo::robot::RobotState, servos_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::goldo::robot::RobotGeometry)},
  { 8, -1, sizeof(::goldo::robot::SequencesFile)},
  { 15, -1, sizeof(::goldo::robot::SequencesOption)},
  { 23, -1, sizeof(::goldo::robot::RobotConfig)},
  { 35, -1, sizeof(::goldo::robot::RPLidarState)},
  { 43, 50, sizeof(::goldo::robot::RobotState_SensorsEntry_DoNotUse)},
  { 52, 59, sizeof(::goldo::robot::RobotState_ServosEntry_DoNotUse)},
  { 61, -1, sizeof(::goldo::robot::RobotState)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::goldo::robot::_RobotGeometry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::goldo::robot::_SequencesFile_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::goldo::robot::_SequencesOption_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::goldo::robot::_RobotConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::goldo::robot::_RPLidarState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::goldo::robot::_RobotState_SensorsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::goldo::robot::_RobotState_ServosEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::goldo::robot::_RobotState_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "goldo/robot.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 8);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\021goldo/robot.proto\022\013goldo.robot\032\022goldo/"
      "nucleo.proto\032\023goldo/rplidar.proto\032\021goldo"
      "/table.proto\032\024goldo/strategy.proto\032\033gold"
      "o/common/geometry.proto\032\031goldo/nucleo/se"
      "rvos.proto\032\027goldo/pb2_options.proto\"o\n\rR"
      "obotGeometry\022\024\n\014front_length\030\001 \001(\002\022\023\n\013ba"
      "ck_length\030\002 \001(\002\0223\n\007outline\030\003 \003(\0132\034.goldo"
      ".common.geometry.PointB\004\200\265\030\014\"+\n\rSequence"
      "sFile\022\014\n\004path\030\001 \001(\t\022\014\n\004body\030\002 \001(\t\"H\n\017Seq"
      "uencesOption\022\014\n\004name\030\001 \001(\t\022\026\n\014default_bo"
      "ol\030\002 \001(\010H\000B\017\n\rdefault_value\"\325\002\n\013RobotCon"
      "fig\022*\n\006nucleo\030\001 \001(\0132\032.goldo.nucleo.Nucle"
      "oConfig\0222\n\016robot_geometry\030\002 \001(\0132\032.goldo."
      "robot.RobotGeometry\022\027\n\017sequences_names\030("
      " \003(\t\0223\n\017sequences_files\030) \003(\0132\032.goldo.ro"
      "bot.SequencesFile\0227\n\021sequences_options\030*"
      " \003(\0132\034.goldo.robot.SequencesOption\022-\n\007rp"
      "lidar\0302 \001(\0132\034.goldo.rplidar.RPLidarConfi"
      "g\0220\n\010strategy\030< \001(\0132\036.goldo.strategy.Str"
      "ategyConfig\"w\n\014RPLidarState\022\017\n\007running\030\001"
      " \001(\010\0221\n\ndetections\030\n \003(\0132\035.goldo.rplidar"
      ".RobotDetection\022#\n\005zones\030\013 \001(\0132\024.goldo.r"
      "plidar.Zones\"\377\004\n\nRobotState\022)\n\006nucleo\030\001 "
      "\001(\0132\031.goldo.nucleo.NucleoState\0225\n\007sensor"
      "s\030\002 \003(\0132$.goldo.robot.RobotState.Sensors"
      "Entry\022&\n\005table\030\003 \001(\0132\027.goldo.table.Table"
      "State\022\026\n\016emergency_stop\030\004 \001(\010\022\r\n\005score\030\005"
      " \001(\r\022\023\n\013match_timer\030\006 \001(\r\022\037\n\004side\030\007 \001(\0162"
      "\021.goldo.robot.Side\022/\n\nrobot_pose\030\010 \001(\0132\033"
      ".goldo.common.geometry.Pose\022\017\n\007tirette\030\t"
      " \001(\010\0229\n\022rplidar_detections\030\n \003(\0132\035.goldo"
      ".rplidar.RobotDetection\022*\n\007rplidar\030\013 \001(\013"
      "2\031.goldo.robot.RPLidarState\022,\n\013match_sta"
      "te\030\014 \001(\0162\027.goldo.robot.MatchState\0223\n\006ser"
      "vos\030\r \003(\0132#.goldo.robot.RobotState.Servo"
      "sEntry\032.\n\014SensorsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005v"
      "alue\030\002 \001(\010:\0028\001\032N\n\013ServosEntry\022\013\n\003key\030\001 \001"
      "(\t\022.\n\005value\030\002 \001(\0132\037.goldo.nucleo.servos."
      "ServoState:\0028\001*8\n\004Side\022\020\n\014SIDE_UNKNOWN\020\000"
      "\022\r\n\tSIDE_BLUE\020\001\022\017\n\013SIDE_YELLOW\020\002*~\n\nMatc"
      "hState\022\016\n\nMATCH_IDLE\020\000\022\022\n\016MATCH_PREMATCH"
      "\020\001\022!\n\035MATCH_WAIT_FOR_START_OF_MATCH\020\002\022\017\n"
      "\013MATCH_MATCH\020\003\022\030\n\024MATCH_MATCH_FINISHED\020\004"
      "b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1728);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "goldo/robot.proto", &protobuf_RegisterTypes);
  ::protobuf_goldo_2fnucleo_2eproto::AddDescriptors();
  ::protobuf_goldo_2frplidar_2eproto::AddDescriptors();
  ::protobuf_goldo_2ftable_2eproto::AddDescriptors();
  ::protobuf_goldo_2fstrategy_2eproto::AddDescriptors();
  ::protobuf_goldo_2fcommon_2fgeometry_2eproto::AddDescriptors();
  ::protobuf_goldo_2fnucleo_2fservos_2eproto::AddDescriptors();
  ::protobuf_goldo_2fpb2_5foptions_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_goldo_2frobot_2eproto
namespace goldo {
namespace robot {
const ::google::protobuf::EnumDescriptor* Side_descriptor() {
  protobuf_goldo_2frobot_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_goldo_2frobot_2eproto::file_level_enum_descriptors[0];
}
bool Side_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MatchState_descriptor() {
  protobuf_goldo_2frobot_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_goldo_2frobot_2eproto::file_level_enum_descriptors[1];
}
bool MatchState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void RobotGeometry::InitAsDefaultInstance() {
}
void RobotGeometry::clear_outline() {
  outline_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RobotGeometry::kFrontLengthFieldNumber;
const int RobotGeometry::kBackLengthFieldNumber;
const int RobotGeometry::kOutlineFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RobotGeometry::RobotGeometry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_goldo_2frobot_2eproto::scc_info_RobotGeometry.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:goldo.robot.RobotGeometry)
}
RobotGeometry::RobotGeometry(const RobotGeometry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      outline_(from.outline_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&front_length_, &from.front_length_,
    static_cast<size_t>(reinterpret_cast<char*>(&back_length_) -
    reinterpret_cast<char*>(&front_length_)) + sizeof(back_length_));
  // @@protoc_insertion_point(copy_constructor:goldo.robot.RobotGeometry)
}

void RobotGeometry::SharedCtor() {
  ::memset(&front_length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&back_length_) -
      reinterpret_cast<char*>(&front_length_)) + sizeof(back_length_));
}

RobotGeometry::~RobotGeometry() {
  // @@protoc_insertion_point(destructor:goldo.robot.RobotGeometry)
  SharedDtor();
}

void RobotGeometry::SharedDtor() {
}

void RobotGeometry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RobotGeometry::descriptor() {
  ::protobuf_goldo_2frobot_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2frobot_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RobotGeometry& RobotGeometry::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_goldo_2frobot_2eproto::scc_info_RobotGeometry.base);
  return *internal_default_instance();
}


void RobotGeometry::Clear() {
// @@protoc_insertion_point(message_clear_start:goldo.robot.RobotGeometry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  outline_.Clear();
  ::memset(&front_length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&back_length_) -
      reinterpret_cast<char*>(&front_length_)) + sizeof(back_length_));
  _internal_metadata_.Clear();
}

bool RobotGeometry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:goldo.robot.RobotGeometry)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float front_length = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &front_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float back_length = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &back_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .goldo.common.geometry.Point outline = 3 [(.goldo.pb2_options.cpp_type) = VOID];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_outline()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:goldo.robot.RobotGeometry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:goldo.robot.RobotGeometry)
  return false;
#undef DO_
}

void RobotGeometry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:goldo.robot.RobotGeometry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float front_length = 1;
  if (this->front_length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->front_length(), output);
  }

  // float back_length = 2;
  if (this->back_length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->back_length(), output);
  }

  // repeated .goldo.common.geometry.Point outline = 3 [(.goldo.pb2_options.cpp_type) = VOID];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->outline_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->outline(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:goldo.robot.RobotGeometry)
}

::google::protobuf::uint8* RobotGeometry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:goldo.robot.RobotGeometry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float front_length = 1;
  if (this->front_length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->front_length(), target);
  }

  // float back_length = 2;
  if (this->back_length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->back_length(), target);
  }

  // repeated .goldo.common.geometry.Point outline = 3 [(.goldo.pb2_options.cpp_type) = VOID];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->outline_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->outline(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:goldo.robot.RobotGeometry)
  return target;
}

size_t RobotGeometry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:goldo.robot.RobotGeometry)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .goldo.common.geometry.Point outline = 3 [(.goldo.pb2_options.cpp_type) = VOID];
  {
    unsigned int count = static_cast<unsigned int>(this->outline_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->outline(static_cast<int>(i)));
    }
  }

  // float front_length = 1;
  if (this->front_length() != 0) {
    total_size += 1 + 4;
  }

  // float back_length = 2;
  if (this->back_length() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RobotGeometry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:goldo.robot.RobotGeometry)
  GOOGLE_DCHECK_NE(&from, this);
  const RobotGeometry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RobotGeometry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:goldo.robot.RobotGeometry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:goldo.robot.RobotGeometry)
    MergeFrom(*source);
  }
}

void RobotGeometry::MergeFrom(const RobotGeometry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:goldo.robot.RobotGeometry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  outline_.MergeFrom(from.outline_);
  if (from.front_length() != 0) {
    set_front_length(from.front_length());
  }
  if (from.back_length() != 0) {
    set_back_length(from.back_length());
  }
}

void RobotGeometry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:goldo.robot.RobotGeometry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RobotGeometry::CopyFrom(const RobotGeometry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:goldo.robot.RobotGeometry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotGeometry::IsInitialized() const {
  return true;
}

void RobotGeometry::Swap(RobotGeometry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RobotGeometry::InternalSwap(RobotGeometry* other) {
  using std::swap;
  CastToBase(&outline_)->InternalSwap(CastToBase(&other->outline_));
  swap(front_length_, other->front_length_);
  swap(back_length_, other->back_length_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RobotGeometry::GetMetadata() const {
  protobuf_goldo_2frobot_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2frobot_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SequencesFile::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SequencesFile::kPathFieldNumber;
const int SequencesFile::kBodyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SequencesFile::SequencesFile()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_goldo_2frobot_2eproto::scc_info_SequencesFile.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:goldo.robot.SequencesFile)
}
SequencesFile::SequencesFile(const SequencesFile& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.path().size() > 0) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.body().size() > 0) {
    body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.body_);
  }
  // @@protoc_insertion_point(copy_constructor:goldo.robot.SequencesFile)
}

void SequencesFile::SharedCtor() {
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SequencesFile::~SequencesFile() {
  // @@protoc_insertion_point(destructor:goldo.robot.SequencesFile)
  SharedDtor();
}

void SequencesFile::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  body_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SequencesFile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SequencesFile::descriptor() {
  ::protobuf_goldo_2frobot_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2frobot_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SequencesFile& SequencesFile::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_goldo_2frobot_2eproto::scc_info_SequencesFile.base);
  return *internal_default_instance();
}


void SequencesFile::Clear() {
// @@protoc_insertion_point(message_clear_start:goldo.robot.SequencesFile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool SequencesFile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:goldo.robot.SequencesFile)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string path = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), static_cast<int>(this->path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "goldo.robot.SequencesFile.path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string body = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_body()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->body().data(), static_cast<int>(this->body().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "goldo.robot.SequencesFile.body"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:goldo.robot.SequencesFile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:goldo.robot.SequencesFile)
  return false;
#undef DO_
}

void SequencesFile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:goldo.robot.SequencesFile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "goldo.robot.SequencesFile.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  // string body = 2;
  if (this->body().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->body().data(), static_cast<int>(this->body().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "goldo.robot.SequencesFile.body");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->body(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:goldo.robot.SequencesFile)
}

::google::protobuf::uint8* SequencesFile::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:goldo.robot.SequencesFile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "goldo.robot.SequencesFile.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  // string body = 2;
  if (this->body().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->body().data(), static_cast<int>(this->body().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "goldo.robot.SequencesFile.body");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->body(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:goldo.robot.SequencesFile)
  return target;
}

size_t SequencesFile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:goldo.robot.SequencesFile)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  // string body = 2;
  if (this->body().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->body());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SequencesFile::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:goldo.robot.SequencesFile)
  GOOGLE_DCHECK_NE(&from, this);
  const SequencesFile* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SequencesFile>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:goldo.robot.SequencesFile)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:goldo.robot.SequencesFile)
    MergeFrom(*source);
  }
}

void SequencesFile::MergeFrom(const SequencesFile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:goldo.robot.SequencesFile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  if (from.body().size() > 0) {

    body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.body_);
  }
}

void SequencesFile::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:goldo.robot.SequencesFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SequencesFile::CopyFrom(const SequencesFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:goldo.robot.SequencesFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SequencesFile::IsInitialized() const {
  return true;
}

void SequencesFile::Swap(SequencesFile* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SequencesFile::InternalSwap(SequencesFile* other) {
  using std::swap;
  path_.Swap(&other->path_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  body_.Swap(&other->body_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SequencesFile::GetMetadata() const {
  protobuf_goldo_2frobot_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2frobot_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SequencesOption::InitAsDefaultInstance() {
  ::goldo::robot::_SequencesOption_default_instance_.default_bool_ = false;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SequencesOption::kNameFieldNumber;
const int SequencesOption::kDefaultBoolFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SequencesOption::SequencesOption()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_goldo_2frobot_2eproto::scc_info_SequencesOption.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:goldo.robot.SequencesOption)
}
SequencesOption::SequencesOption(const SequencesOption& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  clear_has_default_value();
  switch (from.default_value_case()) {
    case kDefaultBool: {
      set_default_bool(from.default_bool());
      break;
    }
    case DEFAULT_VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:goldo.robot.SequencesOption)
}

void SequencesOption::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_default_value();
}

SequencesOption::~SequencesOption() {
  // @@protoc_insertion_point(destructor:goldo.robot.SequencesOption)
  SharedDtor();
}

void SequencesOption::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_default_value()) {
    clear_default_value();
  }
}

void SequencesOption::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SequencesOption::descriptor() {
  ::protobuf_goldo_2frobot_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2frobot_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SequencesOption& SequencesOption::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_goldo_2frobot_2eproto::scc_info_SequencesOption.base);
  return *internal_default_instance();
}


void SequencesOption::clear_default_value() {
// @@protoc_insertion_point(one_of_clear_start:goldo.robot.SequencesOption)
  switch (default_value_case()) {
    case kDefaultBool: {
      // No need to clear
      break;
    }
    case DEFAULT_VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DEFAULT_VALUE_NOT_SET;
}


void SequencesOption::Clear() {
// @@protoc_insertion_point(message_clear_start:goldo.robot.SequencesOption)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_default_value();
  _internal_metadata_.Clear();
}

bool SequencesOption::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:goldo.robot.SequencesOption)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "goldo.robot.SequencesOption.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool default_bool = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          clear_default_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &default_value_.default_bool_)));
          set_has_default_bool();
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:goldo.robot.SequencesOption)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:goldo.robot.SequencesOption)
  return false;
#undef DO_
}

void SequencesOption::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:goldo.robot.SequencesOption)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "goldo.robot.SequencesOption.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // bool default_bool = 2;
  if (has_default_bool()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->default_bool(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:goldo.robot.SequencesOption)
}

::google::protobuf::uint8* SequencesOption::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:goldo.robot.SequencesOption)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "goldo.robot.SequencesOption.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // bool default_bool = 2;
  if (has_default_bool()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->default_bool(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:goldo.robot.SequencesOption)
  return target;
}

size_t SequencesOption::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:goldo.robot.SequencesOption)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  switch (default_value_case()) {
    // bool default_bool = 2;
    case kDefaultBool: {
      total_size += 1 + 1;
      break;
    }
    case DEFAULT_VALUE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SequencesOption::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:goldo.robot.SequencesOption)
  GOOGLE_DCHECK_NE(&from, this);
  const SequencesOption* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SequencesOption>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:goldo.robot.SequencesOption)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:goldo.robot.SequencesOption)
    MergeFrom(*source);
  }
}

void SequencesOption::MergeFrom(const SequencesOption& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:goldo.robot.SequencesOption)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  switch (from.default_value_case()) {
    case kDefaultBool: {
      set_default_bool(from.default_bool());
      break;
    }
    case DEFAULT_VALUE_NOT_SET: {
      break;
    }
  }
}

void SequencesOption::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:goldo.robot.SequencesOption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SequencesOption::CopyFrom(const SequencesOption& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:goldo.robot.SequencesOption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SequencesOption::IsInitialized() const {
  return true;
}

void SequencesOption::Swap(SequencesOption* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SequencesOption::InternalSwap(SequencesOption* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(default_value_, other->default_value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SequencesOption::GetMetadata() const {
  protobuf_goldo_2frobot_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2frobot_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RobotConfig::InitAsDefaultInstance() {
  ::goldo::robot::_RobotConfig_default_instance_._instance.get_mutable()->nucleo_ = const_cast< ::goldo::nucleo::NucleoConfig*>(
      ::goldo::nucleo::NucleoConfig::internal_default_instance());
  ::goldo::robot::_RobotConfig_default_instance_._instance.get_mutable()->robot_geometry_ = const_cast< ::goldo::robot::RobotGeometry*>(
      ::goldo::robot::RobotGeometry::internal_default_instance());
  ::goldo::robot::_RobotConfig_default_instance_._instance.get_mutable()->rplidar_ = const_cast< ::goldo::rplidar::RPLidarConfig*>(
      ::goldo::rplidar::RPLidarConfig::internal_default_instance());
  ::goldo::robot::_RobotConfig_default_instance_._instance.get_mutable()->strategy_ = const_cast< ::goldo::strategy::StrategyConfig*>(
      ::goldo::strategy::StrategyConfig::internal_default_instance());
}
void RobotConfig::clear_nucleo() {
  if (GetArenaNoVirtual() == NULL && nucleo_ != NULL) {
    delete nucleo_;
  }
  nucleo_ = NULL;
}
void RobotConfig::clear_rplidar() {
  if (GetArenaNoVirtual() == NULL && rplidar_ != NULL) {
    delete rplidar_;
  }
  rplidar_ = NULL;
}
void RobotConfig::clear_strategy() {
  if (GetArenaNoVirtual() == NULL && strategy_ != NULL) {
    delete strategy_;
  }
  strategy_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RobotConfig::kNucleoFieldNumber;
const int RobotConfig::kRobotGeometryFieldNumber;
const int RobotConfig::kSequencesNamesFieldNumber;
const int RobotConfig::kSequencesFilesFieldNumber;
const int RobotConfig::kSequencesOptionsFieldNumber;
const int RobotConfig::kRplidarFieldNumber;
const int RobotConfig::kStrategyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RobotConfig::RobotConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_goldo_2frobot_2eproto::scc_info_RobotConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:goldo.robot.RobotConfig)
}
RobotConfig::RobotConfig(const RobotConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      sequences_names_(from.sequences_names_),
      sequences_files_(from.sequences_files_),
      sequences_options_(from.sequences_options_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_nucleo()) {
    nucleo_ = new ::goldo::nucleo::NucleoConfig(*from.nucleo_);
  } else {
    nucleo_ = NULL;
  }
  if (from.has_robot_geometry()) {
    robot_geometry_ = new ::goldo::robot::RobotGeometry(*from.robot_geometry_);
  } else {
    robot_geometry_ = NULL;
  }
  if (from.has_rplidar()) {
    rplidar_ = new ::goldo::rplidar::RPLidarConfig(*from.rplidar_);
  } else {
    rplidar_ = NULL;
  }
  if (from.has_strategy()) {
    strategy_ = new ::goldo::strategy::StrategyConfig(*from.strategy_);
  } else {
    strategy_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:goldo.robot.RobotConfig)
}

void RobotConfig::SharedCtor() {
  ::memset(&nucleo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&strategy_) -
      reinterpret_cast<char*>(&nucleo_)) + sizeof(strategy_));
}

RobotConfig::~RobotConfig() {
  // @@protoc_insertion_point(destructor:goldo.robot.RobotConfig)
  SharedDtor();
}

void RobotConfig::SharedDtor() {
  if (this != internal_default_instance()) delete nucleo_;
  if (this != internal_default_instance()) delete robot_geometry_;
  if (this != internal_default_instance()) delete rplidar_;
  if (this != internal_default_instance()) delete strategy_;
}

void RobotConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RobotConfig::descriptor() {
  ::protobuf_goldo_2frobot_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2frobot_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RobotConfig& RobotConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_goldo_2frobot_2eproto::scc_info_RobotConfig.base);
  return *internal_default_instance();
}


void RobotConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:goldo.robot.RobotConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sequences_names_.Clear();
  sequences_files_.Clear();
  sequences_options_.Clear();
  if (GetArenaNoVirtual() == NULL && nucleo_ != NULL) {
    delete nucleo_;
  }
  nucleo_ = NULL;
  if (GetArenaNoVirtual() == NULL && robot_geometry_ != NULL) {
    delete robot_geometry_;
  }
  robot_geometry_ = NULL;
  if (GetArenaNoVirtual() == NULL && rplidar_ != NULL) {
    delete rplidar_;
  }
  rplidar_ = NULL;
  if (GetArenaNoVirtual() == NULL && strategy_ != NULL) {
    delete strategy_;
  }
  strategy_ = NULL;
  _internal_metadata_.Clear();
}

bool RobotConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:goldo.robot.RobotConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .goldo.nucleo.NucleoConfig nucleo = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_nucleo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .goldo.robot.RobotGeometry robot_geometry = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_robot_geometry()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string sequences_names = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 322 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_sequences_names()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sequences_names(this->sequences_names_size() - 1).data(),
            static_cast<int>(this->sequences_names(this->sequences_names_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "goldo.robot.RobotConfig.sequences_names"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .goldo.robot.SequencesFile sequences_files = 41;
      case 41: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 330 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_sequences_files()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .goldo.robot.SequencesOption sequences_options = 42;
      case 42: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 338 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_sequences_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .goldo.rplidar.RPLidarConfig rplidar = 50;
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 402 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rplidar()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .goldo.strategy.StrategyConfig strategy = 60;
      case 60: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(226u /* 482 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_strategy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:goldo.robot.RobotConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:goldo.robot.RobotConfig)
  return false;
#undef DO_
}

void RobotConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:goldo.robot.RobotConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .goldo.nucleo.NucleoConfig nucleo = 1;
  if (this->has_nucleo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_nucleo(), output);
  }

  // .goldo.robot.RobotGeometry robot_geometry = 2;
  if (this->has_robot_geometry()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_robot_geometry(), output);
  }

  // repeated string sequences_names = 40;
  for (int i = 0, n = this->sequences_names_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sequences_names(i).data(), static_cast<int>(this->sequences_names(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "goldo.robot.RobotConfig.sequences_names");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      40, this->sequences_names(i), output);
  }

  // repeated .goldo.robot.SequencesFile sequences_files = 41;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sequences_files_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      41,
      this->sequences_files(static_cast<int>(i)),
      output);
  }

  // repeated .goldo.robot.SequencesOption sequences_options = 42;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sequences_options_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      42,
      this->sequences_options(static_cast<int>(i)),
      output);
  }

  // .goldo.rplidar.RPLidarConfig rplidar = 50;
  if (this->has_rplidar()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      50, this->_internal_rplidar(), output);
  }

  // .goldo.strategy.StrategyConfig strategy = 60;
  if (this->has_strategy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      60, this->_internal_strategy(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:goldo.robot.RobotConfig)
}

::google::protobuf::uint8* RobotConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:goldo.robot.RobotConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .goldo.nucleo.NucleoConfig nucleo = 1;
  if (this->has_nucleo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_nucleo(), deterministic, target);
  }

  // .goldo.robot.RobotGeometry robot_geometry = 2;
  if (this->has_robot_geometry()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_robot_geometry(), deterministic, target);
  }

  // repeated string sequences_names = 40;
  for (int i = 0, n = this->sequences_names_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sequences_names(i).data(), static_cast<int>(this->sequences_names(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "goldo.robot.RobotConfig.sequences_names");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(40, this->sequences_names(i), target);
  }

  // repeated .goldo.robot.SequencesFile sequences_files = 41;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sequences_files_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        41, this->sequences_files(static_cast<int>(i)), deterministic, target);
  }

  // repeated .goldo.robot.SequencesOption sequences_options = 42;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sequences_options_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        42, this->sequences_options(static_cast<int>(i)), deterministic, target);
  }

  // .goldo.rplidar.RPLidarConfig rplidar = 50;
  if (this->has_rplidar()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        50, this->_internal_rplidar(), deterministic, target);
  }

  // .goldo.strategy.StrategyConfig strategy = 60;
  if (this->has_strategy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        60, this->_internal_strategy(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:goldo.robot.RobotConfig)
  return target;
}

size_t RobotConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:goldo.robot.RobotConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string sequences_names = 40;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->sequences_names_size());
  for (int i = 0, n = this->sequences_names_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->sequences_names(i));
  }

  // repeated .goldo.robot.SequencesFile sequences_files = 41;
  {
    unsigned int count = static_cast<unsigned int>(this->sequences_files_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->sequences_files(static_cast<int>(i)));
    }
  }

  // repeated .goldo.robot.SequencesOption sequences_options = 42;
  {
    unsigned int count = static_cast<unsigned int>(this->sequences_options_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->sequences_options(static_cast<int>(i)));
    }
  }

  // .goldo.nucleo.NucleoConfig nucleo = 1;
  if (this->has_nucleo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *nucleo_);
  }

  // .goldo.robot.RobotGeometry robot_geometry = 2;
  if (this->has_robot_geometry()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *robot_geometry_);
  }

  // .goldo.rplidar.RPLidarConfig rplidar = 50;
  if (this->has_rplidar()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *rplidar_);
  }

  // .goldo.strategy.StrategyConfig strategy = 60;
  if (this->has_strategy()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *strategy_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RobotConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:goldo.robot.RobotConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const RobotConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RobotConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:goldo.robot.RobotConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:goldo.robot.RobotConfig)
    MergeFrom(*source);
  }
}

void RobotConfig::MergeFrom(const RobotConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:goldo.robot.RobotConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sequences_names_.MergeFrom(from.sequences_names_);
  sequences_files_.MergeFrom(from.sequences_files_);
  sequences_options_.MergeFrom(from.sequences_options_);
  if (from.has_nucleo()) {
    mutable_nucleo()->::goldo::nucleo::NucleoConfig::MergeFrom(from.nucleo());
  }
  if (from.has_robot_geometry()) {
    mutable_robot_geometry()->::goldo::robot::RobotGeometry::MergeFrom(from.robot_geometry());
  }
  if (from.has_rplidar()) {
    mutable_rplidar()->::goldo::rplidar::RPLidarConfig::MergeFrom(from.rplidar());
  }
  if (from.has_strategy()) {
    mutable_strategy()->::goldo::strategy::StrategyConfig::MergeFrom(from.strategy());
  }
}

void RobotConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:goldo.robot.RobotConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RobotConfig::CopyFrom(const RobotConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:goldo.robot.RobotConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotConfig::IsInitialized() const {
  return true;
}

void RobotConfig::Swap(RobotConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RobotConfig::InternalSwap(RobotConfig* other) {
  using std::swap;
  sequences_names_.InternalSwap(CastToBase(&other->sequences_names_));
  CastToBase(&sequences_files_)->InternalSwap(CastToBase(&other->sequences_files_));
  CastToBase(&sequences_options_)->InternalSwap(CastToBase(&other->sequences_options_));
  swap(nucleo_, other->nucleo_);
  swap(robot_geometry_, other->robot_geometry_);
  swap(rplidar_, other->rplidar_);
  swap(strategy_, other->strategy_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RobotConfig::GetMetadata() const {
  protobuf_goldo_2frobot_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2frobot_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RPLidarState::InitAsDefaultInstance() {
  ::goldo::robot::_RPLidarState_default_instance_._instance.get_mutable()->zones_ = const_cast< ::goldo::rplidar::Zones*>(
      ::goldo::rplidar::Zones::internal_default_instance());
}
void RPLidarState::clear_detections() {
  detections_.Clear();
}
void RPLidarState::clear_zones() {
  if (GetArenaNoVirtual() == NULL && zones_ != NULL) {
    delete zones_;
  }
  zones_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RPLidarState::kRunningFieldNumber;
const int RPLidarState::kDetectionsFieldNumber;
const int RPLidarState::kZonesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RPLidarState::RPLidarState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_goldo_2frobot_2eproto::scc_info_RPLidarState.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:goldo.robot.RPLidarState)
}
RPLidarState::RPLidarState(const RPLidarState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      detections_(from.detections_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_zones()) {
    zones_ = new ::goldo::rplidar::Zones(*from.zones_);
  } else {
    zones_ = NULL;
  }
  running_ = from.running_;
  // @@protoc_insertion_point(copy_constructor:goldo.robot.RPLidarState)
}

void RPLidarState::SharedCtor() {
  ::memset(&zones_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&running_) -
      reinterpret_cast<char*>(&zones_)) + sizeof(running_));
}

RPLidarState::~RPLidarState() {
  // @@protoc_insertion_point(destructor:goldo.robot.RPLidarState)
  SharedDtor();
}

void RPLidarState::SharedDtor() {
  if (this != internal_default_instance()) delete zones_;
}

void RPLidarState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RPLidarState::descriptor() {
  ::protobuf_goldo_2frobot_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2frobot_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RPLidarState& RPLidarState::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_goldo_2frobot_2eproto::scc_info_RPLidarState.base);
  return *internal_default_instance();
}


void RPLidarState::Clear() {
// @@protoc_insertion_point(message_clear_start:goldo.robot.RPLidarState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  detections_.Clear();
  if (GetArenaNoVirtual() == NULL && zones_ != NULL) {
    delete zones_;
  }
  zones_ = NULL;
  running_ = false;
  _internal_metadata_.Clear();
}

bool RPLidarState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:goldo.robot.RPLidarState)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool running = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &running_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .goldo.rplidar.RobotDetection detections = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_detections()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .goldo.rplidar.Zones zones = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_zones()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:goldo.robot.RPLidarState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:goldo.robot.RPLidarState)
  return false;
#undef DO_
}

void RPLidarState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:goldo.robot.RPLidarState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool running = 1;
  if (this->running() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->running(), output);
  }

  // repeated .goldo.rplidar.RobotDetection detections = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->detections_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10,
      this->detections(static_cast<int>(i)),
      output);
  }

  // .goldo.rplidar.Zones zones = 11;
  if (this->has_zones()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->_internal_zones(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:goldo.robot.RPLidarState)
}

::google::protobuf::uint8* RPLidarState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:goldo.robot.RPLidarState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool running = 1;
  if (this->running() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->running(), target);
  }

  // repeated .goldo.rplidar.RobotDetection detections = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->detections_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->detections(static_cast<int>(i)), deterministic, target);
  }

  // .goldo.rplidar.Zones zones = 11;
  if (this->has_zones()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->_internal_zones(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:goldo.robot.RPLidarState)
  return target;
}

size_t RPLidarState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:goldo.robot.RPLidarState)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .goldo.rplidar.RobotDetection detections = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->detections_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->detections(static_cast<int>(i)));
    }
  }

  // .goldo.rplidar.Zones zones = 11;
  if (this->has_zones()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *zones_);
  }

  // bool running = 1;
  if (this->running() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RPLidarState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:goldo.robot.RPLidarState)
  GOOGLE_DCHECK_NE(&from, this);
  const RPLidarState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RPLidarState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:goldo.robot.RPLidarState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:goldo.robot.RPLidarState)
    MergeFrom(*source);
  }
}

void RPLidarState::MergeFrom(const RPLidarState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:goldo.robot.RPLidarState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  detections_.MergeFrom(from.detections_);
  if (from.has_zones()) {
    mutable_zones()->::goldo::rplidar::Zones::MergeFrom(from.zones());
  }
  if (from.running() != 0) {
    set_running(from.running());
  }
}

void RPLidarState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:goldo.robot.RPLidarState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RPLidarState::CopyFrom(const RPLidarState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:goldo.robot.RPLidarState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RPLidarState::IsInitialized() const {
  return true;
}

void RPLidarState::Swap(RPLidarState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RPLidarState::InternalSwap(RPLidarState* other) {
  using std::swap;
  CastToBase(&detections_)->InternalSwap(CastToBase(&other->detections_));
  swap(zones_, other->zones_);
  swap(running_, other->running_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RPLidarState::GetMetadata() const {
  protobuf_goldo_2frobot_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2frobot_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

RobotState_SensorsEntry_DoNotUse::RobotState_SensorsEntry_DoNotUse() {}
RobotState_SensorsEntry_DoNotUse::RobotState_SensorsEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void RobotState_SensorsEntry_DoNotUse::MergeFrom(const RobotState_SensorsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata RobotState_SensorsEntry_DoNotUse::GetMetadata() const {
  ::protobuf_goldo_2frobot_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2frobot_2eproto::file_level_metadata[5];
}
void RobotState_SensorsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

RobotState_ServosEntry_DoNotUse::RobotState_ServosEntry_DoNotUse() {}
RobotState_ServosEntry_DoNotUse::RobotState_ServosEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void RobotState_ServosEntry_DoNotUse::MergeFrom(const RobotState_ServosEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata RobotState_ServosEntry_DoNotUse::GetMetadata() const {
  ::protobuf_goldo_2frobot_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2frobot_2eproto::file_level_metadata[6];
}
void RobotState_ServosEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void RobotState::InitAsDefaultInstance() {
  ::goldo::robot::_RobotState_default_instance_._instance.get_mutable()->nucleo_ = const_cast< ::goldo::nucleo::NucleoState*>(
      ::goldo::nucleo::NucleoState::internal_default_instance());
  ::goldo::robot::_RobotState_default_instance_._instance.get_mutable()->table_ = const_cast< ::goldo::table::TableState*>(
      ::goldo::table::TableState::internal_default_instance());
  ::goldo::robot::_RobotState_default_instance_._instance.get_mutable()->robot_pose_ = const_cast< ::goldo::common::geometry::Pose*>(
      ::goldo::common::geometry::Pose::internal_default_instance());
  ::goldo::robot::_RobotState_default_instance_._instance.get_mutable()->rplidar_ = const_cast< ::goldo::robot::RPLidarState*>(
      ::goldo::robot::RPLidarState::internal_default_instance());
}
void RobotState::clear_nucleo() {
  if (GetArenaNoVirtual() == NULL && nucleo_ != NULL) {
    delete nucleo_;
  }
  nucleo_ = NULL;
}
void RobotState::clear_table() {
  if (GetArenaNoVirtual() == NULL && table_ != NULL) {
    delete table_;
  }
  table_ = NULL;
}
void RobotState::clear_robot_pose() {
  if (GetArenaNoVirtual() == NULL && robot_pose_ != NULL) {
    delete robot_pose_;
  }
  robot_pose_ = NULL;
}
void RobotState::clear_rplidar_detections() {
  rplidar_detections_.Clear();
}
void RobotState::clear_servos() {
  servos_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RobotState::kNucleoFieldNumber;
const int RobotState::kSensorsFieldNumber;
const int RobotState::kTableFieldNumber;
const int RobotState::kEmergencyStopFieldNumber;
const int RobotState::kScoreFieldNumber;
const int RobotState::kMatchTimerFieldNumber;
const int RobotState::kSideFieldNumber;
const int RobotState::kRobotPoseFieldNumber;
const int RobotState::kTiretteFieldNumber;
const int RobotState::kRplidarDetectionsFieldNumber;
const int RobotState::kRplidarFieldNumber;
const int RobotState::kMatchStateFieldNumber;
const int RobotState::kServosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RobotState::RobotState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_goldo_2frobot_2eproto::scc_info_RobotState.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:goldo.robot.RobotState)
}
RobotState::RobotState(const RobotState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      rplidar_detections_(from.rplidar_detections_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sensors_.MergeFrom(from.sensors_);
  servos_.MergeFrom(from.servos_);
  if (from.has_nucleo()) {
    nucleo_ = new ::goldo::nucleo::NucleoState(*from.nucleo_);
  } else {
    nucleo_ = NULL;
  }
  if (from.has_table()) {
    table_ = new ::goldo::table::TableState(*from.table_);
  } else {
    table_ = NULL;
  }
  if (from.has_robot_pose()) {
    robot_pose_ = new ::goldo::common::geometry::Pose(*from.robot_pose_);
  } else {
    robot_pose_ = NULL;
  }
  if (from.has_rplidar()) {
    rplidar_ = new ::goldo::robot::RPLidarState(*from.rplidar_);
  } else {
    rplidar_ = NULL;
  }
  ::memcpy(&score_, &from.score_,
    static_cast<size_t>(reinterpret_cast<char*>(&match_state_) -
    reinterpret_cast<char*>(&score_)) + sizeof(match_state_));
  // @@protoc_insertion_point(copy_constructor:goldo.robot.RobotState)
}

void RobotState::SharedCtor() {
  ::memset(&nucleo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&match_state_) -
      reinterpret_cast<char*>(&nucleo_)) + sizeof(match_state_));
}

RobotState::~RobotState() {
  // @@protoc_insertion_point(destructor:goldo.robot.RobotState)
  SharedDtor();
}

void RobotState::SharedDtor() {
  if (this != internal_default_instance()) delete nucleo_;
  if (this != internal_default_instance()) delete table_;
  if (this != internal_default_instance()) delete robot_pose_;
  if (this != internal_default_instance()) delete rplidar_;
}

void RobotState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RobotState::descriptor() {
  ::protobuf_goldo_2frobot_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2frobot_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RobotState& RobotState::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_goldo_2frobot_2eproto::scc_info_RobotState.base);
  return *internal_default_instance();
}


void RobotState::Clear() {
// @@protoc_insertion_point(message_clear_start:goldo.robot.RobotState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sensors_.Clear();
  rplidar_detections_.Clear();
  servos_.Clear();
  if (GetArenaNoVirtual() == NULL && nucleo_ != NULL) {
    delete nucleo_;
  }
  nucleo_ = NULL;
  if (GetArenaNoVirtual() == NULL && table_ != NULL) {
    delete table_;
  }
  table_ = NULL;
  if (GetArenaNoVirtual() == NULL && robot_pose_ != NULL) {
    delete robot_pose_;
  }
  robot_pose_ = NULL;
  if (GetArenaNoVirtual() == NULL && rplidar_ != NULL) {
    delete rplidar_;
  }
  rplidar_ = NULL;
  ::memset(&score_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&match_state_) -
      reinterpret_cast<char*>(&score_)) + sizeof(match_state_));
  _internal_metadata_.Clear();
}

bool RobotState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:goldo.robot.RobotState)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .goldo.nucleo.NucleoState nucleo = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_nucleo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, bool> sensors = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          RobotState_SensorsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              RobotState_SensorsEntry_DoNotUse,
              ::std::string, bool,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_BOOL,
              0 >,
            ::google::protobuf::Map< ::std::string, bool > > parser(&sensors_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "goldo.robot.RobotState.SensorsEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .goldo.table.TableState table = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_table()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool emergency_stop = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &emergency_stop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 score = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 match_timer = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &match_timer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .goldo.robot.Side side = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_side(static_cast< ::goldo::robot::Side >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .goldo.common.geometry.Pose robot_pose = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_robot_pose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool tirette = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tirette_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .goldo.rplidar.RobotDetection rplidar_detections = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_rplidar_detections()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .goldo.robot.RPLidarState rplidar = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rplidar()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .goldo.robot.MatchState match_state = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_match_state(static_cast< ::goldo::robot::MatchState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .goldo.nucleo.servos.ServoState> servos = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          RobotState_ServosEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              RobotState_ServosEntry_DoNotUse,
              ::std::string, ::goldo::nucleo::servos::ServoState,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::goldo::nucleo::servos::ServoState > > parser(&servos_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "goldo.robot.RobotState.ServosEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:goldo.robot.RobotState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:goldo.robot.RobotState)
  return false;
#undef DO_
}

void RobotState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:goldo.robot.RobotState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .goldo.nucleo.NucleoState nucleo = 1;
  if (this->has_nucleo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_nucleo(), output);
  }

  // map<string, bool> sensors = 2;
  if (!this->sensors().empty()) {
    typedef ::google::protobuf::Map< ::std::string, bool >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "goldo.robot.RobotState.SensorsEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->sensors().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->sensors().size()]);
      typedef ::google::protobuf::Map< ::std::string, bool >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, bool >::const_iterator
          it = this->sensors().begin();
          it != this->sensors().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<RobotState_SensorsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(sensors_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<RobotState_SensorsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, bool >::const_iterator
          it = this->sensors().begin();
          it != this->sensors().end(); ++it) {
        entry.reset(sensors_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // .goldo.table.TableState table = 3;
  if (this->has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_table(), output);
  }

  // bool emergency_stop = 4;
  if (this->emergency_stop() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->emergency_stop(), output);
  }

  // uint32 score = 5;
  if (this->score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->score(), output);
  }

  // uint32 match_timer = 6;
  if (this->match_timer() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->match_timer(), output);
  }

  // .goldo.robot.Side side = 7;
  if (this->side() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->side(), output);
  }

  // .goldo.common.geometry.Pose robot_pose = 8;
  if (this->has_robot_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_robot_pose(), output);
  }

  // bool tirette = 9;
  if (this->tirette() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->tirette(), output);
  }

  // repeated .goldo.rplidar.RobotDetection rplidar_detections = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rplidar_detections_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10,
      this->rplidar_detections(static_cast<int>(i)),
      output);
  }

  // .goldo.robot.RPLidarState rplidar = 11;
  if (this->has_rplidar()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->_internal_rplidar(), output);
  }

  // .goldo.robot.MatchState match_state = 12;
  if (this->match_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->match_state(), output);
  }

  // map<string, .goldo.nucleo.servos.ServoState> servos = 13;
  if (!this->servos().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::goldo::nucleo::servos::ServoState >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "goldo.robot.RobotState.ServosEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->servos().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->servos().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::goldo::nucleo::servos::ServoState >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::goldo::nucleo::servos::ServoState >::const_iterator
          it = this->servos().begin();
          it != this->servos().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<RobotState_ServosEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(servos_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            13, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<RobotState_ServosEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::goldo::nucleo::servos::ServoState >::const_iterator
          it = this->servos().begin();
          it != this->servos().end(); ++it) {
        entry.reset(servos_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            13, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:goldo.robot.RobotState)
}

::google::protobuf::uint8* RobotState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:goldo.robot.RobotState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .goldo.nucleo.NucleoState nucleo = 1;
  if (this->has_nucleo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_nucleo(), deterministic, target);
  }

  // map<string, bool> sensors = 2;
  if (!this->sensors().empty()) {
    typedef ::google::protobuf::Map< ::std::string, bool >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "goldo.robot.RobotState.SensorsEntry.key");
      }
    };

    if (deterministic &&
        this->sensors().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->sensors().size()]);
      typedef ::google::protobuf::Map< ::std::string, bool >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, bool >::const_iterator
          it = this->sensors().begin();
          it != this->sensors().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<RobotState_SensorsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(sensors_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<RobotState_SensorsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, bool >::const_iterator
          it = this->sensors().begin();
          it != this->sensors().end(); ++it) {
        entry.reset(sensors_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // .goldo.table.TableState table = 3;
  if (this->has_table()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_table(), deterministic, target);
  }

  // bool emergency_stop = 4;
  if (this->emergency_stop() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->emergency_stop(), target);
  }

  // uint32 score = 5;
  if (this->score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->score(), target);
  }

  // uint32 match_timer = 6;
  if (this->match_timer() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->match_timer(), target);
  }

  // .goldo.robot.Side side = 7;
  if (this->side() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->side(), target);
  }

  // .goldo.common.geometry.Pose robot_pose = 8;
  if (this->has_robot_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_robot_pose(), deterministic, target);
  }

  // bool tirette = 9;
  if (this->tirette() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->tirette(), target);
  }

  // repeated .goldo.rplidar.RobotDetection rplidar_detections = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rplidar_detections_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->rplidar_detections(static_cast<int>(i)), deterministic, target);
  }

  // .goldo.robot.RPLidarState rplidar = 11;
  if (this->has_rplidar()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->_internal_rplidar(), deterministic, target);
  }

  // .goldo.robot.MatchState match_state = 12;
  if (this->match_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->match_state(), target);
  }

  // map<string, .goldo.nucleo.servos.ServoState> servos = 13;
  if (!this->servos().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::goldo::nucleo::servos::ServoState >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "goldo.robot.RobotState.ServosEntry.key");
      }
    };

    if (deterministic &&
        this->servos().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->servos().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::goldo::nucleo::servos::ServoState >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::goldo::nucleo::servos::ServoState >::const_iterator
          it = this->servos().begin();
          it != this->servos().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<RobotState_ServosEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(servos_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       13, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<RobotState_ServosEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::goldo::nucleo::servos::ServoState >::const_iterator
          it = this->servos().begin();
          it != this->servos().end(); ++it) {
        entry.reset(servos_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       13, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:goldo.robot.RobotState)
  return target;
}

size_t RobotState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:goldo.robot.RobotState)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<string, bool> sensors = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->sensors_size());
  {
    ::std::unique_ptr<RobotState_SensorsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, bool >::const_iterator
        it = this->sensors().begin();
        it != this->sensors().end(); ++it) {
      entry.reset(sensors_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // repeated .goldo.rplidar.RobotDetection rplidar_detections = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->rplidar_detections_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->rplidar_detections(static_cast<int>(i)));
    }
  }

  // map<string, .goldo.nucleo.servos.ServoState> servos = 13;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->servos_size());
  {
    ::std::unique_ptr<RobotState_ServosEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::goldo::nucleo::servos::ServoState >::const_iterator
        it = this->servos().begin();
        it != this->servos().end(); ++it) {
      entry.reset(servos_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // .goldo.nucleo.NucleoState nucleo = 1;
  if (this->has_nucleo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *nucleo_);
  }

  // .goldo.table.TableState table = 3;
  if (this->has_table()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *table_);
  }

  // .goldo.common.geometry.Pose robot_pose = 8;
  if (this->has_robot_pose()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *robot_pose_);
  }

  // .goldo.robot.RPLidarState rplidar = 11;
  if (this->has_rplidar()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *rplidar_);
  }

  // uint32 score = 5;
  if (this->score() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->score());
  }

  // uint32 match_timer = 6;
  if (this->match_timer() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->match_timer());
  }

  // bool emergency_stop = 4;
  if (this->emergency_stop() != 0) {
    total_size += 1 + 1;
  }

  // bool tirette = 9;
  if (this->tirette() != 0) {
    total_size += 1 + 1;
  }

  // .goldo.robot.Side side = 7;
  if (this->side() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->side());
  }

  // .goldo.robot.MatchState match_state = 12;
  if (this->match_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->match_state());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RobotState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:goldo.robot.RobotState)
  GOOGLE_DCHECK_NE(&from, this);
  const RobotState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RobotState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:goldo.robot.RobotState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:goldo.robot.RobotState)
    MergeFrom(*source);
  }
}

void RobotState::MergeFrom(const RobotState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:goldo.robot.RobotState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sensors_.MergeFrom(from.sensors_);
  rplidar_detections_.MergeFrom(from.rplidar_detections_);
  servos_.MergeFrom(from.servos_);
  if (from.has_nucleo()) {
    mutable_nucleo()->::goldo::nucleo::NucleoState::MergeFrom(from.nucleo());
  }
  if (from.has_table()) {
    mutable_table()->::goldo::table::TableState::MergeFrom(from.table());
  }
  if (from.has_robot_pose()) {
    mutable_robot_pose()->::goldo::common::geometry::Pose::MergeFrom(from.robot_pose());
  }
  if (from.has_rplidar()) {
    mutable_rplidar()->::goldo::robot::RPLidarState::MergeFrom(from.rplidar());
  }
  if (from.score() != 0) {
    set_score(from.score());
  }
  if (from.match_timer() != 0) {
    set_match_timer(from.match_timer());
  }
  if (from.emergency_stop() != 0) {
    set_emergency_stop(from.emergency_stop());
  }
  if (from.tirette() != 0) {
    set_tirette(from.tirette());
  }
  if (from.side() != 0) {
    set_side(from.side());
  }
  if (from.match_state() != 0) {
    set_match_state(from.match_state());
  }
}

void RobotState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:goldo.robot.RobotState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RobotState::CopyFrom(const RobotState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:goldo.robot.RobotState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotState::IsInitialized() const {
  return true;
}

void RobotState::Swap(RobotState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RobotState::InternalSwap(RobotState* other) {
  using std::swap;
  sensors_.Swap(&other->sensors_);
  CastToBase(&rplidar_detections_)->InternalSwap(CastToBase(&other->rplidar_detections_));
  servos_.Swap(&other->servos_);
  swap(nucleo_, other->nucleo_);
  swap(table_, other->table_);
  swap(robot_pose_, other->robot_pose_);
  swap(rplidar_, other->rplidar_);
  swap(score_, other->score_);
  swap(match_timer_, other->match_timer_);
  swap(emergency_stop_, other->emergency_stop_);
  swap(tirette_, other->tirette_);
  swap(side_, other->side_);
  swap(match_state_, other->match_state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RobotState::GetMetadata() const {
  protobuf_goldo_2frobot_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_goldo_2frobot_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace robot
}  // namespace goldo
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::goldo::robot::RobotGeometry* Arena::CreateMaybeMessage< ::goldo::robot::RobotGeometry >(Arena* arena) {
  return Arena::CreateInternal< ::goldo::robot::RobotGeometry >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::goldo::robot::SequencesFile* Arena::CreateMaybeMessage< ::goldo::robot::SequencesFile >(Arena* arena) {
  return Arena::CreateInternal< ::goldo::robot::SequencesFile >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::goldo::robot::SequencesOption* Arena::CreateMaybeMessage< ::goldo::robot::SequencesOption >(Arena* arena) {
  return Arena::CreateInternal< ::goldo::robot::SequencesOption >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::goldo::robot::RobotConfig* Arena::CreateMaybeMessage< ::goldo::robot::RobotConfig >(Arena* arena) {
  return Arena::CreateInternal< ::goldo::robot::RobotConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::goldo::robot::RPLidarState* Arena::CreateMaybeMessage< ::goldo::robot::RPLidarState >(Arena* arena) {
  return Arena::CreateInternal< ::goldo::robot::RPLidarState >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::goldo::robot::RobotState_SensorsEntry_DoNotUse* Arena::CreateMaybeMessage< ::goldo::robot::RobotState_SensorsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::goldo::robot::RobotState_SensorsEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::goldo::robot::RobotState_ServosEntry_DoNotUse* Arena::CreateMaybeMessage< ::goldo::robot::RobotState_ServosEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::goldo::robot::RobotState_ServosEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::goldo::robot::RobotState* Arena::CreateMaybeMessage< ::goldo::robot::RobotState >(Arena* arena) {
  return Arena::CreateInternal< ::goldo::robot::RobotState >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
