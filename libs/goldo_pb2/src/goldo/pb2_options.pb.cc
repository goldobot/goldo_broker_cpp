// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: goldo/pb2_options.proto

#include "goldo/pb2_options.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace goldo {
namespace pb2_options {
}  // namespace pb2_options
}  // namespace goldo
namespace protobuf_goldo_2fpb2_5foptions_2eproto {
void InitDefaults() {
}

const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];
const ::google::protobuf::uint32 TableStruct::offsets[1] = {};
static const ::google::protobuf::internal::MigrationSchema* schemas = NULL;
static const ::google::protobuf::Message* const* file_default_instances = NULL;

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "goldo/pb2_options.proto", schemas, file_default_instances, TableStruct::offsets,
      NULL, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\027goldo/pb2_options.proto\022\021goldo.pb2_opt"
      "ions\032 google/protobuf/descriptor.proto*\233"
      "\001\n\007CppType\022\013\n\007UNKNOWN\020\000\022\010\n\004BOOL\020\001\022\010\n\004INT"
      "8\020\002\022\t\n\005UINT8\020\003\022\t\n\005INT16\020\004\022\n\n\006UINT16\020\005\022\t\n"
      "\005INT32\020\006\022\n\n\006UINT32\020\007\022\t\n\005INT64\020\010\022\n\n\006UINT6"
      "4\020\t\022\t\n\005FLOAT\020\n\022\n\n\006DOUBLE\020\013\022\010\n\004VOID\020\014:M\n\010"
      "cpp_type\022\035.google.protobuf.FieldOptions\030"
      "\320\206\003 \001(\0162\032.goldo.pb2_options.CppType:2\n\tm"
      "ax_count\022\035.google.protobuf.FieldOptions\030"
      "\321\206\003 \001(\005:4\n\013fixed_count\022\035.google.protobuf"
      ".FieldOptions\030\322\206\003 \001(\010:O\n\ncount_type\022\035.go"
      "ogle.protobuf.FieldOptions\030\323\206\003 \001(\0162\032.gol"
      "do.pb2_options.CppTypeb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 510);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "goldo/pb2_options.proto", &protobuf_RegisterTypes);
  ::protobuf_google_2fprotobuf_2fdescriptor_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_goldo_2fpb2_5foptions_2eproto
namespace goldo {
namespace pb2_options {
const ::google::protobuf::EnumDescriptor* CppType_descriptor() {
  protobuf_goldo_2fpb2_5foptions_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_goldo_2fpb2_5foptions_2eproto::file_level_enum_descriptors[0];
}
bool CppType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::google::protobuf::internal::EnumTypeTraits< ::goldo::pb2_options::CppType, ::goldo::pb2_options::CppType_IsValid>, 14, false >
  cpp_type(kCppTypeFieldNumber, static_cast< ::goldo::pb2_options::CppType >(0));
::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::google::protobuf::internal::PrimitiveTypeTraits< ::google::protobuf::int32 >, 5, false >
  max_count(kMaxCountFieldNumber, 0);
::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::google::protobuf::internal::PrimitiveTypeTraits< bool >, 8, false >
  fixed_count(kFixedCountFieldNumber, false);
::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::google::protobuf::internal::EnumTypeTraits< ::goldo::pb2_options::CppType, ::goldo::pb2_options::CppType_IsValid>, 14, false >
  count_type(kCountTypeFieldNumber, static_cast< ::goldo::pb2_options::CppType >(0));

// @@protoc_insertion_point(namespace_scope)
}  // namespace pb2_options
}  // namespace goldo
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
